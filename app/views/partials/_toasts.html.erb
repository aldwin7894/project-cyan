<div x-data class="absolute top-0 right-0 p-4 overflow-x-hidden min-w-1/4">
  <template
    x-for="(toast, index) in $store.toasts.list"
    :key="toast.id"
  >
    <div
      x-show="toast.visible"
      @click="$store.toasts.destroyToast(index)"
      x-transition:enter="transition ease-in duration-500"
      x-transition:enter-start="transform opacity-0 translate-y-2"
      x-transition:enter-end="transform opacity-100"
      x-transition:leave="transition ease-out duration-5000"
      x-transition:leave-start="transform translate-x-0 opacity-100"
      x-transition:leave-end="transform translate-x-full opacity-0"
      class="bg-gray-900 bg-gradient-to-r text-white p-3 rounded mb-3 shadow-lg flex items-center"
      :class="{
        'from-blue-500 to-blue-600': toast.type === 'info',
        'from-green-500 to-green-600': toast.type === 'success',
        'from-yellow-400 to-yellow-500': toast.type === 'warning',
        'from-red-500 to-pink-500': toast.type === 'error',
      }"
    >
      <ion-icon
        name="information-circle-outline"
        x-show="toast.type == 'info'"
        class="w-6 h-6 mr-2"
      >
      </ion-icon>

      <ion-icon
        name="checkmark-circle-outline"
        x-show="toast.type == 'success'"
        class="w-6 h-6 mr-2"
      >
      </ion-icon>

      <ion-icon
        name="warning-outline"
        x-show="toast.type == 'warning'"
        class="w-6 h-6 mr-2"
      >
      </ion-icon>

      <ion-icon
        name="close-circle-outline"
        x-show="toast.type == 'error'"
        class="w-6 h-6 mr-2"
      >
      </ion-icon>

      <div x-text="toast.message"></div>
    </div>
  </template>
</div>

<% content_for :page_script do %>
  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.store("toasts", {
        counter: 0,
        list: [],
        init() {
          this.counter = 0
          this.list = []
        },
        createToast(message, type = "info") {
          const index = this.list.length
          let totalVisible =
            this.list.filter((toast) => {
              return toast.visible
            }).length + 1
          this.list.push({
            id: this.counter++,
            message,
            type,
            visible: true,
          })
          setTimeout(() => {
            this.destroyToast(index)
          }, 2000 * totalVisible)
        },
        destroyToast(index) {
          this.list[index].visible = false
        },
      });
    });
  </script>
<% end %>
