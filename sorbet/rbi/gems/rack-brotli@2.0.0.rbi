# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-brotli` gem.
# Please instead update this file by running `bin/tapioca gem rack-brotli`.


# source://rack-brotli//lib/rack/brotli/version.rb#1
module Rack
  class << self
    # source://rack/3.1.8/lib/rack/version.rb#18
    def release; end
  end
end

# source://rack-brotli//lib/rack/brotli/deflater.rb#8
module Rack::Brotli
  class << self
    # source://rack-brotli//lib/rack/brotli.rb#10
    def new(app, options = T.unsafe(nil)); end

    # source://rack-brotli//lib/rack/brotli.rb#6
    def release; end
  end
end

# This middleware enables compression of http responses with the `br` encoding,
# when support is detected and allowed.
#
# source://rack-brotli//lib/rack/brotli/deflater.rb#11
class Rack::Brotli::Deflater
  # Creates Rack::Brotli middleware.
  #
  # [app] rack app instance
  # [options] hash of deflater options, i.e.
  #           'if' - a lambda enabling / disabling deflation based on returned boolean value
  #                  e.g use Rack::Brotli, :if => lambda { |env, status, headers, body| body.map(&:bytesize).reduce(0, :+) > 512 }
  #           'include' - a list of content types that should be compressed
  #           'deflater' - Brotli compression options Hash (see https://brotli.org/encode.html#a4d4 and https://github.com/miyucy/brotli/blob/ea0e058031177e5cc42e361f7d2702a951048a31/ext/brotli/brotli.c#L119-L180)
  #              - 'mode'
  #              - 'quality'
  #              - 'lgwin'
  #              - 'lgblock'
  #
  # @return [Deflater] a new instance of Deflater
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#25
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack-brotli//lib/rack/brotli/deflater.rb#34
  def call(env); end

  private

  # Whether the body should be compressed.
  #
  # @return [Boolean]
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#115
  def should_deflate?(env, status, headers, body); end
end

# Body class used for encoded responses.
#
# source://rack-brotli//lib/rack/brotli/deflater.rb#68
class Rack::Brotli::Deflater::BrotliStream
  # @return [BrotliStream] a new instance of BrotliStream
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#72
  def initialize(body, sync, br_options); end

  # Close the original body if possible.
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#107
  def close; end

  # Yield compressed strings to the given block.
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#79
  def each(&block); end

  # Call the block passed to #each with the compressed data.
  #
  # source://rack-brotli//lib/rack/brotli/deflater.rb#102
  def write(data); end
end

# source://rack-brotli//lib/rack/brotli/deflater.rb#70
Rack::Brotli::Deflater::BrotliStream::BUFFER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://rack-brotli//lib/rack/brotli/version.rb#3
class Rack::Brotli::Version
  class << self
    # source://rack-brotli//lib/rack/brotli/version.rb#4
    def to_s; end
  end
end
