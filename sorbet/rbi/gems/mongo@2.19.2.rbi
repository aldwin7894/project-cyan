# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mongo` gem.
# Please instead update this file by running `bin/tapioca gem mongo`.

# source://mongo//lib/mongo/id.rb#18
module Mongo
  private

  # Clears the driver's OCSP response cache.
  #
  # source://mongo//lib/mongo.rb#104
  def clear_ocsp_cache; end

  # This is a user-settable list of hooks that will be invoked when any new
  # TLS socket is connected. Each hook should be a Proc that takes
  # an OpenSSL::SSL::SSLContext object as an argument. These hooks can be used
  # to modify the TLS context (for example to disallow certain ciphers).
  #
  # @return [Array<Proc>] The list of procs to be invoked when a TLS socket
  #   is connected (may be an empty Array).
  #
  # source://mongo//lib/mongo.rb#115
  def tls_context_hooks; end

  # Set the TLS context hooks.
  #
  # @param hooks [Array<Proc>] An Array of Procs, each of which should take
  #   an OpenSSL::SSL::SSLContext object as an argument.
  #
  # source://mongo//lib/mongo.rb#123
  def tls_context_hooks=(hooks); end

  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_aggregate(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_aggregate=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_aggregate?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_options(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_options=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def broken_view_options?(*args, **_arg1, &block); end

    # Clears the driver's OCSP response cache.
    #
    # source://mongo//lib/mongo.rb#104
    def clear_ocsp_cache; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def options=(*args, **_arg1, &block); end

    # This is a user-settable list of hooks that will be invoked when any new
    # TLS socket is connected. Each hook should be a Proc that takes
    # an OpenSSL::SSL::SSLContext object as an argument. These hooks can be used
    # to modify the TLS context (for example to disallow certain ciphers).
    #
    # @return [Array<Proc>] The list of procs to be invoked when a TLS socket
    #   is connected (may be an empty Array).
    #
    # source://mongo//lib/mongo.rb#115
    def tls_context_hooks; end

    # Set the TLS context hooks.
    #
    # @param hooks [Array<Proc>] An Array of Procs, each of which should take
    #   an OpenSSL::SSL::SSLContext object as an argument.
    #
    # source://mongo//lib/mongo.rb#123
    def tls_context_hooks=(hooks); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def validate_update_replace(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def validate_update_replace=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def validate_update_replace?(*args, **_arg1, &block); end
  end
end

# Represents an address to a server, either with an IP address or socket
# path.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/ipv4.rb#19
class Mongo::Address
  extend ::Forwardable

  # Initialize the address.
  #
  # @example Initialize the address with a DNS entry and port.
  #   Mongo::Address.new("app.example.com:27017")
  # @example Initialize the address with a DNS entry and no port.
  #   Mongo::Address.new("app.example.com")
  # @example Initialize the address with an IPV4 address and port.
  #   Mongo::Address.new("127.0.0.1:27017")
  # @example Initialize the address with an IPV4 address and no port.
  #   Mongo::Address.new("127.0.0.1")
  # @example Initialize the address with an IPV6 address and port.
  #   Mongo::Address.new("[::1]:27017")
  # @example Initialize the address with an IPV6 address and no port.
  #   Mongo::Address.new("[::1]")
  # @example Initialize the address with a unix socket.
  #   Mongo::Address.new("/path/to/socket.sock")
  # @option options
  # @param seed [String] The provided address.
  # @param options [Hash] The address options.
  # @return [Address] a new instance of Address
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#75
  def initialize(seed, options = T.unsafe(nil)); end

  # Check equality of the address to another.
  #
  # @example Check address equality.
  #   address == other
  # @param other [Object] The other object.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#106
  def ==(other); end

  # Check equality for hashing.
  #
  # @example Check hashing equality.
  #   address.eql?(other)
  # @param other [Object] The other object.
  # @return [true, false] If the objects are equal.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/address.rb#121
  def eql?(other); end

  # Calculate the hash value for the address.
  #
  # @example Calculate the hash value.
  #   address.hash
  # @return [Integer] The hash value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#133
  def hash; end

  # @return [String] host The original host name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#88
  def host; end

  # Get a pretty printed address inspection.
  #
  # @example Get the address inspection.
  #   address.inspect
  # @return [String] The nice inspection string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#145
  def inspect; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#94
  def options; end

  # @return [Integer] port The port.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#91
  def port; end

  # @return [String] seed The seed address.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#85
  def seed; end

  # Get a socket for the address stored in this object, given the options.
  #
  # If the address stored in this object looks like a Unix path, this method
  # returns a Unix domain socket for this path.
  #
  # Otherwise, this method attempts to resolve the address stored in
  # this object to IPv4 and IPv6 addresses using +Socket#getaddrinfo+, then
  # connects to the resulting addresses and returns the socket of the first
  # successful connection. The order in which address families (IPv4/IPV6)
  # are tried is the same order in which the addresses are returned by
  # +getaddrinfo+, and is determined by the host system.
  #
  # Name resolution is performed on each +socket+ call. This is done so that
  # any changes to which addresses the host names used as seeds or in
  # server configuration resolve to are immediately noticed by the driver,
  # even if a socket has been connected to the affected host name/address
  # before. However, note that DNS TTL values may still affect when a change
  # to a host address is noticed by the driver.
  #
  # This method propagates any exceptions raised during DNS resolution and
  # subsequent connection attempts. In case of a host name resolving to
  # multiple IP addresses, the error raised by the last attempt is propagated
  # to the caller. This method does not map exceptions to Mongo::Error
  # subclasses, and may raise any subclass of Exception.
  #
  # @api private
  # @example Get a socket.
  #   address.socket(5, :ssl => true)
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param socket_timeout [Float] The socket timeout.
  # @param opts [Hash] The options.
  # @raise [Mongo::Error] If network connection failed.
  # @return [Mongo::Socket::SSL | Mongo::Socket::TCP | Mongo::Socket::Unix] The socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#216
  def socket(socket_timeout, opts = T.unsafe(nil)); end

  # Get the address as a string.
  #
  # @example Get the address as a string.
  #   address.to_s
  # @return [String] The nice string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#261
  def to_s; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#284
  def map_exceptions; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address.rb#275
  def parse_host_port; end
end

# Mapping from socket family to resolver class.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address.rb#35
Mongo::Address::FAMILY_MAP = T.let(T.unsafe(nil), Hash)

# Sets up resolution with IPv4 support if the address is an ip
# address.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/ipv4.rb#25
class Mongo::Address::IPv4
  # Initialize the IPv4 resolver.
  #
  # @example Initialize the resolver.
  #   IPv4.new("127.0.0.1", 27017, 'localhost')
  # @param host [String] The host.
  # @param port [Integer] The port.
  # @return [IPv4] a new instance of IPv4
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv4.rb#72
  def initialize(host, port, host_name = T.unsafe(nil)); end

  # @return [String] host The host.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv4.rb#28
  def host; end

  # @return [String] host_name The original host name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv4.rb#31
  def host_name; end

  # @return [Integer] port The port.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv4.rb#34
  def port; end

  # Get a socket for the provided address type, given the options.
  #
  # @api private
  # @example Get an IPv4 socket.
  #   ipv4.socket(5, :ssl => true)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param socket_timeout [Float] The socket timeout.
  # @param options [Hash] The options.
  # @return [Mongo::Socket::SSL, Mongo::Socket::TCP] The socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv4.rb#119
  def socket(socket_timeout, options = T.unsafe(nil)); end

  class << self
    # Parse an IPv4 address into its host and port.
    #
    # @example Parse the address.
    #   IPv4.parse("127.0.0.1:28011")
    # @param address [String] The address to parse.
    # @return [Array<String, Integer>] The host and port pair.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/address/ipv4.rb#56
    def parse(address); end
  end
end

# The regular expression to use to match an IPv4 ip address.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/ipv4.rb#39
Mongo::Address::IPv4::MATCH = T.let(T.unsafe(nil), Regexp)

# Split value constant.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/address/ipv4.rb#44
Mongo::Address::IPv4::SPLIT = T.let(T.unsafe(nil), String)

# Sets up resolution with IPv6 support if the address is an ip
# address.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/ipv6.rb#25
class Mongo::Address::IPv6
  # Initialize the IPv6 resolver.
  #
  # @example Initialize the resolver.
  #   IPv6.new("::1", 28011, 'localhost')
  # @param host [String] The host.
  # @param port [Integer] The port.
  # @return [IPv6] a new instance of IPv6
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv6.rb#86
  def initialize(host, port, host_name = T.unsafe(nil)); end

  # @return [String] host The host.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv6.rb#28
  def host; end

  # @return [String] host_name The original host name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv6.rb#31
  def host_name; end

  # @return [Integer] port The port.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv6.rb#34
  def port; end

  # Get a socket for the provided address type, given the options.
  #
  # @api private
  # @example Get an IPv6 socket.
  #   ipv4.socket(5, :ssl => true)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param socket_timeout [Float] The socket timeout.
  # @param options [Hash] The options.
  # @return [Mongo::Socket::SSL, Mongo::Socket::TCP] The socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/ipv6.rb#133
  def socket(socket_timeout, options = T.unsafe(nil)); end

  class << self
    # Parse an IPv6 address into its host and port.
    #
    # @example Parse the address.
    #   IPv6.parse("[::1]:28011")
    # @param address [String] The address to parse.
    # @return [Array<String, Integer>] The host and port pair.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/address/ipv6.rb#51
    def parse(address); end
  end
end

# The regular expression to use to match an IPv6 ip address.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/ipv6.rb#39
Mongo::Address::IPv6::MATCH = T.let(T.unsafe(nil), Regexp)

# The localhost constant.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/address.rb#44
Mongo::Address::LOCALHOST = T.let(T.unsafe(nil), String)

# Sets up socket addresses.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/unix.rb#24
class Mongo::Address::Unix
  # Initialize the socket resolver.
  #
  # @example Initialize the resolver.
  #   Unix.new("/path/to/socket.sock", "/path/to/socket.sock")
  # @param host [String] The host.
  # @return [Unix] a new instance of Unix
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/unix.rb#59
  def initialize(host, port = T.unsafe(nil), host_name = T.unsafe(nil)); end

  # @return [String] host The host.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/unix.rb#27
  def host; end

  # @return [nil] port Will always be nil.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/unix.rb#30
  def port; end

  # Get a socket for the provided address type, given the options.
  #
  # @api private
  # @example Get a Unix socket.
  #   address.socket(5)
  # @option options
  # @param socket_timeout [Float] The socket timeout.
  # @param options [Hash] The options.
  # @return [Mongo::Socket::Unix] The socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/address/unix.rb#77
  def socket(socket_timeout, options = T.unsafe(nil)); end

  class << self
    # Parse a socket path.
    #
    # @example Parse the address.
    #   Unix.parse("/path/to/socket.sock")
    # @param address [String] The address to parse.
    # @return [Array<String>] A list with the host (socket path).
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/address/unix.rb#47
    def parse(address); end
  end
end

# The regular expression to use to match a socket path.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/address/unix.rb#35
Mongo::Address::Unix::MATCH = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://mongo//lib/mongo/address/validator.rb#23
module Mongo::Address::Validator
  # Takes an address string in ipv4/ipv6/hostname/socket path format and
  # validates its format.
  #
  # @api private
  #
  # source://mongo//lib/mongo/address/validator.rb#27
  def validate_address_str!(address_str); end

  private

  # Validates format of the hostname, in particular for further use as
  # the origin in same origin verification.
  #
  # The hostname must have been normalized to remove the trailing dot if
  # it was obtained from a DNS record. This method prohibits trailing dots.
  #
  # @api private
  #
  # source://mongo//lib/mongo/address/validator.rb#77
  def validate_hostname!(host); end

  # @api private
  #
  # source://mongo//lib/mongo/address/validator.rb#94
  def validate_port_str!(port); end
end

# This namespace contains all authentication related behavior.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/credential_cache.rb#19
module Mongo::Auth
  extend ::Mongo::Auth

  # Get an authenticator for the provided user to authenticate over the
  # provided connection.
  #
  # @api private
  # @option opts
  # @option opts
  # @param user [Auth::User] The user to authenticate.
  # @param connection [Mongo::Connection] The connection to authenticate over.
  # @param opts [Hash] a customizable set of options
  # @raise [InvalidMechanism]
  # @return [Auth::Aws | Auth::CR | Auth::Gssapi | Auth::LDAP |
  # Auth::Scram | Auth::Scram256 | Auth::X509] The authenticator.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth.rb#97
  def get(user, connection, **opts); end
end

# source://mongo//lib/mongo/auth/aws.rb#20
class Mongo::Auth::Aws < ::Mongo::Auth::Base
  # Log the user in on the current connection.
  #
  # @return [BSON::Document] The document of the authentication response.
  #
  # source://mongo//lib/mongo/auth/aws.rb#26
  def login; end
end

# Defines behavior around a single MONGODB-AWS conversation between the
# client and server.
#
# @api private
# @see https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst#mongodb-aws
#
# source://mongo//lib/mongo/auth/aws/conversation.rb#28
class Mongo::Auth::Aws::Conversation < ::Mongo::Auth::SaslConversationBase
  # Continue the AWS conversation. This sends the client final message
  # to the server after setting the reply from the previous server
  # communication.
  #
  # @api private
  # @param reply_document [BSON::Document] The reply document of the
  #   previous message.
  # @param connection [Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Message] The next message to send.
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#40
  def continue(reply_document, connection); end

  private

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#87
  def client_final_payload; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#68
  def client_first_data; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#75
  def client_first_payload; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#83
  def client_nonce; end

  # Get the id of the conversation.
  #
  # @api private
  # @return [Integer] The conversation id.
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#66
  def conversation_id; end

  # @api private
  # @return [String] The server nonce.
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#61
  def server_nonce; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/conversation.rb#79
  def wrap_data(data); end
end

# The AWS credential set.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/credentials.rb#24
class Mongo::Auth::Aws::Credentials < ::Struct
  # Returns the value of attribute access_key_id
  #
  # @return [Object] the current value of access_key_id
  def access_key_id; end

  # Sets the attribute access_key_id
  #
  # @param value [Object] the value to set the attribute access_key_id to.
  # @return [Object] the newly set value
  def access_key_id=(_); end

  # Returns the value of attribute expiration
  #
  # @return [Object] the current value of expiration
  def expiration; end

  # Sets the attribute expiration
  #
  # @param value [Object] the value to set the attribute expiration to.
  # @return [Object] the newly set value
  def expiration=(_); end

  # @api private
  # @return [true | false] Whether the credentials have expired.
  #
  # source://mongo//lib/mongo/auth/aws/credentials.rb#26
  def expired?; end

  # Returns the value of attribute secret_access_key
  #
  # @return [Object] the current value of secret_access_key
  def secret_access_key; end

  # Sets the attribute secret_access_key
  #
  # @param value [Object] the value to set the attribute secret_access_key to.
  # @return [Object] the newly set value
  def secret_access_key=(_); end

  # Returns the value of attribute session_token
  #
  # @return [Object] the current value of session_token
  def session_token; end

  # Sets the attribute session_token
  #
  # @param value [Object] the value to set the attribute session_token to.
  # @return [Object] the newly set value
  def session_token=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Thread safe cache to store AWS credentials.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/credentials_cache.rb#24
class Mongo::Auth::Aws::CredentialsCache
  # @api private
  # @return [CredentialsCache] a new instance of CredentialsCache
  #
  # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#32
  def initialize; end

  # Clear the credentials from the cache.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#67
  def clear; end

  # Get the credentials from the cache.
  #
  # @api private
  # @return [Aws::Credentials] The cached credentials.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#49
  def credentials; end

  # Set the credentials in the cache.
  #
  # @api private
  # @param credentials [Aws::Credentials] The credentials to cache.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#40
  def credentials=(credentials); end

  # Fetch the credentials from the cache or yield to get them
  # if they are not in the cache or have expired.
  #
  # @api private
  # @return [Aws::Credentials] The cached credentials.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#59
  def fetch; end

  class << self
    # Get or create the singleton instance of the cache.
    #
    # @api private
    # @return [CredentialsCache] The singleton instance.
    #
    # source://mongo//lib/mongo/auth/aws/credentials_cache.rb#28
    def instance; end
  end
end

# Raised when trying to authorize with an invalid configuration
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#24
class Mongo::Auth::Aws::CredentialsNotFound < ::Mongo::Error::AuthError
  # @api private
  # @return [CredentialsNotFound] a new instance of CredentialsNotFound
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#25
  def initialize; end
end

# Retrieves AWS credentials from a variety of sources.
#
# This class provides for AWS credentials retrieval from:
# - the passed user (which receives the credentials passed to the
#   client via URI options and Ruby options)
# - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
#   environment variables (commonly used by AWS SDKs and various tools,
#   as well as AWS Lambda)
# - AssumeRoleWithWebIdentity API call
# - EC2 metadata endpoint
# - ECS metadata endpoint
#
# The sources listed above are consulted in the order specified.
# The first source that contains any of the three credential components
# (access key id, secret access key or session token) is used.
# The credential components must form a valid set if any of the components
# is specified; meaning, access key id and secret access key must
# always be provided together, and if a session token is provided
# the key id and secret key must also be provided. If a source provides
# partial credentials, credential retrieval fails with an exception.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#52
class Mongo::Auth::Aws::CredentialsRetriever
  # @api private
  # @param user [Auth::User | nil] The user object, if one was provided.
  # @param credentials_cache [Auth::Aws::CredentialsCache] The credentials cache.
  # @return [CredentialsRetriever] a new instance of CredentialsRetriever
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#61
  def initialize(user = T.unsafe(nil), credentials_cache: T.unsafe(nil)); end

  # Retrieves a valid set of credentials, if possible, or raises
  # Auth::InvalidConfiguration.
  #
  # @api private
  # @raise Auth::InvalidConfiguration if a source contains an invalid set
  #   of credentials.
  # @raise Auth::Aws::CredentialsNotFound if credentials could not be
  #   retrieved from any source.
  # @return [Auth::Aws::Credentials] A valid set of credentials.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#78
  def credentials; end

  # @api private
  # @return [Auth::User | nil] The user object, if one was provided.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#67
  def user; end

  private

  # Returns credentials from environment variables.
  #
  # @api private
  # @raise Auth::InvalidConfiguration if a source contains an invalid set
  #   of credentials.
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #   if retrieval failed or the obtained credentials are invalid.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#119
  def credentials_from_environment; end

  # Returns credentials from the user object.
  #
  # @api private
  # @param user [Auth::User | nil] The user object, if one was provided.
  # @raise Auth::InvalidConfiguration if a source contains an invalid set
  #   of credentials.
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#101
  def credentials_from_user(user); end

  # Extracts credentials from AssumeRoleWithWebIdentity response.
  #
  # @api private
  # @param response [Net::HTTPResponse] AssumeRoleWithWebIdentity
  #   call response.
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #   if response parsing failed.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#302
  def credentials_from_web_identity_response(response); end

  # Checks whether the credentials provided are valid.
  #
  # Returns true if they are valid, false if they are empty, and
  # raises Auth::InvalidConfiguration if the credentials are
  # incomplete (i.e. some of the components are missing).
  #
  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#329
  def credentials_valid?(credentials, source); end

  # Returns credentials from the EC2 metadata endpoint. The credentials
  # could be empty, partial or invalid.
  #
  # @api private
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #   if retrieval failed.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#150
  def ec2_metadata_credentials; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#192
  def ecs_metadata_credentials; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#318
  def http_get(http, uri, metadata_token); end

  # Returns credentials from the AWS metadata endpoints.
  #
  # @api private
  # @raise Auth::InvalidConfiguration if a source contains an invalid set
  #   of credentials.
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #   if retrieval failed or the obtained credentials are invalid.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#135
  def obtain_credentials_from_endpoints; end

  # Returns inputs for the AssumeRoleWithWebIdentity AWS API call.
  #
  # @api private
  # @return [Array<String | nil, String | nil, String | nil>] Web
  #   identity token, role arn, and role session name.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#244
  def prepare_web_identity_inputs; end

  # Calls AssumeRoleWithWebIdentity to obtain credentials for the
  # given web identity token.
  #
  # @api private
  # @param token [String] The OAuth 2.0 access token or
  #   OpenID Connect ID token that is provided by the identity provider.
  # @param role_arn [String] The Amazon Resource Name (ARN) of the role
  #   that the caller is assuming.
  # @param role_session_name [String] An identifier for the assumed
  #   role session.
  # @return [Net::HTTPResponse | nil] AWS API response if successful,
  #   otherwise nil.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#272
  def request_web_identity_credentials(token, role_arn, role_session_name); end

  # Returns credentials associated with web identity token that is
  # stored in a file. This authentication mechanism is used to authenticate
  # inside EKS. See https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  # for further details.
  #
  # @api private
  # @return [Auth::Aws::Credentials | nil] A set of credentials, or nil
  #   if retrieval failed.
  #
  # source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#230
  def web_identity_credentials; end
end

# Timeout for metadata operations, in seconds.
#
# The auth spec suggests a 10 second timeout but this seems
# excessively long given that the endpoint is essentially local.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/credentials_retriever.rb#57
Mongo::Auth::Aws::CredentialsRetriever::METADATA_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://mongo//lib/mongo/auth/aws.rb#21
Mongo::Auth::Aws::MECHANISM = T.let(T.unsafe(nil), String)

# Helper class for working with AWS requests.
#
# The primary purpose of this class is to produce the canonical AWS
# STS request and calculate the signed headers and signature for it.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/request.rb#32
class Mongo::Auth::Aws::Request
  # Constructs the request.
  #
  # @api private
  # @note By overriding the time, it is possible to create reproducible
  #   requests (in other words, replay a request).
  # @param access_key_id [String] The access key id.
  # @param secret_access_key [String] The secret access key.
  # @param session_token [String] The session token for temporary
  #   credentials.
  # @param host [String] The value of Host HTTP header to use.
  # @param server_nonce [String] The server nonce binary string.
  # @param time [Time] The time of the request.
  # @return [Request] a new instance of Request
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#54
  def initialize(access_key_id:, secret_access_key:, host:, server_nonce:, session_token: T.unsafe(nil), time: T.unsafe(nil)); end

  # @api private
  # @return [String] access_key_id The access key id.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#77
  def access_key_id; end

  # Returns the value of the Authorization header, per the AWS
  # signature V4 specification.
  #
  # @api private
  # @return [String] Authorization header value.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#235
  def authorization; end

  # Returns the canonical request used during calculation of AWS V4
  # signature.
  #
  # @api private
  # @return [String] The canonical request.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#196
  def canonical_request; end

  # @api private
  # @return [String] formatted_date YYYYMMDD formatted date of the request.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#102
  def formatted_date; end

  # @api private
  # @return [String] formatted_time ISO8601-formatted time of the
  #   request, as would be used in X-Amz-Date header.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#97
  def formatted_time; end

  # Returns the hash containing the headers of the calculated canonical
  # request.
  #
  # @api private
  # @note Not all of these headers are part of the signed headers list,
  #   the keys of the hash are not necessarily ordered lexicographically,
  #   and the keys may be in any case.
  # @return [<Hash>] headers The headers.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#147
  def headers; end

  # Returns the hash containing the headers of the calculated canonical
  # request that should be signed, in a ready to sign form.
  #
  # The differences between #headers and this method is this method:
  #
  # - Removes any headers that are not to be signed. Per AWS
  #   specifications it should be possible to sign all headers, but
  #   MongoDB server expects only some headers to be signed and will
  #   not form the correct request if other headers are signed.
  # - Lowercases all header names.
  # - Orders the headers lexicographically in the hash.
  #
  # @api private
  # @return [<Hash>] headers The headers.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#175
  def headers_to_sign; end

  # @api private
  # @return [String] host The value of Host HTTP header to use.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#87
  def host; end

  # @api private
  # @return [String] region The region of the host, derived from the host.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#107
  def region; end

  # Returns the scope of the request, per the AWS signature V4 specification.
  #
  # @api private
  # @return [String] The scope.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#135
  def scope; end

  # @api private
  # @return [String] secret_access_key The secret access key.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#80
  def secret_access_key; end

  # @api private
  # @return [String] server_nonce The server nonce binary string.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#90
  def server_nonce; end

  # @api private
  # @return [String] session_token The session token for temporary
  #   credentials.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#84
  def session_token; end

  # Returns the calculated signature of the canonical request, per
  # the AWS signature V4 specification.
  #
  # @api private
  # @return [String] The signature.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#216
  def signature; end

  # Returns semicolon-separated list of names of signed headers, per
  # the AWS signature V4 specification.
  #
  # @api private
  # @return [String] The signed header list.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#188
  def signed_headers_string; end

  # @api private
  # @return [Time] time The time of the request.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#93
  def time; end

  # Validates the credentials and the constructed request components
  # by sending a real STS GetCallerIdentity request.
  #
  # @api private
  # @return [Hash] GetCallerIdentity result.
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#243
  def validate!; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#273
  def hmac(key, data); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/aws/request.rb#277
  def hmac_hex(key, data); end
end

# The body of the STS GetCallerIdentity request.
#
# This is currently the only request that this class supports making.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/request.rb#37
Mongo::Auth::Aws::Request::STS_REQUEST_BODY = T.let(T.unsafe(nil), String)

# The timeout, in seconds, to use for validating credentials via STS.
#
# @api private
#
# source://mongo//lib/mongo/auth/aws/request.rb#40
Mongo::Auth::Aws::Request::VALIDATE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# Base class for authenticators.
#
# Each authenticator is instantiated for authentication over a particular
# connection.
#
# @api private
#
# source://mongo//lib/mongo/auth/base.rb#27
class Mongo::Auth::Base
  # Initializes the authenticator.
  #
  # @api private
  # @param user [Auth::User] The user to authenticate.
  # @param connection [Mongo::Connection] The connection to authenticate
  #   over.
  # @return [Base] a new instance of Base
  #
  # source://mongo//lib/mongo/auth/base.rb#40
  def initialize(user, connection, **opts); end

  # @api private
  # @return [Mongo::Connection] The connection to authenticate over.
  #
  # source://mongo//lib/mongo/auth/base.rb#33
  def connection; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/base.rb#45
  def conversation; end

  # @api private
  # @return [Mongo::Auth::User] The user to authenticate.
  #
  # source://mongo//lib/mongo/auth/base.rb#30
  def user; end

  private

  # Performs a single-step conversation on the given connection.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/base.rb#52
  def converse_1_step(connection, conversation); end

  # Performs a two-step conversation on the given connection.
  #
  # The implementation is very similar to +converse_multi_step+, but
  # conversations using this method do not involve the server replying
  # with {done: true} to indicate the end of the conversation.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/base.rb#62
  def converse_2_step(connection, conversation); end

  # Performs the variable-length SASL conversation on the given connection.
  #
  # @api private
  # @param connection [Server::Connection] The connection.
  # @param conversation [Auth::*::Conversation] The conversation.
  # @param speculative_auth_result [BSON::Document | nil] The
  #   value of speculativeAuthenticate field of hello response of
  #   the handshake on the specified connection.
  #
  # source://mongo//lib/mongo/auth/base.rb#76
  def converse_multi_step(connection, conversation, speculative_auth_result: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/base.rb#105
  def dispatch_msg(connection, conversation, msg); end

  # Checks whether reply is successful (i.e. has {ok: 1} set) and
  # raises Unauthorized if not.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/base.rb#127
  def validate_reply!(connection, conversation, doc); end
end

# Defines behavior for MongoDB-CR authentication.
#
# @api private
# @deprecated MONGODB-CR authentication mechanism is deprecated
#   as of MongoDB 3.6. Support for it in the Ruby driver will be
#   removed in driver version 3.0. Please use SCRAM instead.
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/cr.rb#28
class Mongo::Auth::CR < ::Mongo::Auth::Base
  # Log the user in on the current connection.
  #
  # @api private
  # @return [BSON::Document] The document of the authentication response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/cr.rb#38
  def login; end
end

# Defines behavior around a single MONGODB-CR conversation between the
# client and server.
#
# @api private
# @deprecated MONGODB-CR authentication mechanism is deprecated
#   as of MongoDB 3.6. Support for it in the Ruby driver will be
#   removed in driver version 3.0. Please use SCRAM instead.
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/cr/conversation.rb#30
class Mongo::Auth::CR::Conversation < ::Mongo::Auth::ConversationBase
  # Continue the CR conversation. This sends the client final message
  # to the server after setting the reply from the previous server
  # communication.
  #
  # @api private
  # @param reply_document [BSON::Document] The reply document of the
  #   previous message.
  # @param connection [Mongo::Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Message] The next message to send.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/cr/conversation.rb#69
  def continue(reply_document, connection); end

  # @api private
  # @return [String] database The database to authenticate against.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/cr/conversation.rb#38
  def database; end

  # @api private
  # @return [String] nonce The initial auth nonce.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/cr/conversation.rb#41
  def nonce; end

  # Start the CR conversation. This returns the first message that
  # needs to be sent to the server.
  #
  # @api private
  # @param connection [Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Message] The first CR conversation message.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/cr/conversation.rb#52
  def start(connection); end
end

# The login message base.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/cr/conversation.rb#35
Mongo::Auth::CR::Conversation::LOGIN = T.let(T.unsafe(nil), Hash)

# The authentication mechanism string.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/cr.rb#33
Mongo::Auth::CR::MECHANISM = T.let(T.unsafe(nil), String)

# Defines common behavior around authentication conversations between
# the client and the server.
#
# @api private
#
# source://mongo//lib/mongo/auth/conversation_base.rb#25
class Mongo::Auth::ConversationBase
  # Create the new conversation.
  #
  # @api private
  # @param user [Auth::User] The user to authenticate.
  # @param connection [Mongo::Connection] The connection to authenticate
  #   over.
  # @return [ConversationBase] a new instance of ConversationBase
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#32
  def initialize(user, connection, **opts); end

  # @api private
  # @return [Protocol::Message] The message to send.
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#55
  def build_message(connection, auth_source, selector); end

  # @api private
  # @return [Mongo::Connection] The connection to authenticate over.
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#41
  def connection; end

  # Returns the hash to provide to the server in the handshake
  # as value of the speculativeAuthenticate key.
  #
  # If the auth mechanism does not support speculative authentication,
  # this method returns nil.
  #
  # @api private
  # @return [Hash | nil] Speculative authentication document.
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#50
  def speculative_auth_document; end

  # @api private
  # @return [Auth::User] user The user for the conversation.
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#38
  def user; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/conversation_base.rb#74
  def validate_external_auth_source; end
end

# Cache store for computed SCRAM credentials.
#
# @api private
#
# source://mongo//lib/mongo/auth/credential_cache.rb#24
module Mongo::Auth::CredentialCache
  private

  # @api private
  #
  # source://mongo//lib/mongo/auth/credential_cache.rb#40
  def cache(key); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/credential_cache.rb#49
  def clear; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/credential_cache.rb#30
  def get(key); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/credential_cache.rb#35
  def set(key, value); end

  class << self
    # @api private
    #
    # source://mongo//lib/mongo/auth/credential_cache.rb#40
    def cache(key); end

    # @api private
    #
    # source://mongo//lib/mongo/auth/credential_cache.rb#49
    def clear; end

    # @api private
    #
    # source://mongo//lib/mongo/auth/credential_cache.rb#30
    def get(key); end

    # @api private
    #
    # source://mongo//lib/mongo/auth/credential_cache.rb#35
    def set(key, value); end

    # @api private
    #
    # source://mongo//lib/mongo/auth/credential_cache.rb#27
    def store; end
  end
end

# The external database name.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#49
Mongo::Auth::EXTERNAL = T.let(T.unsafe(nil), String)

# Constant for the nonce command.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#55
Mongo::Auth::GET_NONCE = T.let(T.unsafe(nil), Hash)

# Defines behavior for Kerberos authentication.
#
# @api private
#
# source://mongo//lib/mongo/auth/gssapi.rb#24
class Mongo::Auth::Gssapi < ::Mongo::Auth::Base
  # Log the user in on the current connection.
  #
  # @api private
  # @return [BSON::Document] The document of the authentication response.
  #
  # source://mongo//lib/mongo/auth/gssapi.rb#34
  def login; end
end

# Defines behaviour around a single Kerberos conversation between the
# client and the server.
#
# @api private
#
# source://mongo//lib/mongo/auth/gssapi/conversation.rb#26
class Mongo::Auth::Gssapi::Conversation < ::Mongo::Auth::SaslConversationBase
  # Create the new conversation.
  #
  # @api private
  # @example Create the new conversation.
  #   Conversation.new(user, 'test.example.com')
  # @param user [Auth::User] The user to converse about.
  # @param connection [Mongo::Connection] The connection to
  #   authenticate over.
  # @return [Conversation] a new instance of Conversation
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#44
  def initialize(user, connection, **opts); end

  # @api private
  # @return [Authenticator] authenticator The native SASL authenticator.
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#59
  def authenticator; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#66
  def client_first_document; end

  # Continue the conversation.
  #
  # @api private
  # @param reply_document [BSON::Document] The reply document of the
  #   previous message.
  # @return [Protocol::Message] The next query to execute.
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#77
  def continue(reply_document, connection); end

  # @api private
  # @return [Protocol::Message] The next query to execute.
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#93
  def finalize(connection); end

  # Get the id of the conversation.
  #
  # @api private
  # @return [Integer] The conversation id.
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#64
  def id; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/gssapi/conversation.rb#86
  def process_continue_response(reply_document); end
end

# The base client continue message.
#
# @api private
#
# source://mongo//lib/mongo/auth/gssapi/conversation.rb#32
Mongo::Auth::Gssapi::Conversation::CONTINUE_MESSAGE = T.let(T.unsafe(nil), Hash)

# The base client first message.
#
# @api private
#
# source://mongo//lib/mongo/auth/gssapi/conversation.rb#29
Mongo::Auth::Gssapi::Conversation::START_MESSAGE = T.let(T.unsafe(nil), Hash)

# The authentication mechanism string.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/gssapi.rb#29
Mongo::Auth::Gssapi::MECHANISM = T.let(T.unsafe(nil), String)

# Raised when trying to authorize with an invalid configuration
#
# @since 2.11.0
#
# source://mongo//lib/mongo/auth.rb#106
class Mongo::Auth::InvalidConfiguration < ::Mongo::Error::AuthError; end

# Raised when trying to get an invalid authorization mechanism.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#111
class Mongo::Auth::InvalidMechanism < ::Mongo::Auth::InvalidConfiguration
  # Instantiate the new error.
  #
  # @example Instantiate the error.
  #   Mongo::Auth::InvalidMechanism.new(:test)
  # @param mechanism [Symbol] The provided mechanism.
  # @return [InvalidMechanism] a new instance of InvalidMechanism
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth.rb#121
  def initialize(mechanism); end
end

# Defines behavior for LDAP Proxy authentication.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/ldap.rb#25
class Mongo::Auth::LDAP < ::Mongo::Auth::Base
  # Log the user in on the current connection.
  #
  # @api private
  # @return [BSON::Document] The document of the authentication response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/ldap.rb#35
  def login; end
end

# Defines behavior around a single PLAIN conversation between the
# client and server.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/ldap/conversation.rb#27
class Mongo::Auth::LDAP::Conversation < ::Mongo::Auth::ConversationBase
  # Start the PLAIN conversation. This returns the first message that
  # needs to be sent to the server.
  #
  # @api private
  # @param connection [Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Query] The first PLAIN conversation message.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/ldap/conversation.rb#43
  def start(connection); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/ldap/conversation.rb#51
  def payload; end
end

# The login message.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/ldap/conversation.rb#32
Mongo::Auth::LDAP::Conversation::LOGIN = T.let(T.unsafe(nil), Hash)

# The authentication mechanism string.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/ldap.rb#30
Mongo::Auth::LDAP::MECHANISM = T.let(T.unsafe(nil), String)

# Constant for the nonce field.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#61
Mongo::Auth::NONCE = T.let(T.unsafe(nil), String)

# Provides constants for the built in roles provided by MongoDB.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#24
module Mongo::Auth::Roles; end

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#backup
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#29
Mongo::Auth::Roles::BACKUP = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#clusterAdmin
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#34
Mongo::Auth::Roles::CLUSTER_ADMIN = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#clusterManager
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#39
Mongo::Auth::Roles::CLUSTER_MANAGER = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#clusterMonitor
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#44
Mongo::Auth::Roles::CLUSTER_MONITOR = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#dbAdmin
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#49
Mongo::Auth::Roles::DATABASE_ADMIN = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#dbAdminAnyDatabase
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#54
Mongo::Auth::Roles::DATABASE_ADMIN_ANY_DATABASE = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#dbOwner
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#59
Mongo::Auth::Roles::DATABASE_OWNER = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#hostManager
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#64
Mongo::Auth::Roles::HOST_MANAGER = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#read
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#69
Mongo::Auth::Roles::READ = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#readAnyDatabase
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#74
Mongo::Auth::Roles::READ_ANY_DATABASE = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#readWrite
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#84
Mongo::Auth::Roles::READ_WRITE = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#readWriteAnyDatabase
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#79
Mongo::Auth::Roles::READ_WRITE_ANY_DATABASE = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#restore
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#89
Mongo::Auth::Roles::RESTORE = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#root
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#94
Mongo::Auth::Roles::ROOT = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#userAdmin
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#99
Mongo::Auth::Roles::USER_ADMIN = T.let(T.unsafe(nil), String)

# @see https://www.mongodb.com/docs/manual/reference/built-in-roles/#userAdminAnyDatabase
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/roles.rb#104
Mongo::Auth::Roles::USER_ADMIN_ANY_DATABASE = T.let(T.unsafe(nil), String)

# Map the symbols parsed from the URI connection string to strategies.
#
# @note This map is not frozen because when mongo_kerberos is loaded,
#   it mutates this map by adding the Kerberos authenticator.
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#69
Mongo::Auth::SOURCES = T.let(T.unsafe(nil), Hash)

# Defines common behavior around SASL conversations between
# the client and the server.
#
# @api private
#
# source://mongo//lib/mongo/auth/sasl_conversation_base.rb#25
class Mongo::Auth::SaslConversationBase < ::Mongo::Auth::ConversationBase
  # Start the SASL conversation. This returns the first message that
  # needs to be sent to the server.
  #
  # @api private
  # @param connection [Server::Connection] The connection being authenticated.
  # @return [Protocol::Message] The first SASL conversation message.
  #
  # source://mongo//lib/mongo/auth/sasl_conversation_base.rb#39
  def start(connection); end

  private

  # Gets the auth mechanism name for the conversation class.
  #
  # Example return: SCRAM-SHA-1.
  #
  # @api private
  # @return [String] Auth mechanism name.
  #
  # source://mongo//lib/mongo/auth/sasl_conversation_base.rb#51
  def auth_mechanism_name; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/sasl_conversation_base.rb#67
  def client_first_document; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/sasl_conversation_base.rb#63
  def client_first_message_options; end

  # Helper method to validate that server nonce starts with the client
  # nonce.
  #
  # Note that this class does not define the client_nonce or server_nonce
  # attributes - derived classes must do so.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/sasl_conversation_base.rb#91
  def validate_server_nonce!; end
end

# The base client continue message.
#
# @api private
#
# source://mongo//lib/mongo/auth/sasl_conversation_base.rb#31
Mongo::Auth::SaslConversationBase::CLIENT_CONTINUE_MESSAGE = T.let(T.unsafe(nil), Hash)

# The base client first message.
#
# @api private
#
# source://mongo//lib/mongo/auth/sasl_conversation_base.rb#28
Mongo::Auth::SaslConversationBase::CLIENT_FIRST_MESSAGE = T.let(T.unsafe(nil), Hash)

# Defines behavior for SCRAM authentication.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram.rb#24
class Mongo::Auth::Scram < ::Mongo::Auth::Base
  # Initializes the Scram authenticator.
  #
  # @api private
  # @option opts
  # @option opts
  # @param user [Auth::User] The user to authenticate.
  # @param connection [Mongo::Connection] The connection to authenticate over.
  # @param opts [Hash] a customizable set of options
  # @return [Scram] a new instance of Scram
  #
  # source://mongo//lib/mongo/auth/scram.rb#40
  def initialize(user, connection, **opts); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram.rb#54
  def conversation; end

  # Log the user in on the current connection.
  #
  # @api private
  # @return [BSON::Document] The document of the authentication response.
  #
  # source://mongo//lib/mongo/auth/scram.rb#62
  def login; end

  # @api private
  # @return [String | nil] The client nonce used in speculative auth on
  #   the current connection.
  #
  # source://mongo//lib/mongo/auth/scram.rb#48
  def speculative_auth_client_nonce; end

  # @api private
  # @return [BSON::Document | nil] The value of speculativeAuthenticate
  #   field of hello response of the handshake on the current connection.
  #
  # source://mongo//lib/mongo/auth/scram.rb#52
  def speculative_auth_result; end
end

# Defines behavior for SCRAM-SHA-256 authentication.
#
# The purpose of this class is to provide the namespace for the
# Scram256::Conversation class.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram256.rb#27
class Mongo::Auth::Scram256 < ::Mongo::Auth::Scram; end

# Defines behavior around a single SCRAM-SHA-256 conversation between
# the client and server.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram256/conversation.rb#26
class Mongo::Auth::Scram256::Conversation < ::Mongo::Auth::ScramConversationBase
  private

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram256/conversation.rb#60
  def digest; end

  # HI algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-2.2
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram256/conversation.rb#37
  def hi(data); end

  # Salted password algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram256/conversation.rb#54
  def salted_password; end
end

# The authentication mechanism string.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram256.rb#29
Mongo::Auth::Scram256::MECHANISM = T.let(T.unsafe(nil), String)

# Defines behavior around a single SCRAM-SHA-1 conversation between
# the client and server.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram/conversation.rb#26
class Mongo::Auth::Scram::Conversation < ::Mongo::Auth::ScramConversationBase
  private

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram/conversation.rb#59
  def digest; end

  # HI algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-2.2
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram/conversation.rb#37
  def hi(data); end

  # Salted password algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram/conversation.rb#53
  def salted_password; end
end

# The authentication mechanism string.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram.rb#27
Mongo::Auth::Scram::MECHANISM = T.let(T.unsafe(nil), String)

# Defines common behavior around authentication conversations between
# the client and the server.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram_conversation_base.rb#25
class Mongo::Auth::ScramConversationBase < ::Mongo::Auth::SaslConversationBase
  # Create the new conversation.
  #
  # @api private
  # @param user [Auth::User] The user to converse about.
  # @param client_nonce [String | nil] The client nonce to use.
  #   If this conversation is created for a connection that performed
  #   speculative authentication, this client nonce must be equal to the
  #   client nonce used for speculative authentication; otherwise, the
  #   client nonce must not be specified.
  # @return [ScramConversationBase] a new instance of ScramConversationBase
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#38
  def initialize(user, connection, client_nonce: T.unsafe(nil)); end

  # @api private
  # @return [String] client_nonce The client nonce.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#44
  def client_nonce; end

  # Continue the SCRAM conversation. This sends the client final message
  # to the server after setting the reply from the previous server
  # communication.
  #
  # @api private
  # @param reply_document [BSON::Document] The reply document of the
  #   previous message.
  # @param connection [Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Message] The next message to send.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#73
  def continue(reply_document, connection); end

  # Finalize the SCRAM conversation. This is meant to be iterated until
  # the provided reply indicates the conversation is finished.
  #
  # @api private
  # @param connection [Server::Connection] The connection being authenticated.
  # @return [Protocol::Message] The next message to send.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#111
  def finalize(connection); end

  # Get the id of the conversation.
  #
  # @api private
  # @example Get the id of the conversation.
  #   conversation.id
  # @return [Integer] The conversation id.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#52
  def id; end

  # Processes the second response from the server.
  #
  # @api private
  # @param reply_document [BSON::Document] The reply document of the
  #   continue response.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#100
  def process_continue_response(reply_document); end

  # Whether the client verified the ServerSignature from the server.
  #
  # @api private
  # @return [true | fase] Whether the server's signature was verified.
  # @see https://jira.mongodb.org/browse/SECURITY-621
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#59
  def server_verified?; end

  # Returns the hash to provide to the server in the handshake
  # as value of the speculativeAuthenticate key.
  #
  # If the auth mechanism does not support speculative authentication,
  # this method returns nil.
  #
  # @api private
  # @return [Hash | nil] Speculative authentication document.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#126
  def speculative_auth_document; end

  private

  # Auth message algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#164
  def auth_message; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#312
  def cache_key(*extra); end

  # Looks for field 'v' in payload data, if it is present verifies the
  # server signature. If verification succeeds, sets @server_verified
  # to true. If verification fails, raises InvalidSignature.
  #
  # This method can be called from different conversation steps
  # depending on whether the short SCRAM conversation is used.
  #
  # @api private
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#205
  def check_server_signature(payload_data); end

  # Get the empty client message.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#171
  def client_empty_message; end

  # Client final implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-7
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#193
  def client_final; end

  # Get the final client message.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#182
  def client_final_message; end

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#148
  def client_first_message_options; end

  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#153
  def client_first_payload; end

  # Client key algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#222
  def client_key; end

  # Client proof algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#235
  def client_proof(key, signature); end

  # Client signature algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#246
  def client_signature(key, message); end

  # @api private
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#371
  def compare_digest(a, b); end

  # First bare implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-7
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#257
  def first_bare; end

  # H algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-2.2
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#268
  def h(string); end

  # HMAC algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-2.2
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#279
  def hmac(data, key); end

  # Get the iterations from the server response.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#288
  def iterations; end

  # Parses a payload like a=value,b=value2 into a hash like
  # {'a' => 'value', 'b' => 'value2'}.
  #
  # @api private
  # @param payload [String] The payload to parse.
  # @return [Hash] Parsed key-value pairs.
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#138
  def parse_payload(payload); end

  # Get the data from the returned payload.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#295
  def payload_data; end

  # Gets the salt from the server response.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#309
  def salt; end

  # Server key algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#323
  def server_key; end

  # Get the server nonce from the payload.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#302
  def server_nonce; end

  # Server signature algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#336
  def server_signature; end

  # Stored key algorithm implementation.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-3
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#347
  def stored_key(key); end

  # Get the without proof message.
  #
  # @api private
  # @see http://tools.ietf.org/html/rfc5802#section-7
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#358
  def without_proof; end

  # XOR operation for two strings.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/scram_conversation_base.rb#367
  def xor(first, second); end
end

# The minimum iteration count for SCRAM-SHA-1 and SCRAM-SHA-256.
#
# @api private
#
# source://mongo//lib/mongo/auth/scram_conversation_base.rb#28
Mongo::Auth::ScramConversationBase::MIN_ITER_COUNT = T.let(T.unsafe(nil), Integer)

# This namespace contains all behavior related to string preparation
# (RFC 3454). It's used to implement SCRAM-SHA-256 authentication,
# which is available in MongoDB server versions 4.0 and later.
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#20
module Mongo::Auth::StringPrep
  extend ::Mongo::Auth::StringPrep

  # Prepare a string given a set of mappings and prohibited character tables.
  #
  # @api private
  # @example Prepare a string.
  #   StringPrep.prepare("some string",
  #   StringPrep::Profiles::SASL::MAPPINGS,
  #   StringPrep::Profiles::SASL::PROHIBITED,
  #   normalize: true, bidi: true)
  # @option options
  # @option options
  # @param data [String] The string to prepare.
  # @param mappings [Array] A list of mappings to apply to the data.
  # @param prohibited [Array] A list of prohibited character lists to ensure the data doesn't
  #   contain after mapping and normalizing the data.
  # @param options [Hash] Optional operations to perform during string preparation.
  # @raise [Error::FailedStringPrepValidation] If stringprep validations fails.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#54
  def prepare(data, mappings, prohibited, options = T.unsafe(nil)); end

  private

  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#64
  def apply_maps(data, mappings); end

  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#70
  def check_bidi!(out); end

  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#86
  def check_prohibited!(out, prohibited); end

  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#96
  def mapping(c, mappings); end

  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#102
  def normalize!(out); end

  # @api private
  # @return [Boolean]
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/auth/stringprep.rb#111
  def table_contains?(table, c); end
end

# source://mongo//lib/mongo/auth/stringprep/profiles/sasl.rb#21
module Mongo::Auth::StringPrep::Profiles; end

# Contains the mappings and prohibited lists for SASLPrep (RFC 4013).
#
# @api private
# @note Only available for Ruby versions 2.2.0 and up.
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/profiles/sasl.rb#28
module Mongo::Auth::StringPrep::Profiles::SASL; end

# The mappings to use for SASL string preparation.
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/profiles/sasl.rb#52
Mongo::Auth::StringPrep::Profiles::SASL::MAPPINGS = T.let(T.unsafe(nil), Array)

# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/profiles/sasl.rb#29
Mongo::Auth::StringPrep::Profiles::SASL::MAP_NON_ASCII_TO_SPACE = T.let(T.unsafe(nil), Hash)

# The prohibited character lists to use for SASL string preparation.
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/profiles/sasl.rb#60
Mongo::Auth::StringPrep::Profiles::SASL::PROHIBITED = T.let(T.unsafe(nil), Array)

# Contains character tables defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#25
module Mongo::Auth::StringPrep::Tables; end

# Table A1 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#29
Mongo::Auth::StringPrep::Tables::A1 = T.let(T.unsafe(nil), Array)

# Table B1 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#431
Mongo::Auth::StringPrep::Tables::B1 = T.let(T.unsafe(nil), Hash)

# Table B2 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#463
Mongo::Auth::StringPrep::Tables::B2 = T.let(T.unsafe(nil), Hash)

# Table B3 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#1840
Mongo::Auth::StringPrep::Tables::B3 = T.let(T.unsafe(nil), Hash)

# Table C1.1 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2684
Mongo::Auth::StringPrep::Tables::C1_1 = T.let(T.unsafe(nil), Array)

# Table C1.2 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2691
Mongo::Auth::StringPrep::Tables::C1_2 = T.let(T.unsafe(nil), Array)

# Table C2.1 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2714
Mongo::Auth::StringPrep::Tables::C2_1 = T.let(T.unsafe(nil), Array)

# Table C2.2 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2722
Mongo::Auth::StringPrep::Tables::C2_2 = T.let(T.unsafe(nil), Array)

# Table C3 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2744
Mongo::Auth::StringPrep::Tables::C3 = T.let(T.unsafe(nil), Array)

# Table C4 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2753
Mongo::Auth::StringPrep::Tables::C4 = T.let(T.unsafe(nil), Array)

# Table C5 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2777
Mongo::Auth::StringPrep::Tables::C5 = T.let(T.unsafe(nil), Array)

# Table C6 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2784
Mongo::Auth::StringPrep::Tables::C6 = T.let(T.unsafe(nil), Array)

# Table C7 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2795
Mongo::Auth::StringPrep::Tables::C7 = T.let(T.unsafe(nil), Array)

# Table C8 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2802
Mongo::Auth::StringPrep::Tables::C8 = T.let(T.unsafe(nil), Array)

# Table C9 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2823
Mongo::Auth::StringPrep::Tables::C9 = T.let(T.unsafe(nil), Array)

# Table D1 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2831
Mongo::Auth::StringPrep::Tables::D1 = T.let(T.unsafe(nil), Array)

# Table D2 as defined by RFC 3454 (string preparation).
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/auth/stringprep/tables.rb#2871
Mongo::Auth::StringPrep::Tables::D2 = T.let(T.unsafe(nil), Array)

# Raised when a user is not authorized on a database.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth.rb#132
class Mongo::Auth::Unauthorized < ::Mongo::Error::AuthError
  include ::Mongo::Error::ReadWriteRetryable
  include ::Mongo::Error::Labelable

  # Instantiate the new error.
  #
  # @example Instantiate the error.
  #   Mongo::Auth::Unauthorized.new(user)
  # @param user [Mongo::Auth::User] The unauthorized user.
  # @param used_mechanism [String] Auth mechanism actually used for
  #   authentication. This is a full string like SCRAM-SHA-256.
  # @param message [String] The error message returned by the server.
  # @param server [Server] The server instance that authentication
  #   was attempted against.
  # @param The [Integer] error code.
  # @return [Unauthorized] a new instance of Unauthorized
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth.rb#153
  def initialize(user, used_mechanism: T.unsafe(nil), message: T.unsafe(nil), server: T.unsafe(nil), code: T.unsafe(nil)); end

  # @return [Integer] The error code.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth.rb#137
  def code; end
end

# Represents a user in MongoDB.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/user/view.rb#20
class Mongo::Auth::User
  include ::Mongo::Loggable

  # Create the new user.
  #
  # @example Create a new user.
  #   Mongo::Auth::User.new(options)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options to create the user from.
  # @return [User] a new instance of User
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#163
  def initialize(options); end

  # Determine if this user is equal to another.
  #
  # @example Check user equality.
  #   user == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#69
  def ==(other); end

  # Get an authentication key for the user based on a nonce from the
  # server.
  #
  # @example Get the authentication key.
  #   user.auth_key(nonce)
  # @param nonce [String] The response from the server.
  # @return [String] The authentication key.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#85
  def auth_key(nonce); end

  # @return [Hash] The authentication mechanism properties.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#37
  def auth_mech_properties; end

  # @return [String] The authorization source, either a database or
  #   external name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#31
  def auth_source; end

  # @return [String] The database the user is created in.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#34
  def database; end

  # Get the UTF-8 encoded name with escaped special characters for use with
  # SCRAM authorization.
  #
  # @example Get the encoded name.
  #   user.encoded_name
  # @return [String] The encoded user name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#98
  def encoded_name; end

  # Get the hash key for the user.
  #
  # @example Get the hash key.
  #   user.hash
  # @return [String] The user hash key.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#110
  def hash; end

  # Get the user's hashed password for SCRAM-SHA-1.
  #
  # @example Get the user's hashed password.
  #   user.hashed_password
  # @return [String] The hashed password.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#122
  def hashed_password; end

  # @return [Symbol] The authorization mechanism.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#40
  def mechanism; end

  # @return [String] The username.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#43
  def name; end

  # Loggable requires an options attribute. We don't have any options
  # hence provide this as a stub.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#55
  def options; end

  # @return [String] The cleartext password.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#46
  def password; end

  # @return [Array<String>] roles The user roles.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#49
  def roles; end

  # Get the user's stringprepped password for SCRAM-SHA-256.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#133
  def sasl_prepped_password; end

  # Get the specification for the user, used in creation.
  #
  # @example Get the user's specification.
  #   user.spec
  # @return [Hash] The user spec.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user.rb#200
  def spec; end

  class << self
    # Generate default auth source based on the URI and options
    #
    # @api private
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/auth/user.rb#213
    def default_auth_source(options); end
  end
end

# Defines behavior for user related operation on databases.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/user/view.rb#25
class Mongo::Auth::User::View
  extend ::Forwardable

  # Initialize the new user view.
  #
  # @example Initialize the user view.
  #   View::User.new(database)
  # @param database [Mongo::Database] The database the view is for.
  # @return [View] a new instance of View
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#68
  def initialize(database); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # Create a new user in the database.
  #
  # @example Create a new read/write user.
  #   view.create('user', password: 'password', roles: [ 'readWrite' ])
  # @option options
  # @option options
  # @param user_or_name [Auth::User, String] The user object or user name.
  # @param options [Hash] The user options.
  # @return [Result] The command response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#48
  def create(user_or_name, options = T.unsafe(nil)); end

  # @return [Database] database The view's database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#29
  def database; end

  # Get info for a particular user in the database.
  #
  # @example Get a particular user's info.
  #   view.info('emily')
  # @option options
  # @param name [String] The user name.
  # @param options [Hash] The options for the info operation.
  # @return [Array] An array wrapping a document containing information on a particular user.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#136
  def info(name, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_preference(*args, **_arg1, &block); end

  # Remove a user from the database.
  #
  # @example Remove the user from the database.
  #   view.remove('user')
  # @option options
  # @option options
  # @param name [String] The user name.
  # @param options [Hash] The options for the remove operation.
  # @return [Result] The command response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#86
  def remove(name, options = T.unsafe(nil)); end

  # Update a user in the database.
  #
  # @example Update a user.
  #   view.update('name', password: 'testpwd')
  # @option options
  # @option options
  # @param user_or_name [Auth::User, String] The user object or user name.
  # @param options [Hash] The user options.
  # @return [Result] The response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#111
  def update(user_or_name, options = T.unsafe(nil)); end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#156
  def execute_operation(options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#152
  def generate(user, options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/user/view.rb#142
  def user_query(name, options = T.unsafe(nil)); end
end

# Defines behavior for X.509 authentication.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/x509.rb#25
class Mongo::Auth::X509 < ::Mongo::Auth::Base
  # Initializes the X.509 authenticator.
  #
  # @api private
  # @param user [Auth::User] The user to authenticate.
  # @param connection [Mongo::Connection] The connection to authenticate over.
  # @return [X509] a new instance of X509
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/x509.rb#36
  def initialize(user, connection, **opts); end

  # Log the user in on the current connection.
  #
  # @api private
  # @return [BSON::Document] The document of the authentication response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/x509.rb#53
  def login; end
end

# Defines behavior around a single X.509 conversation between the
# client and server.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/x509/conversation.rb#27
class Mongo::Auth::X509::Conversation < ::Mongo::Auth::ConversationBase
  # Returns the hash to provide to the server in the handshake
  # as value of the speculativeAuthenticate key.
  #
  # If the auth mechanism does not support speculative authentication,
  # this method returns nil.
  #
  # @api private
  # @return [Hash | nil] Speculative authentication document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/x509/conversation.rb#56
  def speculative_auth_document; end

  # Start the X.509 conversation. This returns the first message that
  # needs to be sent to the server.
  #
  # @api private
  # @param connection [Server::Connection] The connection being
  #   authenticated.
  # @return [Protocol::Message] The first X.509 conversation message.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/x509/conversation.rb#43
  def start(connection); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/auth/x509/conversation.rb#62
  def client_first_document; end
end

# The login message.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/x509/conversation.rb#32
Mongo::Auth::X509::Conversation::LOGIN = T.let(T.unsafe(nil), Hash)

# The authentication mechanism string.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/auth/x509.rb#30
Mongo::Auth::X509::MECHANISM = T.let(T.unsafe(nil), String)

# The run!, running? and stop! methods used to be part of the public API
# in some of the classes which now include this module. Therefore these
# methods must be considered part of the driver's public API for backwards
# compatibility reasons. However using these methods outside of the driver
# is deprecated.
#
# @api private
# @note Do not start or stop background threads in finalizers. See
#   https://jira.mongodb.org/browse/RUBY-2453 and
#   https://bugs.ruby-lang.org/issues/16288. When interpreter exits,
#   background threads are stopped first and finalizers are invoked next,
#   and MRI's internal data structures are basically corrupt at this point
#   if threads are being referenced. Prior to interpreter shutdown this
#   means threads cannot be stopped by objects going out of scope, but
#   most likely the threads hold references to said objects anyway if
#   work is being performed thus the objects wouldn't go out of scope in
#   the first place.
#
# source://mongo//lib/mongo/background_thread.rb#38
module Mongo::BackgroundThread
  include ::Mongo::Loggable

  # Start the background thread.
  #
  # If the thread is already running, this method does nothing.
  #
  # @api public for backwards compatibility only
  #
  # source://mongo//lib/mongo/background_thread.rb#46
  def run!; end

  # @api public for backwards compatibility only
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/background_thread.rb#63
  def running?; end

  # Stop the background thread and wait for to terminate for a reasonable
  # amount of time.
  #
  # @api public for backwards compatibility only
  # @return [true | false] Whether the thread was terminated.
  #
  # source://mongo//lib/mongo/background_thread.rb#77
  def stop!; end

  private

  # Override this method to do the work in the background thread.
  #
  # @api private
  #
  # source://mongo//lib/mongo/background_thread.rb#165
  def do_work; end

  # Override this method to perform additional signaling for the background
  # thread to stop.
  #
  # @api private
  #
  # source://mongo//lib/mongo/background_thread.rb#170
  def pre_stop; end

  # @api private
  #
  # source://mongo//lib/mongo/background_thread.rb#111
  def start!; end

  # Waits for the thread to die, with a timeout.
  #
  # Returns true if the thread died, false otherwise.
  #
  # @api private
  #
  # source://mongo//lib/mongo/background_thread.rb#124
  def wait_for_stop; end
end

# source://mongo//lib/mongo/bulk_write/result.rb#19
class Mongo::BulkWrite
  include ::Mongo::Operation::ResponseHandling
  extend ::Forwardable

  # Create the new bulk write operation.
  #
  # @api private
  # @example Create an ordered bulk write.
  #   Mongo::BulkWrite.new(collection, [{ insert_one: { _id: 1 }}])
  # @example Create an unordered bulk write.
  #   Mongo::BulkWrite.new(collection, [{ insert_one: { _id: 1 }}], ordered: false)
  # @example Create an ordered mixed bulk write.
  #   Mongo::BulkWrite.new(
  #   collection,
  #   [
  #   { insert_one: { _id: 1 }},
  #   { update_one: { filter: { _id: 0 }, update: { '$set' => { name: 'test' }}}},
  #   { delete_one: { filter: { _id: 2 }}}
  #   ]
  #   )
  # @param collection [Mongo::Collection] The collection.
  # @param requests [Enumerable<Hash, BSON::Document>] The requests,
  #   cannot be empty.
  # @param options [Hash, BSON::Document] The options.
  # @return [BulkWrite] a new instance of BulkWrite
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write.rb#123
  def initialize(collection, requests, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # @return [Mongo::Collection] collection The collection.
  #
  # source://mongo//lib/mongo/bulk_write.rb#32
  def collection; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Execute the bulk write operation.
  #
  # @example Execute the bulk write.
  #   bulk_write.execute
  # @return [Mongo::BulkWrite::Result] The result.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write.rb#58
  def execute; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def nro_write_with_retry(*args, **_arg1, &block); end

  # @return [Hash, BSON::Document] options The options.
  #
  # source://mongo//lib/mongo/bulk_write.rb#38
  def options; end

  # Is the bulk write ordered?
  #
  # @api private
  # @example Is the bulk write ordered?
  #   bulk_write.ordered?
  # @return [true, false] If the bulk write is ordered.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write.rb#139
  def ordered?; end

  # @return [Array<Hash, BSON::Document>] requests The requests.
  #
  # source://mongo//lib/mongo/bulk_write.rb#35
  def requests; end

  # Get the write concern for the bulk write.
  #
  # @api private
  # @example Get the write concern.
  #   bulk_write.write_concern
  # @return [WriteConcern] The write concern.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write.rb#153
  def write_concern(session = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_with_retry(*args, **_arg1, &block); end

  private

  # source://mongo//lib/mongo/bulk_write.rb#169
  def base_spec(operation_id, session); end

  # Loop through the requests and check if each operation is allowed to send
  # a hint for each operation on the given server version.
  #
  # For the following operations, the client can send a hint for servers >= 4.2
  # and for the rest, the client can only send it for 4.4+:
  #   - updateOne
  #   - updateMany
  #   - replaceOne
  #
  # @param connection [Connection] The connection object.
  # @return [true | false] Whether the request is able to send hints for
  #   the current server version.
  #
  # source://mongo//lib/mongo/bulk_write.rb#302
  def can_hint?(connection); end

  # source://mongo//lib/mongo/bulk_write.rb#236
  def delete_many(documents, connection, context, operation_id, session, txn_num); end

  # source://mongo//lib/mongo/bulk_write.rb#229
  def delete_one(documents, connection, context, operation_id, session, txn_num); end

  # source://mongo//lib/mongo/bulk_write.rb#186
  def execute_operation(name, values, connection, context, operation_id, result_combiner, session, txn_num = T.unsafe(nil)); end

  # source://mongo//lib/mongo/bulk_write.rb#243
  def insert_one(documents, connection, context, operation_id, session, txn_num); end

  # If the given object is an array return the first element, otherwise
  # return the given object.
  #
  # @param obj [Object] The given object.
  # @return [Object] The first element of the array or the given object.
  #
  # source://mongo//lib/mongo/bulk_write.rb#373
  def maybe_first(obj); end

  # source://mongo//lib/mongo/bulk_write.rb#218
  def op_combiner; end

  # source://mongo//lib/mongo/bulk_write.rb#250
  def replace_one(documents, connection, context, operation_id, session, txn_num); end

  # @return [Boolean]
  #
  # source://mongo//lib/mongo/bulk_write.rb#165
  def single_statement?(operation); end

  # source://mongo//lib/mongo/bulk_write.rb#222
  def split_execute(name, values, connection, context, operation_id, result_combiner, session, txn_num); end

  # source://mongo//lib/mongo/bulk_write.rb#258
  def update_many(documents, connection, context, operation_id, session, txn_num); end

  # source://mongo//lib/mongo/bulk_write.rb#250
  def update_one(documents, connection, context, operation_id, session, txn_num); end

  # source://mongo//lib/mongo/bulk_write.rb#273
  def validate_array_filters!(connection); end

  # source://mongo//lib/mongo/bulk_write.rb#267
  def validate_collation!(connection); end

  # source://mongo//lib/mongo/bulk_write.rb#279
  def validate_hint!(connection); end

  # Perform the request document validation required by driver specifications.
  # This method validates the first key of each update request document to be
  # an operator (i.e. start with $) and the first key of each replacement
  # document to not be an operator (i.e. not start with $). The request document
  # may be invalid without this method flagging it as such (for example an
  # update or replacement document containing some keys which are operators
  # and some which are not), in which case the driver expects the server to
  # fail the operation with an error.
  #
  # Raise an ArgumentError if requests is empty.
  #
  # @raise [Error::InvalidUpdateDocument, Error::InvalidReplacementDocument, ArgumentError] if the document is invalid.
  #
  # source://mongo//lib/mongo/bulk_write.rb#333
  def validate_requests!; end
end

# Defines behavior around combiners
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/combineable.rb#26
module Mongo::BulkWrite::Combineable
  # Create the ordered combiner.
  #
  # @api private
  # @example Create the ordered combiner.
  #   OrderedCombiner.new([{ insert_one: { _id: 0 }}])
  # @param requests [Array<Hash, BSON::Document>] The bulk requests.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#41
  def initialize(requests); end

  # @api private
  # @return [Boolean] Whether one or more operation specifies the
  #   array_filters option.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#56
  def has_array_filters?; end

  # @api private
  # @return [Boolean] Whether one or more operation specifies the collation
  #   option.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#50
  def has_collation?; end

  # @api private
  # @return [Boolean] Whether one or more operation specifies the
  #   hint option.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#62
  def has_hint?; end

  # @api private
  # @return [Array<Hash, BSON::Document>] requests The provided requests.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#29
  def requests; end

  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/combineable.rb#68
  def combine_requests(ops); end
end

# Combines groups of bulk write operations in order.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/ordered_combiner.rb#26
class Mongo::BulkWrite::OrderedCombiner
  include ::Mongo::BulkWrite::Transformable
  include ::Mongo::BulkWrite::Validatable
  include ::Mongo::BulkWrite::Combineable

  # Combine the requests in order.
  #
  # @api private
  # @example Combine the requests.
  #   combiner.combine
  # @return [Array<Hash>] The combined requests.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/ordered_combiner.rb#41
  def combine; end

  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/ordered_combiner.rb#47
  def add(operations, name, document); end

  # @api private
  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/ordered_combiner.rb#53
  def next_group?(name, operations); end
end

# Wraps a series of bulk write operations in a result object.
#
# @since 2.0.6
#
# source://mongo//lib/mongo/bulk_write/result.rb#24
class Mongo::BulkWrite::Result
  # Create the new result object from the results document.
  #
  # @api private
  # @example Create the new result.
  #   Result.new({ 'n_inserted' => 10 })
  # @param results [BSON::Document, Hash] The results document.
  # @param acknowledged [Boolean] Is the result acknowledged?
  # @return [Result] a new instance of Result
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#107
  def initialize(results, acknowledged); end

  # @return [Boolean] Is the result acknowledged?
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#27
  def acknowledged?; end

  # Returns the number of documents deleted.
  #
  # @example Get the number of deleted documents.
  #   result.deleted_count
  # @return [Integer] The number deleted.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#92
  def deleted_count; end

  # Returns the number of documents inserted.
  #
  # @example Get the number of inserted documents.
  #   result.inserted_count
  # @return [Integer] The number inserted.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#120
  def inserted_count; end

  # Get the inserted document ids, if the operation has inserts.
  #
  # @example Get the inserted ids.
  #   result.inserted_ids
  # @return [Array<BSON::ObjectId>] The inserted ids.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#132
  def inserted_ids; end

  # Returns the number of documents matched.
  #
  # @example Get the number of matched documents.
  #   result.matched_count
  # @return [Integer] The number matched.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#144
  def matched_count; end

  # Returns the number of documents modified.
  #
  # @example Get the number of modified documents.
  #   result.modified_count
  # @return [Integer] The number modified.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#156
  def modified_count; end

  # Returns the number of documents upserted.
  #
  # @example Get the number of upserted documents.
  #   result.upserted_count
  # @return [Integer] The number upserted.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#168
  def upserted_count; end

  # Get the upserted document ids, if the operation has inserts.
  #
  # @example Get the upserted ids.
  #   result.upserted_ids
  # @return [Array<BSON::ObjectId>] The upserted ids.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#180
  def upserted_ids; end

  # Validates the bulk write result.
  #
  # @example Validate the result.
  #   result.validate!
  # @raise [Error::BulkWriteError] If the result contains errors.
  # @return [Result] The result.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result.rb#194
  def validate!; end
end

# The fields contained in the result document returned from executing the
# operations.
#
# @since 2.1.0.
#
# source://mongo//lib/mongo/bulk_write/result.rb#75
Mongo::BulkWrite::Result::FIELDS = T.let(T.unsafe(nil), Array)

# Constant for number inserted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#39
Mongo::BulkWrite::Result::INSERTED_COUNT = T.let(T.unsafe(nil), String)

# Constant for inserted ids.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#44
Mongo::BulkWrite::Result::INSERTED_IDS = T.let(T.unsafe(nil), String)

# Constant for number matched.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#49
Mongo::BulkWrite::Result::MATCHED_COUNT = T.let(T.unsafe(nil), String)

# Constant for number modified.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#54
Mongo::BulkWrite::Result::MODIFIED_COUNT = T.let(T.unsafe(nil), String)

# Constant for number removed.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#34
Mongo::BulkWrite::Result::REMOVED_COUNT = T.let(T.unsafe(nil), String)

# Constant for upserted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#59
Mongo::BulkWrite::Result::UPSERTED = T.let(T.unsafe(nil), String)

# Constant for number upserted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#64
Mongo::BulkWrite::Result::UPSERTED_COUNT = T.let(T.unsafe(nil), String)

# Constant for upserted ids.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result.rb#69
Mongo::BulkWrite::Result::UPSERTED_IDS = T.let(T.unsafe(nil), String)

# Combines bulk write results together.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/result_combiner.rb#26
class Mongo::BulkWrite::ResultCombiner
  # Create the new result combiner.
  #
  # @api private
  # @example Create the result combiner.
  #   ResultCombiner.new
  # @return [ResultCombiner] a new instance of ResultCombiner
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#42
  def initialize; end

  # Adds a result to the overall results.
  #
  # @api private
  # @example Add the result.
  #   combiner.combine!(result, count)
  # @param result [Operation::Result] The result to combine.
  # @param count [Integer] The count of requests in the batch.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#58
  def combine!(result, count); end

  # @api private
  # @return [Integer] count The number of documents in the entire batch.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#29
  def count; end

  # Get the final result.
  #
  # @api private
  # @return [BulkWrite::Result] The final result.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#83
  def result; end

  # @api private
  # @return [Hash] results The results hash.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#32
  def results; end

  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#89
  def combine_counts!(result); end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#108
  def combine_errors!(result); end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#97
  def combine_ids!(result); end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#123
  def combine_write_concern_errors!(result); end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/result_combiner.rb#113
  def combine_write_errors!(result); end
end

# source://mongo//lib/mongo/bulk_write.rb#161
Mongo::BulkWrite::SINGLE_STATEMENT_OPS = T.let(T.unsafe(nil), Array)

# Defines behavior around transformations.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#26
module Mongo::BulkWrite::Transformable
  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/transformable.rb#150
  def transform(name, document); end
end

# The delete many model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#31
Mongo::BulkWrite::Transformable::DELETE_MANY = T.let(T.unsafe(nil), Symbol)

# Proc to transform delete many ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#61
Mongo::BulkWrite::Transformable::DELETE_MANY_TRANSFORM = T.let(T.unsafe(nil), Proc)

# The delete one model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#36
Mongo::BulkWrite::Transformable::DELETE_ONE = T.let(T.unsafe(nil), Symbol)

# Proc to transform delete one ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#74
Mongo::BulkWrite::Transformable::DELETE_ONE_TRANSFORM = T.let(T.unsafe(nil), Proc)

# The insert one model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#41
Mongo::BulkWrite::Transformable::INSERT_ONE = T.let(T.unsafe(nil), Symbol)

# Proc to transform insert one ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#87
Mongo::BulkWrite::Transformable::INSERT_ONE_TRANSFORM = T.let(T.unsafe(nil), Proc)

# Document mappers from the bulk api input into proper commands.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#139
Mongo::BulkWrite::Transformable::MAPPERS = T.let(T.unsafe(nil), Hash)

# The replace one model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#46
Mongo::BulkWrite::Transformable::REPLACE_ONE = T.let(T.unsafe(nil), Symbol)

# Proc to transfor replace one ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#94
Mongo::BulkWrite::Transformable::REPLACE_ONE_TRANSFORM = T.let(T.unsafe(nil), Proc)

# The update many model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#51
Mongo::BulkWrite::Transformable::UPDATE_MANY = T.let(T.unsafe(nil), Symbol)

# Proc to transform update many ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#108
Mongo::BulkWrite::Transformable::UPDATE_MANY_TRANSFORM = T.let(T.unsafe(nil), Proc)

# The update one model constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#56
Mongo::BulkWrite::Transformable::UPDATE_ONE = T.let(T.unsafe(nil), Symbol)

# Proc to transform update one ops.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/transformable.rb#124
Mongo::BulkWrite::Transformable::UPDATE_ONE_TRANSFORM = T.let(T.unsafe(nil), Proc)

# Combines groups of bulk write operations in no order.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/unordered_combiner.rb#26
class Mongo::BulkWrite::UnorderedCombiner
  include ::Mongo::BulkWrite::Transformable
  include ::Mongo::BulkWrite::Validatable
  include ::Mongo::BulkWrite::Combineable

  # Combine the requests in order.
  #
  # @api private
  # @example Combine the requests.
  #   combiner.combine
  # @return [Array<Hash>] The combined requests.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/unordered_combiner.rb#41
  def combine; end

  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/unordered_combiner.rb#49
  def add(operations, name, document); end
end

# Defines behavior around validations.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/bulk_write/validatable.rb#26
module Mongo::BulkWrite::Validatable
  # Validate the document.
  #
  # @api private
  # @example Validate the document.
  #   validatable.validate(:insert_one, { _id: 0 })
  # @param name [Symbol] The operation name.
  # @param document [Hash, BSON::Document] The document.
  # @raise [InvalidBulkOperation] If not valid.
  # @return [Hash, BSON::Document] The document.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/validatable.rb#43
  def validate(name, document); end

  private

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/validatable.rb#61
  def validate_document(name, document); end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/bulk_write/validatable.rb#69
  def validate_operation(name); end
end

# A Cursor that attempts to load documents from memory first before hitting
# the database if the same query has already been executed.
#
# @api semiprivate
#
# source://mongo//lib/mongo/caching_cursor.rb#24
class Mongo::CachingCursor < ::Mongo::Cursor
  # @api private
  # @return [Array <BSON::Document>] The cursor's cached documents.
  #
  # source://mongo//lib/mongo/caching_cursor.rb#28
  def cached_docs; end

  # We iterate over the cached documents if they exist already in the
  # cursor otherwise proceed as normal.
  #
  # @api semiprivate
  # @example Iterate over the documents.
  #   cursor.each do |doc|
  #   # ...
  #   end
  #
  # source://mongo//lib/mongo/caching_cursor.rb#37
  def each; end

  # Get a human-readable string representation of +Cursor+.
  #
  # @api semiprivate
  # @example Inspect the cursor.
  #   cursor.inspect
  # @return [String] A string representation of a +Cursor+ instance.
  #
  # source://mongo//lib/mongo/caching_cursor.rb#61
  def inspect; end

  # Acquires the next document for cursor iteration and then
  # inserts that document in the @cached_docs array.
  #
  # @api private
  #
  # source://mongo//lib/mongo/caching_cursor.rb#69
  def try_next; end
end

# The client is the entry point to the driver and is the main object that
# will be interacted with.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/client.rb#24
class Mongo::Client
  include ::Mongo::Loggable
  extend ::Forwardable

  # Instantiate a new driver client.
  #
  # @example Instantiate a single server or mongos client.
  #   Mongo::Client.new(['127.0.0.1:27017'])
  # @example Instantiate a client for a replica set.
  #   Mongo::Client.new(['127.0.0.1:27017', '127.0.0.1:27021'])
  # @example Directly connect to a mongod in a replica set
  #   Mongo::Client.new(['127.0.0.1:27017'], :connect => :direct)
  #   # without `:connect => :direct`, Mongo::Client will discover and
  #   # connect to the replica set if given the address of a server in
  #   # a replica set
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param addresses_or_uri [Array<String> | String] The array of server addresses in the
  #   form of host:port or a MongoDB URI connection string.
  # @param options [Hash] The options to be used by the client. If a MongoDB URI
  #   connection string is also provided, these options take precedence over any
  #   analogous options present in the URI string.
  # @return [Client] a new instance of Client
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#496
  def initialize(addresses_or_uri, options = T.unsafe(nil)); end

  # Determine if this client is equivalent to another object.
  #
  # @example Check client equality.
  #   client == other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#177
  def ==(other); end

  # Get a collection object for the provided collection name.
  #
  # @example Get the collection.
  #   client[:users]
  # @param collection_name [String, Symbol] The name of the collection.
  # @param options [Hash] The options to the collection.
  # @return [Mongo::Collection] The collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#194
  def [](collection_name, options = T.unsafe(nil)); end

  # Close all connections.
  #
  # @return [true] Always true.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/client.rb#879
  def close; end

  # Close encrypter and clean up auto-encryption resources.
  #
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#890
  def close_encrypter; end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#870
  def closed?; end

  # @return [Mongo::Cluster] cluster The cluster of servers for the client.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#138
  def cluster; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#625
  def cluster_options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collections(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def command(*args, **_arg1, &block); end

  # @return [Mongo::Database] database The database the client is operating on.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#141
  def database; end

  # Get the names of all databases.
  #
  # @example Get the database names.
  #   client.database_names
  # @option opts
  # @option opts
  # @option options
  # @param filter [Hash] The filter criteria for getting a list of databases.
  # @param opts [Hash] The command options.
  # @param options [Hash] a customizable set of options
  # @return [Array<String>] The names of the databases.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/client.rb#943
  def database_names(filter = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns encrypted field map hash if provided when creating the client.
  #
  # @api private
  # @return [Hash | nil] Encrypted field map hash, or nil if not set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1184
  def encrypted_fields_map; end

  # @return [Mongo::Crypt::AutoEncrypter] The object that encapsulates
  #   auto-encryption behavior
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#148
  def encrypter; end

  # Determine if this client is equivalent to another object.
  #
  # @example Check client equality.
  #   client == other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#177
  def eql?(other); end

  # Returns a session to use for operations if possible.
  #
  # If :session option is set, validates that session and returns it.
  # Otherwise, if deployment supports sessions, creates a new session and
  # returns it. When a new session is created, the session will be implicit
  # (lifecycle is managed by the driver) if the :implicit option is given,
  # otherwise the session will be explicit (lifecycle managed by the
  # application). If deployment does not support session, returns nil.
  #
  # @api private
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Session | nil] Session object or nil if sessions are not
  #   supported by the deployment.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1124
  def get_session(options = T.unsafe(nil)); end

  # Get the hash value of the client.
  #
  # @example Get the client hash value.
  #   client.hash
  # @return [Integer] The client hash value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#206
  def hash; end

  # Get an inspection of the client as a string.
  #
  # @example Inspect the client.
  #   client.inspect
  # @return [String] The inspection string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#688
  def inspect; end

  # Get info for each database.
  #
  # @example Get the info for each database.
  #   client.list_databases
  # @option opts
  # @option opts
  # @option options
  # @param filter [Hash] The filter criteria for getting a list of databases.
  # @param name_only [true, false] Whether to only return each database name without full metadata.
  # @param opts [Hash] The command options.
  # @param options [Hash] a customizable set of options
  # @return [Array<Hash>] The info for each database.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/client.rb#969
  def list_databases(filter = T.unsafe(nil), name_only = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Mongo::Database objects.
  #
  # @example Get a list of Mongo::Database objects.
  #   client.list_mongo_databases
  # @option opts
  # @option options
  # @param filter [Hash] The filter criteria for getting a list of databases.
  # @param opts [Hash] The command options.
  # @param options [Hash] a customizable set of options
  # @return [Array<Mongo::Database>] The list of database objects.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/client.rb#992
  def list_mongo_databases(filter = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Get the maximum number of times the client can retry a read operation
  # when using legacy read retries.
  #
  # @api private
  # @return [Integer] The maximum number of retries.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#656
  def max_read_retries; end

  # Get the maximum number of times the client can retry a write operation
  # when using legacy write retries.
  #
  # @api private
  # @return [Integer] The maximum number of retries.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#676
  def max_write_retries; end

  # @return [Hash] options The configuration options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#144
  def options; end

  # Get the read concern for this client.
  #
  # @example Get the client read concern.
  #   client.read_concern
  # @return [Hash] The read concern.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/client.rb#853
  def read_concern; end

  # Get the read preference from the options passed to the client.
  #
  # @example Get the read preference.
  #   client.read_preference
  # @return [BSON::Document] The user-defined read preference.
  #   The document may have the following fields:
  #   - *:mode* -- read preference specified as a symbol; valid values are
  #   *:primary*, *:primary_preferred*, *:secondary*, *:secondary_preferred*
  #   and *:nearest*.
  #   - *:tag_sets* -- an array of hashes.
  #   - *:local_threshold*.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#736
  def read_preference; end

  # Get the interval, in seconds, in which read retries when using legacy
  # read retries.
  #
  # @api private
  # @return [Float] The interval.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#666
  def read_retry_interval; end

  # Reconnect the client.
  #
  # @example Reconnect the client.
  #   client.reconnect
  # @return [true] Always true.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/client.rb#904
  def reconnect; end

  # Get the server selector. It either uses the read preference
  # defined in the client options or defaults to a Primary server selector.
  #
  # @example Get the server selector.
  #   client.server_selector
  # @return [Mongo::ServerSelector] The server selector using the
  #   user-defined read preference or a Primary server selector default.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/client.rb#714
  def server_selector; end

  # Start a session.
  #
  # If the deployment does not support sessions, raises
  # Mongo::Error::InvalidSession. This exception can also be raised when
  # the driver is not connected to a data-bearing server, for example
  # during failover.
  #
  # @example Start a session.
  #   client.start_session(causal_consistency: true)
  # @note A Session cannot be used by multiple threads at once; session
  #   objects are not thread-safe.
  # @param options [Hash] The session options. Accepts the options
  #   that Session#initialize accepts.
  # @return [Session] The session.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/client.rb#1017
  def start_session(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def subscribe(*args, **_arg1, &block); end

  # Get a summary of the client state.
  #
  # @note The exact format and layout of the returned summary string is
  #   not part of the driver's public API and may be changed at any time.
  # @return [String] The summary string.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/client.rb#700
  def summary; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def unsubscribe(*args, **_arg1, &block); end

  # Updates this client's options from new_options, validating all options.
  #
  # The new options may be transformed according to various rules.
  # The final hash of options actually applied to the client is returned.
  #
  # If options fail validation, this method may warn or raise an exception.
  # If this method raises an exception, the client should be discarded
  # (similarly to if a constructor raised an exception).
  #
  # @api private
  # @param new_options [Hash] The new options to use.
  # @return [Hash] Modified new options written into the client.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#803
  def update_options(new_options); end

  # Creates a new client configured to use the database with the provided
  # name, and using the other options configured in this client.
  #
  # @example Create a client for the `users' database.
  #   client.use(:users)
  # @note The new client shares the cluster with the original client,
  #   and as a result also shares the monitoring instance and monitoring
  #   event subscribers.
  # @param name [String, Symbol] The name of the database to use.
  # @return [Mongo::Client] A new client instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#755
  def use(name); end

  # As of version 3.6 of the MongoDB server, a ``$changeStream`` pipeline stage is supported
  # in the aggregation framework. As of version 4.0, this stage allows users to request that
  # notifications are sent for all changes that occur in the client's cluster.
  #
  # @example Get change notifications for the client's cluster.
  #   client.watch([{ '$match' => { operationType: { '$in' => ['insert', 'replace'] } } }])
  # @note A change stream only allows 'majority' read concern.
  # @note This helper method is preferable to running a raw aggregation with a $changeStream
  #   stage, for the purpose of supporting resumability.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] Optional additional filter operators.
  # @param options [Hash] The change stream options.
  # @return [ChangeStream] The change stream object.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/client.rb#1094
  def watch(pipeline = T.unsafe(nil), options = T.unsafe(nil)); end

  # Creates a new client with the passed options merged over the existing
  # options of this client. Useful for one-offs to change specific options
  # without altering the original client.
  #
  # @example Get a client with changed options.
  #   client.with(:read => { :mode => :primary_preferred })
  # @note Depending on options given, the returned client may share the
  #   cluster with the original client or be created with a new cluster.
  #   If a new cluster is created, the monitoring event subscribers on
  #   the new client are set to the default event subscriber set and
  #   none of the subscribers on the original client are copied over.
  # @param new_options [Hash] The new options to use.
  # @return [Mongo::Client] A new client instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#777
  def with(new_options = T.unsafe(nil)); end

  # Creates a session to use for operations if possible and yields it to
  # the provided block.
  #
  # If :session option is set, validates that session and uses it.
  # Otherwise, if deployment supports sessions, creates a new session and
  # uses it. When a new session is created, the session will be implicit
  # (lifecycle is managed by the driver) if the :implicit option is given,
  # otherwise the session will be explicit (lifecycle managed by the
  # application). If deployment does not support session, yields nil to
  # the block.
  #
  # When the block finishes, if the session was created and was implicit,
  # or if an implicit session was passed in, the session is ended which
  # returns it to the pool of available sessions.
  #
  # @api private
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1150
  def with_session(options = T.unsafe(nil), &block); end

  # Get the write concern for this client. If no option was provided, then a
  # default single server acknowledgement will be used.
  #
  # @example Get the client write concern.
  #   client.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#866
  def write_concern; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1628
  def assert_not_closed; end

  # Create a new encrypter object using the client's auto encryption options
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1191
  def build_encrypter; end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1273
  def cluster_modifying?(new_options); end

  # Generate default client options based on the URI and options
  # passed into the Client constructor.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1199
  def default_options(options); end

  # Implementation for #close, assumes the connect lock is already acquired.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1215
  def do_close; end

  # Returns a session to use for operations.
  #
  # If :session option is set, validates that session and returns it.
  # Otherwise, if deployment supports sessions, creates a new session and
  # returns it. When a new session is created, the session will be implicit
  # (lifecycle is managed by the driver) if the :implicit option is given,
  # otherwise the session will be explicit (lifecycle managed by the
  # application). If deployment does not support session, raises
  # Error::InvalidSession.
  #
  # @api private
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @raise Error::SessionsNotSupported if sessions are not supported by
  #   the deployment.
  # @return [Session] A session object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1240
  def get_session!(options = T.unsafe(nil)); end

  # Auxiliary method that is called by interpreter when copying the client
  # via dup or clone.
  #
  # @api private
  # @param original [Mongo::Client] Client that is being cloned.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1264
  def initialize_copy(original); end

  # @api private
  # @return [Monitoring] monitoring The monitoring.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#158
  def monitoring; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1550
  def valid_compressors(compressors); end

  # Validates all authentication-related options after they are set on the client
  # This method is intended to catch combinations of options which are not allowed
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1495
  def validate_authentication_options!; end

  # Validates whether the max_connecting option is valid.
  #
  # @param option [Symbol] The option to validate.
  # @param opts [Hash] The client options.
  # @raise [Error::InvalidMaxConnecting] If the option is invalid.
  # @return [true] If the option is valid.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1598
  def validate_max_connecting!(option, opts); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1581
  def validate_max_min_pool_size!(option, opts); end

  # Validates options in the provided argument for validity.
  # The argument may contain a subset of options that the client will
  # eventually have; this method validates each of the provided options
  # but does not check for interactions between combinations of options.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1286
  def validate_new_options!(opts); end

  # Validates all options after they are set on the client.
  # This method is intended to catch combinations of options which are
  # not allowed.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1361
  def validate_options!(addresses = T.unsafe(nil), is_srv: T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1608
  def validate_read!(option, opts); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1563
  def validate_snappy_compression!; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/client.rb#1572
  def validate_zstd_compression!; end

  class << self
    # Lowercases auth mechanism properties, if given, in the specified
    # options, then converts the options to an instance of Options::Redacted.
    #
    # @api private
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/client.rb#1168
    def canonicalize_ruby_options(options); end
  end
end

# The options that do not affect the behavior of a cluster and its
# subcomponents.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/client.rb#32
Mongo::Client::CRUD_OPTIONS = T.let(T.unsafe(nil), Array)

# The compression algorithms supported by the driver.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/client.rb#126
Mongo::Client::VALID_COMPRESSORS = T.let(T.unsafe(nil), Array)

# Valid client options.
#
# @since 2.1.2
#
# source://mongo//lib/mongo/client.rb#55
Mongo::Client::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# The known server API versions.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/client.rb#133
Mongo::Client::VALID_SERVER_API_VERSIONS = T.let(T.unsafe(nil), Array)

# ClientEncryption encapsulates explicit operations on a key vault
# collection that cannot be done directly on a MongoClient. It
# provides an API for explicitly encrypting and decrypting values,
# and creating data keys.
#
# source://mongo//lib/mongo/client_encryption.rb#23
class Mongo::ClientEncryption
  # Create a new ClientEncryption object with the provided options.
  #
  # @option options
  # @option options
  # @option options
  # @param key_vault_client [Mongo::Client] A Mongo::Client
  #   that is connected to the MongoDB instance where the key vault
  #   collection is stored.
  # @param options [Hash] The ClientEncryption options.
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [ClientEncryption] a new instance of ClientEncryption
  #
  # source://mongo//lib/mongo/client_encryption.rb#46
  def initialize(key_vault_client, options = T.unsafe(nil)); end

  # Adds a key_alt_name for the key in the key vault collection with the given id.
  #
  # @param id [BSON::Binary] Id of the key to add new key alt name.
  # @param key_alt_name [String] New key alt name to add.
  # @return [BSON::Document | nil] Document describing the identified key
  #   before adding the key alt name, or nil if no such key.
  #
  # source://mongo//lib/mongo/client_encryption.rb#180
  def add_key_alt_name(id, key_alt_name); end

  # Generates a data key used for encryption/decryption and stores
  # that key in the KMS collection. The generated key is encrypted with
  # the KMS master key.
  #
  # @option options
  # @option options
  # @option options
  # @param kms_provider [String] The KMS provider to use. Valid values are
  #   "aws" and "local".
  # @param options [Hash]
  # @return [BSON::Binary] The 16-byte UUID of the new data key as a
  #   BSON::Binary object with type :uuid.
  #
  # source://mongo//lib/mongo/client_encryption.rb#81
  def create_data_key(kms_provider, options = T.unsafe(nil)); end

  # Create collection with encrypted fields.
  #
  # If :encryption_fields contains a keyId with a null value, a data key
  # will be automatically generated and assigned to keyId value.
  #
  # @note This method does not update the :encrypted_fields_map in the client's
  #   :auto_encryption_options. Therefore, in order to use the collection
  #   created by this method with automatic encryption, the user must create
  #   a new client after calling this function with the :encrypted_fields returned.
  # @param database [Mongo::Database] Database to create collection in.
  # @param coll_name [String] Name of collection to create.
  # @param coll_opts [Hash] Options for collection to create.
  # @param kms_provider [String] KMS provider to encrypt fields.
  # @param master_key [Hash | nil] Document describing master key to encrypt fields.
  # @raise [ArgumentError]
  # @return [Array<Operation::Result, Hash>] The result of the create
  #   collection operation and the encrypted fields map used to create
  #   the collection.
  #
  # source://mongo//lib/mongo/client_encryption.rb#267
  def create_encrypted_collection(database, coll_name, coll_opts, kms_provider, master_key); end

  # Decrypts a value that has already been encrypted.
  #
  # @param value [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   that will be decrypted.
  # @return [Object] The decrypted value.
  #
  # source://mongo//lib/mongo/client_encryption.rb#169
  def decrypt(value); end

  # Removes the key with the given id from the key vault collection.
  #
  # @param id [BSON::Binary] Id of the key to delete.
  # @return [Operation::Result] The response from the database for the delete_one
  #   operation that deletes the key.
  #
  # source://mongo//lib/mongo/client_encryption.rb#190
  def delete_key(id); end

  # Encrypts a value using the specified encryption key and algorithm.
  #
  # if encryption algorithm is set to "Indexed". Query type should be set
  #   only if encryption algorithm is set to "Indexed". The only allowed
  #   value is "equality".
  #
  # @note The :key_id and :key_alt_name options are mutually exclusive. Only
  #   one is required to perform explicit encryption.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param value [Object] The value to encrypt.
  # @param options [Hash]
  # @raise [ArgumentError] if either contention_factor or query_type
  #   is set, and algorithm is not "Indexed".
  # @return [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   representing the encrypted value.
  #
  # source://mongo//lib/mongo/client_encryption.rb#119
  def encrypt(value, options = T.unsafe(nil)); end

  # Encrypts a Match Expression or Aggregate Expression to query a range index.
  #
  # Only supported when queryType is "rangePreview" and algorithm is "RangePreview".
  # @note: The Range algorithm is experimental only. It is not intended
  #   for public use. It is subject to breaking changes.
  #
  # # @param [ Hash ] options
  #
  # @example Encrypt Match Expression.
  #   encryption.encrypt_expression(
  #   {'$and' =>  [{'field' => {'$gt' => 10}}, {'field' =>  {'$lt' => 20 }}]}
  #   )
  # @example Encrypt Aggregate Expression.
  #   encryption.encrypt_expression(
  #   {'$and' =>  [{'$gt' => ['$field', 10]}, {'$lt' => ['$field', 20]}}
  #   )
  #   {$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]
  # @note The :key_id and :key_alt_name options are mutually exclusive. Only
  #   one is required to perform explicit encryption.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param expression [Hash] Expression to encrypt.
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError] if disallowed values in options are set.
  # @return [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   representing the encrypted expression.
  #
  # source://mongo//lib/mongo/client_encryption.rb#159
  def encrypt_expression(expression, options = T.unsafe(nil)); end

  # Finds a single key with the given id.
  #
  # @param id [BSON::Binary] Id of the key to get.
  # @return [BSON::Document | nil] The found key document or nil
  #   if not found.
  #
  # source://mongo//lib/mongo/client_encryption.rb#200
  def get_key(id); end

  # Returns a key in the key vault collection with the given key_alt_name.
  #
  # @param key_alt_name [String] Key alt name to find a key.
  # @return [BSON::Document | nil] The found key document or nil
  #   if not found.
  #
  # source://mongo//lib/mongo/client_encryption.rb#210
  def get_key_by_alt_name(key_alt_name); end

  # Returns all keys in the key vault collection.
  #
  # @return [Collection::View] Keys in the key vault collection.
  #
  # source://mongo//lib/mongo/client_encryption.rb#217
  def get_keys; end

  # Returns all keys in the key vault collection.
  #
  # @return [Collection::View] Keys in the key vault collection.
  #
  # source://mongo//lib/mongo/client_encryption.rb#217
  def keys; end

  # Removes a key_alt_name from a key in the key vault collection with the given id.
  #
  # @param id [BSON::Binary] Id of the key to remove key alt name.
  # @param key_alt_name [String] Key alt name to remove.
  # @return [BSON::Document | nil] Document describing the identified key
  #   before removing the key alt name, or nil if no such key.
  #
  # source://mongo//lib/mongo/client_encryption.rb#229
  def remove_key_alt_name(id, key_alt_name); end

  # Decrypts multiple data keys and (re-)encrypts them with a new master_key,
  #   or with their current master_key if a new one is not given.
  #
  # @option options
  # @option options
  # @param filter [Hash] Filter used to find keys to be updated.
  # @param options [Hash]
  # @return [Crypt::RewrapManyDataKeyResult] Result of the operation.
  #
  # source://mongo//lib/mongo/client_encryption.rb#244
  def rewrap_many_data_key(filter, opts = T.unsafe(nil)); end

  private

  # Create data keys for fields in encrypted_fields that has :keyId key,
  # but the value is nil.
  #
  # @param encrypted_fields [Hash] Encrypted fields map.
  # @param kms_provider [String] KMS provider to encrypt fields.
  # @param master_key [Hash | nil] Document describing master key to encrypt fields.
  # @return [Hash] Encrypted fields map with keyIds for fields
  #   that did not have one.
  #
  # source://mongo//lib/mongo/client_encryption.rb#291
  def create_data_keys(encrypted_fields, kms_provider, master_key); end
end

# Represents a group of servers on the server side, either as a
# single server, a replica set, or a single or multiple mongos.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology.rb#19
class Mongo::Cluster
  include ::Mongo::Loggable
  include ::Mongo::Monitoring::Publishable
  include ::Mongo::Event::Subscriber
  include ::Mongo::ClusterTime::Consumer
  extend ::Forwardable

  # Instantiate the new cluster.
  #
  # @api private
  # @example Instantiate the cluster.
  #   Mongo::Cluster.new(["127.0.0.1:27017"], monitoring)
  # @note Cluster should never be directly instantiated outside of a Client.
  # @note When connecting to a mongodb+srv:// URI, the client expands such a
  #   URI into a list of servers and passes that list to the Cluster
  #   constructor. When connecting to a standalone mongod, the Cluster
  #   constructor receives the corresponding address as an array of one string.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param seeds [Array<String>] The addresses of the configured servers
  # @param monitoring [Monitoring] The monitoring.
  # @param options [Hash] Options. Client constructor forwards its
  #   options to Cluster constructor, although Cluster recognizes
  #   only a subset of the options recognized by Client.
  # @return [Cluster] a new instance of Cluster
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#120
  def initialize(seeds, monitoring, options = T.unsafe(nil)); end

  # Determine if this cluster of servers is equal to another object. Checks the
  # servers currently in the cluster, not what was configured.
  #
  # @example Is the cluster equal to the object?
  #   cluster == other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#738
  def ==(other); end

  # Add a server to the cluster with the provided address. Useful in
  # auto-discovery of new servers when an existing server executes a hello
  # and potentially non-configured servers were included.
  #
  # @example Add the server for the address to the cluster.
  #   cluster.add('127.0.0.1:27018')
  # @option options
  # @param host [String] The address of the server to add.
  # @param options [Hash] a customizable set of options
  # @return [Server] The newly added server, if not present already.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#836
  def add(host, add_options = T.unsafe(nil)); end

  # The addresses in the cluster.
  #
  # @example Get the addresses in the cluster.
  #   cluster.addresses
  # @return [Array<Mongo::Address>] The addresses.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/cluster.rb#451
  def addresses; end

  # @return [Mongo::Server::AppMetadata] The application metadata, used for
  #   connection handshakes.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster.rb#317
  def app_metadata; end

  # Closes the cluster.
  #
  # the cluster rather than calling this method. This method is for
  # internal driver use only.
  #
  # Disconnects all servers in the cluster, publishing appropriate SDAM
  # events in the process. Stops SRV monitoring if it is active.
  # Marks the cluster disconnected.
  #
  # A closed cluster is no longer usable. If the client is reconnected,
  # it will create a new cluster instance.
  #
  # @api private
  # @note Applications should call Client#close to disconnect from
  # @return [nil] Always nil.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#506
  def close; end

  # Whether the cluster object is connected to its cluster.
  #
  # @api private
  # @return [true|false] Whether the cluster is connected.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster.rb#424
  def connected?; end

  # Whether the cluster object is in the process of connecting to its cluster.
  #
  # @api private
  # @return [true|false] Whether the cluster is connecting.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#412
  def connecting?; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#944
  def disconnect_server_if_connected(server); end

  # Determine if the cluster would select a readable server for the
  # provided read preference.
  #
  # @example Is a readable server present?
  #   topology.has_readable_server?(server_selector)
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [true, false] If a readable server is present.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster.rb#755
  def has_readable_server?(server_selector = T.unsafe(nil)); end

  # Determine if the cluster would select a writable server.
  #
  # @example Is a writable server present?
  #   topology.has_writable_server?
  # @return [true, false] If a writable server is present.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster.rb#767
  def has_writable_server?; end

  # Get the refresh interval for the server. This will be defined via an
  # option or will default to 10.
  #
  # @api private
  # @return [Float] The heartbeat interval, in seconds.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/cluster.rb#403
  def heartbeat_interval; end

  # Get the nicer formatted string for use in inspection.
  #
  # @example Inspect the cluster.
  #   cluster.inspect
  # @return [String] The cluster inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#473
  def inspect; end

  # Returns whether the cluster is configured to be in the load-balanced
  # topology.
  #
  # @return [true | false] Whether the topology is load-balanced.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#345
  def load_balanced?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logical_session_timeout(*args, **_arg1, &block); end

  # Get the maximum number of times the client can retry a read operation
  # when using legacy read retries.
  #
  # @deprecated
  # @example Get the max read retries.
  #   cluster.max_read_retries
  # @note max_read_retries should be retrieved from the Client instance,
  #   not from a Cluster instance, because clusters may be shared between
  #   clients with different values for max read retries.
  # @return [Integer] The maximum number of retries.
  # @since 2.1.1
  #
  # source://mongo//lib/mongo/cluster.rb#374
  def max_read_retries; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#320
  def monitor_app_metadata; end

  # @return [Monitoring] monitoring The monitoring.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#308
  def monitoring; end

  # Get the next primary server we can send an operation to.
  #
  # @example Get the next primary server.
  #   cluster.next_primary
  # @param ping [true, false] Whether to ping the server before selection.
  #   Deprecated and ignored.
  # @param session [Session | nil] Optional session to take into account
  #   for mongos pinning.
  # @return [Mongo::Server] A primary server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#784
  def next_primary(ping = T.unsafe(nil), session = T.unsafe(nil)); end

  # @return [Hash] The options hash.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#305
  def options; end

  # Get the connection pool for the server.
  #
  # @deprecated
  # @example Get the connection pool.
  #   cluster.pool(server)
  # @param server [Server] The server.
  # @return [Server::ConnectionPool] The connection pool.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cluster.rb#799
  def pool(server); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#323
  def push_monitor_app_metadata; end

  # Get the interval, in seconds, in which read retries when using legacy
  # read retries.
  #
  # @deprecated
  # @example Get the read retry interval.
  #   cluster.read_retry_interval
  # @note read_retry_interval should be retrieved from the Client instance,
  #   not from a Cluster instance, because clusters may be shared between
  #   clients with different values for the read retry interval.
  # @return [Float] The interval.
  # @since 2.1.1
  #
  # source://mongo//lib/mongo/cluster.rb#392
  def read_retry_interval; end

  # Reconnect all servers.
  #
  # @deprecated Use Client#reconnect to reconnect to the cluster instead of
  #   calling this method. This method does not send SDAM events.
  # @example Reconnect the cluster's servers.
  #   cluster.reconnect!
  # @return [true] Always true.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/cluster.rb#550
  def reconnect!; end

  # source://mongo//lib/mongo/cluster.rb#350
  def register_cursor(*args); end

  # Remove the server from the cluster for the provided address, if it
  # exists.
  #
  # @example Remove the server from the cluster.
  #   server.remove('127.0.0.1:27017')
  # @note The return value of this method is not part of the driver's
  #   public API.
  # @param host [String] The host/port or socket address.
  # @param disconnect [true | false] Whether to disconnect the servers
  #   being removed. For internal driver use only.
  # @return [Array<Server> | true | false] If disconnect is any value other
  #   than false, including nil, returns whether any servers were removed.
  #   If disconnect is false, returns an array of servers that were removed
  #   (and should be disconnected by the caller).
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#885
  def remove(host, disconnect: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def replica_set?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def replica_set_name(*args, **_arg1, &block); end

  # Runs SDAM flow on the cluster.
  #
  # This method can be invoked to process a new server description returned
  # by the server on a monitoring or non-monitoring connection, and also
  # by the driver when it marks a server unknown as a result of a (network)
  # error.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @param previous_desc [Server::Description] Previous server description.
  # @param updated_desc [Server::Description] The changed description.
  # @param options [Hash] Options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#636
  def run_sdam_flow(previous_desc, updated_desc, options = T.unsafe(nil)); end

  # Force a scan of all known servers in the cluster.
  #
  # If the sync parameter is true which is the default, the scan is
  # performed synchronously in the thread which called this method.
  # Each server in the cluster is checked sequentially. If there are
  # many servers in the cluster or they are slow to respond, this
  # can be a long running operation.
  #
  # If the sync parameter is false, this method instructs all server
  # monitor threads to perform an immediate scan and returns without
  # waiting for scan results.
  #
  # @example Force a full cluster scan.
  #   cluster.scan!
  # @note In both synchronous and asynchronous scans, each monitor
  #   thread maintains a minimum interval between scans, meaning
  #   calling this method may not initiate a scan on a particular server
  #   the very next instant.
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#595
  def scan!(sync = T.unsafe(nil)); end

  # source://mongo//lib/mongo/cluster.rb#350
  def schedule_kill_cursor(*args); end

  # @api private
  # @return [Array<String>] The addresses of seed servers. Contains
  #   addresses that were given to Cluster when it was instantiated, not
  #   current addresses that the cluster is using as a result of SDAM.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster.rb#331
  def seeds; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#488
  def server_selection_semaphore; end

  # Get a list of server candidates from the cluster that can have operations
  # executed on them.
  #
  # @example Get the server candidates for an operation.
  #   cluster.servers
  # @return [Array<Server>] The candidate servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#439
  def servers; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#937
  def servers_list; end

  # @private
  # @since 2.5.1
  #
  # source://mongo//lib/mongo/cluster.rb#336
  def session_pool; end

  # Sets the list of servers to the addresses in the provided list of address
  # strings.
  #
  # This method is called by the SRV monitor after receiving new DNS records
  # for the monitored hostname.
  #
  # Removes servers in the cluster whose addresses are not in the passed
  # list of server addresses, and adds servers for any addresses in the
  # argument which are not already in the cluster.
  #
  # @api private
  # @param server_address_strs [Array<String>] List of server addresses
  #   to sync the cluster servers to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#707
  def set_server_list(server_address_strs); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def sharded?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def single?(*args, **_arg1, &block); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#358
  def srv_monitor; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster.rb#481
  def summary; end

  # The logical session timeout value in minutes.
  #
  # @example Get the logical session timeout in minutes.
  #   cluster.logical_session_timeout
  # @return [Integer, nil] The logical session timeout.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster.rb#311
  def topology; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def unknown?(*args, **_arg1, &block); end

  # source://mongo//lib/mongo/cluster.rb#350
  def unregister_cursor(*args); end

  # Update the max cluster time seen in a response.
  #
  # @example Update the cluster time.
  #   cluster.update_cluster_time(result)
  # @param result [Operation::Result] The operation result containing the cluster time.
  # @return [Object] The cluster time.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster.rb#813
  def update_cluster_time(result); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#910
  def update_topology(new_topology); end

  # Raises Error::SessionsNotAvailable if the deployment that the driver
  # is connected to does not support sessions.
  #
  # Session support may change over time, for example due to servers in the
  # deployment being upgraded or downgraded.  If the client isn't connected to
  # any servers and doesn't find any servers
  # for the duration of server selection timeout, this method will raise
  # NoServerAvailable. This method is called from the operation execution flow,
  # and if it raises NoServerAvailable the entire operation will fail
  # with that exception, since the operation execution has waited for
  # the server selection timeout for any server to become available
  # (which would be a superset of the servers suitable for the operation being
  # attempted) and none materialized.
  #
  # @api private
  # @raise [Error::SessionsNotAvailable] If the deployment that the driver
  #   is connected to does not support sessions.
  # @raise [Error::NoServerAvailable] If the client isn't connected to
  #   any servers and doesn't find any servers for the duration of
  #   server selection timeout.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#976
  def validate_session_support!; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#1051
  def fabricate_lb_sdam_events_and_set_server_type; end

  # @raise [Error::SessionsNotSupported]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#1035
  def raise_sessions_not_supported; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#1078
  def recreate_topology(new_topology_template, previous_topology); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster.rb#1007
  def start_stop_srv_monitor; end

  class << self
    # Create a cluster for the provided client, for use when we don't want the
    # client's original cluster instance to be the same.
    #
    # @api private
    # @example Create a cluster for the client.
    #   Cluster.create(client)
    # @param client [Client] The client to create on.
    # @param monitoring. [Monitoring | nil] The monitoring instance to use
    #   with the new cluster. If nil, a new instance of Monitoring will be
    #   created.
    # @return [Cluster] The cluster.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/cluster.rb#295
    def create(client, monitoring: T.unsafe(nil)); end
  end
end

# The cluster time key in responses from mongos servers.
#
# @deprecated
# @since 2.5.0
#
# source://mongo//lib/mongo/cluster.rb#61
Mongo::Cluster::CLUSTER_TIME = T.let(T.unsafe(nil), String)

# A manager that sends kill cursors operations at regular intervals to close
# cursors that have been garbage collected without being exhausted.
#
# @api private
# @since 2.3.0
#
# source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#28
class Mongo::Cluster::CursorReaper
  include ::Mongo::Retryable

  # Create a cursor reaper.
  #
  # @api private
  # @param cluster [Cluster] The cluster.
  # @return [CursorReaper] a new instance of CursorReaper
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#42
  def initialize(cluster); end

  # @api private
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#50
  def cluster; end

  # Execute all pending kill cursors operations.
  #
  # @api private
  # @example Execute pending kill cursors operations.
  #   cursor_reaper.kill_cursors
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#133
  def execute; end

  # Execute all pending kill cursors operations.
  #
  # @api private
  # @example Execute pending kill cursors operations.
  #   cursor_reaper.kill_cursors
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#133
  def flush; end

  # Execute all pending kill cursors operations.
  #
  # @api private
  # @example Execute pending kill cursors operations.
  #   cursor_reaper.kill_cursors
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#133
  def kill_cursors; end

  # Read and decode scheduled kill cursors operations.
  #
  # This method mutates instance variables without locking, so is is not
  # thread safe. Generally, it should not be called itself, this is a helper
  # for `kill_cursor` method.
  #
  # @api private
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#114
  def read_scheduled_kill_specs; end

  # Register a cursor id as active.
  #
  # @api private
  # @example Register a cursor as active.
  #   cursor_reaper.register_cursor(id)
  # @param id [Integer] The id of the cursor to register as active.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#71
  def register_cursor(id); end

  # Schedule a kill cursors operation to be eventually executed.
  #
  # @api private
  # @param kill_spec [Cursor::KillSpec] The kill specification.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#57
  def schedule_kill_cursor(kill_spec); end

  # Unregister a cursor id, indicating that it's no longer active.
  #
  # @api private
  # @example Unregister a cursor.
  #   cursor_reaper.unregister_cursor(id)
  # @param id [Integer] The id of the cursor to unregister.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#94
  def unregister_cursor(id); end
end

# The default time interval for the cursor reaper to send pending
# kill cursors operations.
#
# @api private
# @since 2.3.0
#
# source://mongo//lib/mongo/cluster/reapers/cursor_reaper.rb#35
Mongo::Cluster::CursorReaper::FREQUENCY = T.let(T.unsafe(nil), Integer)

# How often an idle primary writes a no-op to the oplog.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/cluster.rb#55
Mongo::Cluster::IDLE_WRITE_PERIOD_SECONDS = T.let(T.unsafe(nil), Integer)

# The default number of legacy read retries.
#
# @since 2.1.1
#
# source://mongo//lib/mongo/cluster.rb#39
Mongo::Cluster::MAX_READ_RETRIES = T.let(T.unsafe(nil), Integer)

# The default number of legacy write retries.
#
# @since 2.4.2
#
# source://mongo//lib/mongo/cluster.rb#44
Mongo::Cluster::MAX_WRITE_RETRIES = T.let(T.unsafe(nil), Integer)

# A manager that calls #execute on its executors at a regular interval.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/cluster/periodic_executor.rb#27
class Mongo::Cluster::PeriodicExecutor
  include ::Mongo::Loggable
  include ::Mongo::BackgroundThread

  # Create a periodic executor.
  #
  # @api private
  # @example Create a PeriodicExecutor.
  #   Mongo::Cluster::PeriodicExecutor.new([reaper, reaper2])
  # @option options
  # @param executors [Array<Object>] The executors. Each must respond
  #   to #execute and #flush.
  # @param options [Hash] The options.
  # @return [PeriodicExecutor] a new instance of PeriodicExecutor
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#47
  def initialize(executors, options = T.unsafe(nil)); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#58
  def do_work; end

  # Trigger an execute call on each reaper.
  #
  # @api private
  # @example Trigger all reapers.
  #   periodic_executor.execute
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#86
  def execute; end

  # Execute all pending operations.
  #
  # @api private
  # @example Execute all pending operations.
  #   periodic_executor.flush
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#99
  def flush; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#54
  def options; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#63
  def pre_stop; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/background_thread.rb#46
  def restart!; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/periodic_executor.rb#67
  def stop(final = T.unsafe(nil)); end
end

# The default time interval for the periodic executor to execute.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/cluster/periodic_executor.rb#33
Mongo::Cluster::PeriodicExecutor::FREQUENCY = T.let(T.unsafe(nil), Integer)

# The default read retry interval, in seconds, when using legacy read
# retries.
#
# @since 2.1.1
#
# source://mongo//lib/mongo/cluster.rb#50
Mongo::Cluster::READ_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# Handles SDAM flow for a server description changed event.
#
# Updates server descriptions, topology descriptions and publishes
# SDAM events.
#
# SdamFlow is meant to be instantiated once for every server description
# changed event that needs to be processed.
#
# @api private
#
# source://mongo//lib/mongo/cluster/sdam_flow.rb#28
class Mongo::Cluster::SdamFlow
  extend ::Forwardable

  # @api private
  # @return [SdamFlow] a new instance of SdamFlow
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#31
  def initialize(cluster, previous_desc, updated_desc, awaited: T.unsafe(nil)); end

  # Adds all servers referenced in the given description (which is
  # supposed to have come from a good primary) which are not
  # already in the cluster, to the cluster.
  #
  # separately.
  #
  # @api private
  # @note Servers are added unmonitored. Monitoring must be started later
  # @return [Array<Server>] Servers actually added to the cluster.
  #   This is the set of servers on which monitoring should be started.
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#374
  def add_servers_from_desc(updated_desc); end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#58
  def awaited?; end

  # Returns whether the server whose description this flow processed
  # was not previously unknown, and is now. Used to decide, in particular,
  # whether to clear the server's connection pool.
  #
  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#618
  def became_unknown?; end

  # Checks if the cluster has a primary, and if not, transitions the topology
  # to ReplicaSetNoPrimary. Topology must be ReplicaSetWithPrimary when
  # invoking this method.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#570
  def check_if_has_primary; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#40
  def cluster; end

  # Publishes server description changed events, updates topology on
  # the cluster and publishes topology changed event, as needed
  # based on operations performed during SDAM flow processing.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#494
  def commit_changes; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#546
  def disconnect_servers; end

  # Removes specified server from topology and warns if the topology ends
  # up with an empty server list as a result
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#421
  def do_remove(address_str); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def log_warn(*args, **_arg1, &block); end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#56
  def original_desc; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#54
  def previous_desc; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#447
  def publish_description_change_event; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def publish_sdam_event(*args, **_arg1, &block); end

  # Removes the server whose description we are processing from the
  # topology.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#414
  def remove; end

  # Removes servers from the topology which are not present in the
  # given server description (which is supposed to have come from a
  # good primary).
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#392
  def remove_servers_not_in_desc(updated_desc); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def replica_set_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def seeds(*args, **_arg1, &block); end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#93
  def server_description_changed; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def servers_list(*args, **_arg1, &block); end

  # Whether updated_desc is for a stale primary.
  #
  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#586
  def stale_primary?; end

  # If the server being processed is identified as data bearing, creates the
  # server's connection pool so it can start populating
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#557
  def start_pool_if_data_bearing; end

  # The topology stored in this attribute can change multiple times throughout
  # a single sdam flow (e.g. unknown -> RS no primary -> RS with primary).
  # Events for topology change get sent at the end of flow processing,
  # such that the above example only publishes an unknown -> RS with primary
  # event to the application.
  #
  # @api private
  # @return Mongo::Cluster::Topology The current topology.
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#52
  def topology; end

  # Returns whether topology meaningfully changed as a result of running
  # SDAM flow.
  #
  # The spec defines topology equality through equality of topology types
  # and server descriptions in each topology; this definition is not usable
  # by us because our topology objects do not hold server descriptions and
  # are instead "live". Thus we have to store the full list of server
  # descriptions at the beginning of SDAM flow and compare them to the
  # current ones.
  #
  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#631
  def topology_effectively_changed?; end

  # Updates topology which must be a ReplicaSetWithPrimary with information
  # from the primary's server description.
  #
  # This method does not change topology type to ReplicaSetWithPrimary -
  # this needs to have been done prior to calling this method.
  #
  # If the primary whose description is being processed is determined to be
  # stale, this method will change the server description and topology
  # type to unknown.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#217
  def update_rs_from_primary; end

  # Updates a ReplicaSetWithPrimary topology from a non-primary member.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#291
  def update_rs_with_primary_from_member; end

  # Updates a ReplicaSetNoPrimary topology from a non-primary member.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#328
  def update_rs_without_primary; end

  # Updates descriptions on all servers whose address matches
  # updated_desc's address.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#66
  def update_server_descriptions; end

  # Transitions from unknown to single topology type, when a standalone
  # server is discovered.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#196
  def update_unknown_with_standalone; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#55
  def updated_desc; end

  # @api private
  #
  # source://mongo//lib/mongo/cluster/sdam_flow.rb#643
  def verify_invariants; end
end

# A manager that calls a method on each of a cluster's pools to close idle
#  sockets.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/cluster/reapers/socket_reaper.rb#28
class Mongo::Cluster::SocketReaper
  # Initialize the SocketReaper object.
  #
  # @api private
  # @example Initialize the socket reaper.
  #   SocketReaper.new(cluster)
  # @param cluster [Mongo::Cluster] The cluster whose pools' idle sockets
  #   need to be reaped at regular intervals.
  # @return [SocketReaper] a new instance of SocketReaper
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/reapers/socket_reaper.rb#39
  def initialize(cluster); end

  # Execute the operation to close the pool's idle sockets.
  #
  # @api private
  # @example Close the idle sockets in each of the cluster's pools.
  #   socket_reaper.execute
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/reapers/socket_reaper.rb#49
  def execute; end

  # When the socket reaper is garbage-collected, there's no need to close
  #   idle sockets; sockets will be closed anyway when the pools are
  #   garbage collected.
  #
  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster/reapers/socket_reaper.rb#61
  def flush; end
end

# Defines behavior for getting servers.
#
# Topologies are associated with their clusters - for example, a
# ReplicaSet topology contains the replica set name. A topology
# object therefore cannot be used with multiple cluster objects.
#
# At the same time, topology objects do not know anything about
# specific *servers* in a cluster, despite what their constructor
# may suggest. Which means, in particular, that topology change events
# require the application to maintain cluster references on its own
# if it wants to track server changes within a replica set.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology.rb#33
module Mongo::Cluster::Topology
  extend ::Mongo::Cluster::Topology

  # Get the initial cluster topology for the provided options.
  #
  # @api private
  # @example Get the initial cluster topology.
  #   Topology.initial(topology: :replica_set)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param cluster [Cluster] The cluster.
  # @param monitoring [Monitoring] The monitoring.
  # @param options [Hash] The cluster options.
  # @return [ReplicaSet, Sharded, Single, LoadBalanced] The topology.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology.rb#90
  def initial(cluster, monitoring, options); end
end

# Defines behavior common to all topologies.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/cluster/topology/base.rb#25
class Mongo::Cluster::Topology::Base
  include ::Mongo::Loggable
  include ::Mongo::Monitoring::Publishable
  extend ::Forwardable

  # Initialize the topology with the options.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options.
  # @param monitoring [Monitoring] The monitoring.
  # @param cluster [Cluster] The cluster.
  # @return [Base] a new instance of Base
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#56
  def initialize(options, monitoring, cluster); end

  # @return [Array<String>] addresses Server addresses.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#113
  def addresses; end

  # @return [Exception] compatibility_error If topology is incompatible
  #   with the driver, an exception with information regarding the incompatibility.
  #   If topology is compatible with the driver, nil.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#151
  def compatibility_error; end

  # @return [true|false] compatible Whether topology is compatible
  #   with the driver.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#142
  def compatible?; end

  # @api private
  # @return [true | false] have_data_bearing_servers Whether the
  #   topology has any data bearing servers, for the purposes of
  #   logical session timeout calculation.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#168
  def data_bearing_servers?; end

  # The logical session timeout value in minutes.
  #
  # @note The value is in minutes, unlike most other times in the
  #   driver which are returned in seconds.
  # @return [Integer, nil] The logical session timeout.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#161
  def logical_session_timeout; end

  # The largest electionId ever reported by a primary.
  # May be nil.
  #
  # @return [BSON::ObjectId] The election id.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#178
  def max_election_id; end

  # The largest setVersion ever reported by a primary.
  # May be nil.
  #
  # @return [Integer] The set version.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#188
  def max_set_version; end

  # @return [monitoring] monitoring the monitoring.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#118
  def monitoring; end

  # @api private
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#193
  def new_max_election_id(description); end

  # @api private
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#204
  def new_max_set_version(description); end

  # @return [Hash] options The options.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#105
  def options; end

  # Get the replica set name configured for this topology.
  #
  # @example Get the replica set name.
  #   topology.replica_set_name
  # @return [String] The name of the configured replica set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#128
  def replica_set_name; end

  # @return [Hash] server_descriptions The map of address strings to
  #   server descriptions, one for each server in the cluster.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#136
  def server_descriptions; end

  private

  # @api private
  # @return [Cluster] The cluster.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#109
  def cluster; end

  # Validates and/or transforms options as necessary for the topology.
  #
  # @return [Hash] New options
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/base.rb#219
  def validate_options(options, cluster); end
end

# Defines behavior for when a cluster is in load-balanced topology.
#
# source://mongo//lib/mongo/cluster/topology/load_balanced.rb#23
class Mongo::Cluster::Topology::LoadBalanced < ::Mongo::Cluster::Topology::Base
  # Get the display name.
  #
  # @return [String] The display name.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#31
  def display_name; end

  # Determine if the topology would select a readable server for the
  # provided candidates and read preference.
  #
  # @param cluster [Cluster] The cluster.
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [true] A standalone always has a readable server.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#51
  def has_readable_server?(cluster, server_selector = T.unsafe(nil)); end

  # Determine if the topology would select a writable server for the
  # provided candidates.
  #
  # @param cluster [Cluster] The cluster.
  # @return [true] A standalone always has a writable server.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#59
  def has_writable_server?(cluster); end

  # Returns whether this topology is one of the replica set ones.
  #
  # @return [false] Always false.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#64
  def replica_set?; end

  # Select appropriate servers for this topology.
  #
  # @param servers [Array<Server>] The known servers.
  # @return [Array<Server>] All of the known servers.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#71
  def servers(servers, name = T.unsafe(nil)); end

  # Returns whether this topology is sharded.
  #
  # @return [false] Always false.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#78
  def sharded?; end

  # Returns whether this topology is Single.
  #
  # @return [true] Always false.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#83
  def single?; end

  # @api experimental
  # @note This method is experimental and subject to change.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#38
  def summary; end

  # Returns whether this topology is Unknown.
  #
  # @return [false] Always false.
  #
  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#88
  def unknown?; end

  private

  # source://mongo//lib/mongo/cluster/topology/load_balanced.rb#92
  def validate_options(options, cluster); end
end

# The display name for the topology.
#
# source://mongo//lib/mongo/cluster/topology/load_balanced.rb#26
Mongo::Cluster::Topology::LoadBalanced::NAME = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/cluster/topology/no_replica_set_options.rb#21
module Mongo::Cluster::Topology::NoReplicaSetOptions
  private

  # source://mongo//lib/mongo/cluster/topology/no_replica_set_options.rb#24
  def validate_options(options, cluster); end
end

# The various topologies for server selection.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology.rb#55
Mongo::Cluster::Topology::OPTIONS = T.let(T.unsafe(nil), Hash)

# Defines behavior when a cluster is in replica set topology,
# and there is no primary or the primary has not yet been discovered
# by the driver.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#27
class Mongo::Cluster::Topology::ReplicaSetNoPrimary < ::Mongo::Cluster::Topology::Base
  # Get the display name.
  #
  # @example Get the display name.
  #   ReplicaSet.display_name
  # @return [String] The display name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#43
  def display_name; end

  # Determine if the topology would select a readable server for the
  # provided candidates and read preference.
  #
  # @deprecated
  # @example Is a readable server present?
  #   topology.has_readable_server?(cluster, server_selector)
  # @param cluster [Cluster] The cluster.
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [true, false] If a readable server is present.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#80
  def has_readable_server?(cluster, server_selector = T.unsafe(nil)); end

  # Determine if the topology would select a writable server for the
  # provided candidates.
  #
  # @example Is a writable server present?
  #   topology.has_writable_server?(servers)
  # @param cluster [Cluster] The cluster.
  # @return [true, false] If a writable server is present.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#95
  def has_writable_server?(cluster); end

  # A replica set topology is a replica set.
  #
  # @example Is the topology a replica set?
  #   topology.replica_set?
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#107
  def replica_set?; end

  # Select appropriate servers for this topology.
  #
  # @example Select the servers.
  #   ReplicaSet.servers(servers)
  # @param servers [Array<Server>] The known servers.
  # @return [Array<Server>] The servers in the replica set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#119
  def servers(servers); end

  # A replica set topology is not sharded.
  #
  # @example Is the topology sharded?
  #   ReplicaSet.sharded?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#134
  def sharded?; end

  # A replica set topology is not single.
  #
  # @example Is the topology single?
  #   ReplicaSet.single?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#144
  def single?; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#51
  def summary; end

  # A replica set topology is not unknown.
  #
  # @example Is the topology unknown?
  #   ReplicaSet.unknown?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#154
  def unknown?; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#158
  def validate_options(options, cluster); end
end

# The display name for the topology.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/replica_set_no_primary.rb#33
Mongo::Cluster::Topology::ReplicaSetNoPrimary::NAME = T.let(T.unsafe(nil), String)

# Defines behavior when a cluster is in replica set topology,
# and is a no primary which has been discovered by the driver.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/cluster/topology/replica_set_with_primary.rb#26
class Mongo::Cluster::Topology::ReplicaSetWithPrimary < ::Mongo::Cluster::Topology::ReplicaSetNoPrimary; end

# Defines behavior for when a cluster is in sharded topology.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/sharded.rb#25
class Mongo::Cluster::Topology::Sharded < ::Mongo::Cluster::Topology::Base
  include ::Mongo::Cluster::Topology::NoReplicaSetOptions

  # Get the display name.
  #
  # @example Get the display name.
  #   Sharded.display_name
  # @return [String] The display name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#41
  def display_name; end

  # Determine if the topology would select a readable server for the
  # provided candidates and read preference.
  #
  # @example Is a readable server present?
  #   topology.has_readable_server?(cluster, server_selector)
  # @param cluster [Cluster] The cluster.
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [true] A Sharded cluster always has a readable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#67
  def has_readable_server?(cluster, server_selector = T.unsafe(nil)); end

  # Determine if the topology would select a writable server for the
  # provided candidates.
  #
  # @example Is a writable server present?
  #   topology.has_writable_server?(servers)
  # @param cluster [Cluster] The cluster.
  # @return [true] A Sharded cluster always has a writable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#80
  def has_writable_server?(cluster); end

  # A sharded topology is not a replica set.
  #
  # @example Is the topology a replica set?
  #   Sharded.replica_set?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#90
  def replica_set?; end

  # Select appropriate servers for this topology.
  #
  # @example Select the servers.
  #   Sharded.servers(servers)
  # @param servers [Array<Server>] The known servers.
  # @return [Array<Server>] The mongos servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#102
  def servers(servers); end

  # A sharded topology is sharded.
  #
  # @example Is the topology sharded?
  #   Sharded.sharded?
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#114
  def sharded?; end

  # A sharded topology is not single.
  #
  # @example Is the topology single?
  #   Sharded.single?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#124
  def single?; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#49
  def summary; end

  # A sharded topology is not unknown.
  #
  # @example Is the topology unknown?
  #   Sharded.unknown?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/sharded.rb#134
  def unknown?; end
end

# The display name for the topology.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/sharded.rb#31
Mongo::Cluster::Topology::Sharded::NAME = T.let(T.unsafe(nil), String)

# Defines behavior for when a cluster is in single topology.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/single.rb#25
class Mongo::Cluster::Topology::Single < ::Mongo::Cluster::Topology::Base
  # Get the display name.
  #
  # @example Get the display name.
  #   Single.display_name
  # @return [String] The display name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#40
  def display_name; end

  # Determine if the topology would select a readable server for the
  # provided candidates and read preference.
  #
  # @example Is a readable server present?
  #   topology.has_readable_server?(cluster, server_selector)
  # @param cluster [Cluster] The cluster.
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [true] A standalone always has a readable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#66
  def has_readable_server?(cluster, server_selector = T.unsafe(nil)); end

  # Determine if the topology would select a writable server for the
  # provided candidates.
  #
  # @example Is a writable server present?
  #   topology.has_writable_server?(servers)
  # @param cluster [Cluster] The cluster.
  # @return [true] A standalone always has a writable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#79
  def has_writable_server?(cluster); end

  # A single topology is not a replica set.
  #
  # @example Is the topology a replica set?
  #   Single.replica_set?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#89
  def replica_set?; end

  # Select appropriate servers for this topology.
  #
  # @example Select the servers.
  #   Single.servers(servers, 'test')
  # @param servers [Array<Server>] The known servers.
  # @return [Array<Server>] The single servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#101
  def servers(servers, name = T.unsafe(nil)); end

  # A single topology is not sharded.
  #
  # @example Is the topology sharded?
  #   Single.sharded?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#113
  def sharded?; end

  # A single topology is single.
  #
  # @example Is the topology single?
  #   Single.single?
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#123
  def single?; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#48
  def summary; end

  # An single topology is not unknown.
  #
  # @example Is the topology unknown?
  #   Single.unknown?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#133
  def unknown?; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/single.rb#137
  def validate_options(options, cluster); end
end

# The display name for the topology.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/single.rb#30
Mongo::Cluster::Topology::Single::NAME = T.let(T.unsafe(nil), String)

# Defines behavior for when a cluster is in an unknown state.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/unknown.rb#25
class Mongo::Cluster::Topology::Unknown < ::Mongo::Cluster::Topology::Base
  include ::Mongo::Cluster::Topology::NoReplicaSetOptions

  # Get the display name.
  #
  # @example Get the display name.
  #   Unknown.display_name
  # @return [String] The display name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#41
  def display_name; end

  # Determine if the topology would select a readable server for the
  # provided candidates and read preference.
  #
  # @example Is a readable server present?
  #   topology.has_readable_server?(cluster, server_selector)
  # @param cluster [Cluster] The cluster.
  # @param server_selector [ServerSelector] The server
  #   selector.
  # @return [false] An Unknown topology will never have a readable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#67
  def has_readable_server?(cluster, server_selector = T.unsafe(nil)); end

  # Determine if the topology would select a writable server for the
  # provided candidates.
  #
  # @example Is a writable server present?
  #   topology.has_writable_server?(servers)
  # @param cluster [Cluster] The cluster.
  # @return [false] An Unknown topology will never have a writable server.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#80
  def has_writable_server?(cluster); end

  # An unknown topology is not a replica set.
  #
  # @example Is the topology a replica set?
  #   Unknown.replica_set?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#90
  def replica_set?; end

  # Select appropriate servers for this topology.
  #
  # @example Select the servers.
  #   Unknown.servers(servers)
  # @param servers [Array<Server>] The known servers.
  # @raise [Unknown] Cannot select servers when the topology is
  #   unknown.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#103
  def servers(servers); end

  # An unknown topology is not sharded.
  #
  # @example Is the topology sharded?
  #   Unknown.sharded?
  # @return [false] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#115
  def sharded?; end

  # An unknown topology is not single.
  #
  # @example Is the topology single?
  #   Unknown.single?
  # @return [true] Always false.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#125
  def single?; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#49
  def summary; end

  # An unknown topology is unknown.
  #
  # @example Is the topology unknown?
  #   Unknown.unknown?
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cluster/topology/unknown.rb#135
  def unknown?; end
end

# The display name for the topology.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/cluster/topology/unknown.rb#31
Mongo::Cluster::Topology::Unknown::NAME = T.let(T.unsafe(nil), String)

# ClusterTime encapsulates cluster time storage and operations.
#
# The primary operation performed on the cluster time is advancing it:
# given another cluster time, pick the newer of the two.
#
# This class provides comparison methods that are used to figure out which
# cluster time is newer, and provides diagnostics in lint mode when
# the actual time is missing from a cluster time document.
#
# @api private
#
# source://mongo//lib/mongo/cluster_time.rb#29
class Mongo::ClusterTime < ::BSON::Document
  # @api private
  # @return [ClusterTime] a new instance of ClusterTime
  #
  # source://mongo//lib/mongo/cluster_time.rb#30
  def initialize(elements = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#78
  def <(other); end

  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#75
  def <=(other); end

  # Compares two ClusterTime instances by comparing their timestamps.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#56
  def <=>(other); end

  # Compares two ClusterTime instances by comparing their timestamps.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#83
  def ==(other); end

  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#72
  def >(other); end

  # Older Rubies do not implement other logical operators through <=>.
  # TODO revise whether these methods are needed when
  # https://jira.mongodb.org/browse/RUBY-1622 is implemented.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#69
  def >=(other); end

  # Advances the cluster time in the receiver to the cluster time in +other+.
  #
  # +other+ can be nil or be behind the cluster time in the receiver; in
  # these cases the receiver is returned unmodified. If receiver is advanced,
  # a new ClusterTime object is returned.
  #
  # Return value is nil or a ClusterTime instance.
  #
  # @api private
  #
  # source://mongo//lib/mongo/cluster_time.rb#45
  def advance(other); end

  class << self
    # Converts a BSON::Document to a ClusterTime.
    #
    # +doc+ can be nil, in which case nil is returned.
    #
    # @api private
    #
    # source://mongo//lib/mongo/cluster_time.rb#97
    def [](doc); end
  end
end

# This module provides common cluster time tracking behavior.
#
# @api private
# @note Although attributes and methods defined in this module are part of
#   the public API for the classes including this module, the fact that
#   the methods are defined on this module and not directly on the
#   including classes is not part of the public API.
#
# source://mongo//lib/mongo/cluster_time.rb#112
module Mongo::ClusterTime::Consumer
  # Advance the tracked cluster time document for the object including
  # this module.
  #
  # @api private
  # @param new_cluster_time [BSON::Document] The new cluster time document.
  # @return [ClusterTime] The resulting cluster time.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster_time.rb#133
  def advance_cluster_time(new_cluster_time); end

  # The cluster time tracked by the object including this module.
  #
  # Changed in version 2.9.0: This attribute became an instance of
  # ClusterTime, which is a subclass of BSON::Document.
  # Previously it was an instance of BSON::Document.
  #
  # @api private
  # @return [nil | ClusterTime] The cluster time.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/cluster_time.rb#123
  def cluster_time; end
end

# Represents a collection in the database and operations that can directly be
# applied to one.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/builder/aggregation.rb#19
class Mongo::Collection
  include ::Mongo::Retryable
  include ::Mongo::Collection::QueryableEncryption
  include ::Mongo::Collection::Helpers
  extend ::Forwardable

  # Instantiate a new collection.
  #
  # @example Instantiate a new collection.
  #   Mongo::Collection.new(database, 'test')
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param database [Mongo::Database] The collection's database.
  # @param name [String, Symbol] The collection name.
  # @param options [Hash] The collection options.
  # @param opts [Hash] a customizable set of options
  # @raise [Error::InvalidCollectionName]
  # @return [Collection] a new instance of Collection
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#158
  def initialize(database, name, options = T.unsafe(nil)); end

  # Check if a collection is equal to another object. Will check the name and
  # the database for equality.
  #
  # @example Check collection equality.
  #   collection == other
  # @param other [Object] The object to check.
  # @return [true | false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#89
  def ==(other); end

  # Perform an aggregation on the collection.
  #
  # @example Perform an aggregation.
  #   collection.aggregate([ { "$group" => { "_id" => "$city", "tpop" => { "$sum" => "$pop" }}} ])
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] The aggregation pipeline.
  # @param options [Hash] The aggregation options.
  # @return [View::Aggregation] The aggregation object.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#538
  def aggregate(pipeline, options = T.unsafe(nil)); end

  # Execute a batch of bulk write operations.
  #
  # @example Execute a bulk write.
  #   collection.bulk_write(operations, options)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param requests [Enumerable<Hash>] The bulk write requests.
  # @param options [Hash] The options.
  # @return [BulkWrite::Result] The result of the operation.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#847
  def bulk_write(requests, options = T.unsafe(nil)); end

  # Is the collection capped?
  #
  # @example Is the collection capped?
  #   collection.capped?
  # @return [true | false] If the collection is capped.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#316
  def capped?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # Gets an estimated number of matching documents in the collection.
  #
  # @deprecated Use #count_documents or estimated_document_count instead. However, note that the
  #   following operators will need to be substituted when switching to #count_documents:
  #   * $where should be replaced with $expr (only works on 3.6+)
  #   * $near should be replaced with $geoWithin with $center
  #   * $nearSphere should be replaced with $geoWithin with $centerSphere
  # @example Get the count.
  #   collection.count(name: 1)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] A filter for matching documents.
  # @param options [Hash] The count options.
  # @return [Integer] The document count.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#642
  def count(filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets the number of documents matching the query. Unlike the deprecated
  # #count method, this will return the exact number of documents matching
  # the filter (or exact number of documents in the collection, if no filter
  # is provided) rather than an estimate.
  #
  # Use #estimated_document_count to retrieve an estimate of the number
  # of documents in the collection using the collection metadata.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] A filter for matching documents.
  # @param options [Hash] Options for the operation.
  # @return [Integer] The document count.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/collection.rb#672
  def count_documents(filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Force the collection to be created in the database.
  #
  # @example Force the collection to be created.
  #   collection.create
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] The options for the create operation.
  # @return [Result] The result of the command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#375
  def create(opts = T.unsafe(nil)); end

  # @return [Mongo::Database] The database the collection resides in.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#46
  def database; end

  # Remove documents from the collection.
  #
  # @example Remove multiple documents from the collection.
  #   collection.delete_many
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param options [Hash] The options.
  # @return [Result] The response from the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#891
  def delete_many(filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Remove a document from the collection.
  #
  # @example Remove a single document from the collection.
  #   collection.delete_one
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param options [Hash] The options.
  # @return [Result] The response from the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#869
  def delete_one(filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Get a list of distinct values for a specific field.
  #
  # @example Get the distinct values.
  #   collection.distinct('name')
  # @option options
  # @option options
  # @option options
  # @option options
  # @param field_name [Symbol, String] The name of the field.
  # @param filter [Hash] The documents from which to retrieve the distinct values.
  # @param options [Hash] The distinct command options.
  # @return [Array<Object>] The list of distinct values.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#714
  def distinct(field_name, filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Drop the collection. Will also drop all indexes associated with the
  # collection, as well as associated queryable encryption collections.
  #
  # @example Drop the collection.
  #   collection.drop
  # @note An error returned if the collection doesn't exist is suppressed.
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] The options for the drop operation.
  # @return [Result] The result of the command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#437
  def drop(opts = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def encrypted_fields_map(*args, **_arg1, &block); end

  # Gets an estimate of the number of documents in the collection using the
  # collection metadata.
  #
  # Use #count_documents to retrieve the exact number of documents in the
  # collection, or to count documents matching a filter.
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Options for the operation.
  # @return [Integer] The document count.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/collection.rb#693
  def estimated_document_count(options = T.unsafe(nil)); end

  # Find documents in the collection.
  #
  # @example Find documents in the collection by a selector.
  #   collection.find(name: 1)
  # @example Get all documents in a collection.
  #   collection.find
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use in the find.
  # @param options [Hash] The options for the find.
  # @return [CollectionView] The collection view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#503
  def find(filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Finds a single document in the database via findAndModify and deletes
  # it, returning the original document.
  #
  # @example Find one document and delete it.
  #   collection.find_one_and_delete(name: 'test')
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param options [Hash] The options.
  # @return [BSON::Document, nil] The document, if found.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#1029
  def find_one_and_delete(filter, options = T.unsafe(nil)); end

  # Finds a single document and replaces it, returning the original doc unless
  # otherwise specified.
  #
  # @example Find a document and replace it, returning the original.
  #   collection.find_one_and_replace({ name: 'test' }, { name: 'test1' })
  # @example Find a document and replace it, returning the new document.
  #   collection.find_one_and_replace({ name: 'test' }, { name: 'test1' }, :return_document => :after)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param replacement [BSON::Document] The replacement document.
  # @param options [Hash] The options.
  # @return [BSON::Document] The document.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#1107
  def find_one_and_replace(filter, replacement, options = T.unsafe(nil)); end

  # Finds a single document via findAndModify and updates it, returning the original doc unless
  # otherwise specified.
  #
  # @example Find a document and update it, returning the original.
  #   collection.find_one_and_update({ name: 'test' }, { "$set" => { name: 'test1' }})
  # @example Find a document and update it, returning the updated document.
  #   collection.find_one_and_update({ name: 'test' }, { "$set" => { name: 'test1' }}, :return_document => :after)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param update [Hash | Array<Hash>] The update document or pipeline.
  # @param options [Hash] The options.
  # @return [BSON::Document] The document.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#1069
  def find_one_and_update(filter, update, options = T.unsafe(nil)); end

  # Get a view of all indexes for this collection. Can be iterated or has
  # more operations.
  #
  # @example Get the index view.
  #   collection.indexes
  # @option options
  # @param options [Hash] Options for getting a list of all indexes.
  # @return [View::Index] The index view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#731
  def indexes(options = T.unsafe(nil)); end

  # Insert the provided documents into the collection.
  #
  # @example Insert documents into the collection.
  #   collection.insert_many([{ name: 'test' }])
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param documents [Enumerable<Hash>] The documents to insert.
  # @param options [Hash] The insert options.
  # @return [Result] The database response wrapper.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#819
  def insert_many(documents, options = T.unsafe(nil)); end

  # Insert a single document into the collection.
  #
  # @example Insert a document into the collection.
  #   collection.insert_one({ name: 'test' })
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param document [Hash] The document to insert.
  # @param opts [Hash] The insert options.
  # @return [Result] The database response wrapper.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#766
  def insert_one(document, opts = T.unsafe(nil)); end

  # Get a pretty printed string inspection for the collection.
  #
  # @example Inspect the collection.
  #   collection.inspect
  # @return [String] The collection inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#743
  def inspect; end

  # @return [String] The name of the collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#49
  def name; end

  # Get the fully qualified namespace of the collection.
  #
  # @example Get the fully qualified namespace.
  #   collection.namespace
  # @return [String] The collection namespace.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#1119
  def namespace; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # @return [Hash] The collection options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#52
  def options; end

  # Execute a parallel scan on the collection view.
  #
  # Returns a list of up to cursor_count cursors that can be iterated concurrently.
  # As long as the collection is not modified during scanning, each document appears once
  # in one of the cursors' result sets.
  #
  # @example Execute a parallel collection scan.
  #   collection.parallel_scan(2)
  # @option options
  # @option options
  # @param cursor_count [Integer] The max number of cursors to return.
  # @param options [Hash] The parallel scan command options.
  # @return [Array<Cursor>] An array of cursors.
  # @since 2.1
  #
  # source://mongo//lib/mongo/collection.rb#914
  def parallel_scan(cursor_count, options = T.unsafe(nil)); end

  # Get the effective read concern for this collection instance.
  #
  # If a read concern was provided in collection options, that read concern
  # will be returned, otherwise the database's effective read concern will
  # be returned.
  #
  # @example Get the read concern.
  #   collection.read_concern
  # @return [Hash] The read concern.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection.rb#188
  def read_concern; end

  # Get the effective read preference for this collection.
  #
  # If a read preference was provided in collection options, that read
  # preference will be returned, otherwise the database's effective read
  # preference will be returned.
  #
  # @example Get the read preference.
  #   collection.read_preference
  # @return [Hash] The read preference.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#216
  def read_preference; end

  # Replaces a single document in the collection with the new document.
  #
  # @example Replace a single document.
  #   collection.replace_one({ name: 'test' }, { name: 'test1' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param replacement [Hash] The replacement document..
  # @param options [Hash] The options.
  # @return [Result] The response from the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#941
  def replace_one(filter, replacement, options = T.unsafe(nil)); end

  # Get the server selector for this collection.
  #
  # @example Get the server selector.
  #   collection.server_selector
  # @return [Mongo::ServerSelector] The server selector.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#200
  def server_selector; end

  # Whether the collection is a system collection.
  #
  # @api private
  # @return [Boolean] Whether the system is a system collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#1128
  def system_collection?; end

  # Update documents in the collection.
  #
  # @example Update multiple documents in the collection.
  #   collection.update_many({ name: 'test'}, '$set' => { name: 'test1' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param update [Hash | Array<Hash>] The update document or pipeline.
  # @param options [Hash] The options.
  # @return [Result] The response from the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#970
  def update_many(filter, update, options = T.unsafe(nil)); end

  # Update a single document in the collection.
  #
  # @example Update a single document in the collection.
  #   collection.update_one({ name: 'test'}, '$set' => { name: 'test1'})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param filter [Hash] The filter to use.
  # @param update [Hash | Array<Hash>] The update document or pipeline.
  # @param options [Hash] The options.
  # @return [Result] The response from the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#999
  def update_one(filter, update, options = T.unsafe(nil)); end

  # As of version 3.6 of the MongoDB server, a ``$changeStream`` pipeline
  # stage is supported in the aggregation framework. This stage allows users
  # to request that notifications are sent for all changes to a particular
  # collection.
  #
  # @example Get change notifications for a given collection.
  #   collection.watch([{ '$match' => { operationType: { '$in' => ['insert', 'replace'] } } }])
  # @note A change stream only allows 'majority' read concern.
  # @note This helper method is preferable to running a raw aggregation with
  #   a $changeStream stage, for the purpose of supporting resumability.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] Optional additional filter operators.
  # @param options [Hash] The change stream options.
  # @return [ChangeStream] The change stream object.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection.rb#609
  def watch(pipeline = T.unsafe(nil), options = T.unsafe(nil)); end

  # @example Get a collection with a changed read concern.
  #   collection.with(read_concern: { level: :majority })
  # @example Get a collection with a changed write concern.
  #   collection.with(write_concern: { w:  3 })
  # @option new_options
  # @option new_options
  # @option new_options
  # @option new_options
  # @param new_options [Hash] The new options to use.
  # @return [Mongo::Collection] A new collection instance.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection.rb#294
  def with(new_options); end

  # Get the effective write concern on this collection.
  #
  # If a write concern was provided in collection options, that write
  # concern will be returned, otherwise the database's effective write
  # concern will be returned.
  #
  # @example Get the write concern.
  #   collection.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#232
  def write_concern; end

  # Get the write concern to use for an operation on this collection,
  # given a session.
  #
  # If the session is in a transaction and the collection
  # has an unacknowledged write concern, remove the write
  # concern's :w option. Otherwise, return the unmodified
  # write concern.
  #
  # @api private
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection.rb#248
  def write_concern_with_session(session); end
end

# The capped option.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/collection.rb#38
Mongo::Collection::CAPPED = T.let(T.unsafe(nil), String)

# Options that can be updated on a new Collection instance via the #with method.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/collection.rb#63
Mongo::Collection::CHANGEABLE_OPTIONS = T.let(T.unsafe(nil), Array)

# Options map to transform create collection options.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/collection.rb#68
Mongo::Collection::CREATE_COLLECTION_OPTIONS = T.let(T.unsafe(nil), Hash)

# This module contains helper methods collection class.
#
# @api private
#
# source://mongo//lib/mongo/collection/helpers.rb#23
module Mongo::Collection::Helpers
  # Executes drop operation and and ignores NamespaceNotFound error.
  #
  # @api private
  # @param operation [Operation::Drop] Drop operation to be executed.
  # @param session [Session] Session to be use for execution.
  # @param context [Operation::Context] Context to use for execution.
  # @return [Result] The result of the execution.
  #
  # source://mongo//lib/mongo/collection/helpers.rb#31
  def do_drop(operation, session, context); end
end

# The ns field constant.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/collection.rb#43
Mongo::Collection::NS = T.let(T.unsafe(nil), String)

# This module contains methods for creating and dropping auxiliary collections
# for queryable encryption.
#
# @api private
#
# source://mongo//lib/mongo/collection/queryable_encryption.rb#23
module Mongo::Collection::QueryableEncryption
  # Creates auxiliary collections and indices for queryable encryption if necessary.
  #
  # @api private
  # @param encrypted_fields [Hash | nil] Encrypted fields hash that was
  #   provided to `create` collection helper.
  # @param client [Client] Mongo client to be used to create auxiliary collections.
  # @param session [Session] Session to be used to create auxiliary collections.
  # @return [Result] The result of provided block.
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#35
  def maybe_create_qe_collections(encrypted_fields, client, session); end

  # Drops auxiliary collections and indices for queryable encryption if necessary.
  #
  # @api private
  # @param encrypted_fields [Hash | nil] Encrypted fields hash that was
  #   provided to `create` collection helper.
  # @param client [Client] Mongo client to be used to drop auxiliary collections.
  # @param session [Session] Session to be used to drop auxiliary collections.
  # @return [Result] The result of provided block.
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#62
  def maybe_drop_emm_collections(encrypted_fields, client, session); end

  private

  # Creating encrypted collections is only supported on 7.0.0 and later
  # (wire version 21+).
  #
  # @api private
  # @param connection [Mongo::Connection] The connection to check
  #   the wire version of.
  # @raise [Mongo::Error] if the wire version is not
  #   recent enough
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#109
  def check_wire_version!(connection); end

  # Returns a new create operation for the given collection.
  #
  # @api private
  # @param coll [String] the name of the collection to create.
  # @return [Operation::Create] the new create operation.
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#148
  def create_operation_for(coll); end

  # Checks if names for auxiliary collections are set and returns them,
  # otherwise returns default names.
  #
  # @api private
  # @param encrypted_fields [Hash] Encrypted fields hash.
  # @return [Array <String>] Array of auxiliary collections names.
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#94
  def emm_collections(encrypted_fields); end

  # Tries to return the encrypted fields from the {{encrypted_fields_map}}
  # value, for the current namespace.
  #
  # @api private
  # @return [Hash | nil] the encrypted fields, if found
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#134
  def encrypted_fields_for_drop_from_map; end

  # Tries to return the encrypted fields from the argument. If the argument
  # is nil, tries to find the encrypted fields from the
  # encrypted_fields_map.
  #
  # @api private
  # @param fields [Hash | nil] the encrypted fields
  # @return [Hash] the encrypted fields
  #
  # source://mongo//lib/mongo/collection/queryable_encryption.rb#124
  def encrypted_fields_from(fields); end
end

# The minimum wire version for QE2 support
#
# @api private
#
# source://mongo//lib/mongo/collection/queryable_encryption.rb#25
Mongo::Collection::QueryableEncryption::QE2_MIN_WIRE_VERSION = T.let(T.unsafe(nil), Integer)

# Representation of a query and options producing a result set of documents.
#
# A +View+ can be modified using helpers. Helpers can be chained,
# as each one returns a +View+ if arguments are provided.
#
# The query message is sent to the server when a "terminator" is called.
# For example, when #each is called on a +View+, a Cursor object is
# created, which then sends the query to the server.
#
# A +View+ is not created directly by a user. Rather, +View+
# creates a +View+ when a CRUD operation is called and returns it to
# the user to interact with.
#
# @api semipublic
# @note The +View+ API is semipublic.
#
# source://mongo//lib/mongo/collection/view/builder/aggregation.rb#20
class Mongo::Collection::View
  include ::Enumerable
  include ::Mongo::Collection::View::Immutable
  include ::Mongo::Collection::View::Iterable
  include ::Mongo::Collection::View::Readable
  include ::Mongo::Collection::View::Explainable
  include ::Mongo::Collection::View::Writable
  extend ::Forwardable

  # Creates a new +View+.
  #
  # @api semipublic
  # @example Find all users named Emily.
  #   View.new(collection, {:name => 'Emily'})
  # @example Find all users named Emily skipping 5 and returning 10.
  #   View.new(collection, {:name => 'Emily'}, :skip => 5, :limit => 10)
  # @example Find all users named Emily using a specific read preference.
  #   View.new(collection, {:name => 'Emily'}, :read => :secondary_preferred)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param collection [Collection] The +Collection+ to query.
  # @param filter [Hash] The query filter.
  # @param options [Hash] The additional query options.
  # @return [View] a new instance of View
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#156
  def initialize(collection, filter = T.unsafe(nil), options = T.unsafe(nil)); end

  # Compare two +View+ objects.
  #
  # @api semipublic
  # @example Compare the view with another object.
  #   view == other
  # @return [true, false] Equal if collection, filter, and options of two
  #   +View+ match.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#86
  def ==(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # @api semipublic
  # @return [Collection] The +Collection+ to query.
  #
  # source://mongo//lib/mongo/collection/view.rb#56
  def collection; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Compare two +View+ objects.
  #
  # @api semipublic
  # @example Compare the view with another object.
  #   view == other
  # @return [true, false] Equal if collection, filter, and options of two
  #   +View+ match.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#86
  def eql?(other); end

  # @api semipublic
  # @return [Hash] The query filter.
  #
  # source://mongo//lib/mongo/collection/view.rb#59
  def filter; end

  # A hash value for the +View+ composed of the collection namespace,
  # hash of the options and hash of the filter.
  #
  # @api semipublic
  # @example Get the hash value.
  #   view.hash
  # @return [Integer] A hash value of the +View+ object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#103
  def hash; end

  # Get a human-readable string representation of +View+.
  #
  # @api semipublic
  # @example Get the inspection.
  #   view.inspect
  # @return [String] A string representation of a +View+ instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#182
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def nro_write_with_retry(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_with_retry(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_with_retry_cursor(*args, **_arg1, &block); end

  # @api semipublic
  # @return [Hash] The query filter.
  #
  # source://mongo//lib/mongo/collection/view.rb#59
  def selector; end

  # Get the write concern on this +View+.
  #
  # @api semipublic
  # @example Get the write concern.
  #   view.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view.rb#195
  def write_concern; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern_with_session(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_with_retry(*args, **_arg1, &block); end

  private

  # @api semipublic
  #
  # source://mongo//lib/mongo/collection/view.rb#201
  def initialize_copy(other); end

  # @api semipublic
  #
  # source://mongo//lib/mongo/collection/view.rb#207
  def new(options); end

  # @api semipublic
  #
  # source://mongo//lib/mongo/collection/view.rb#211
  def view; end

  # @api semipublic
  #
  # source://mongo//lib/mongo/collection/view.rb#213
  def with_session(opts = T.unsafe(nil), &block); end
end

# Provides behavior around an aggregation pipeline on a collection view.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/aggregation.rb#25
class Mongo::Collection::View::Aggregation
  include ::Enumerable
  include ::Mongo::Collection::View::Immutable
  include ::Mongo::Collection::View::Iterable
  include ::Mongo::Collection::View::Explainable
  include ::Mongo::Loggable
  include ::Mongo::Retryable
  extend ::Forwardable

  # Initialize the aggregation for the provided collection view, pipeline
  # and options.
  #
  # @example Create the new aggregation view.
  #   Aggregation.view.new(view, pipeline)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param view [Collection::View] The collection view.
  # @param pipeline [Array<Hash>] The pipeline of operations.
  # @param options [Hash] The aggregation options.
  # @return [Aggregation] a new instance of Aggregation
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#97
  def initialize(view, pipeline, options = T.unsafe(nil)); end

  # Set to true if disk usage is allowed during the aggregation.
  #
  # @example Set disk usage flag.
  #   aggregation.allow_disk_use(true)
  # @param value [true, false] The flag value.
  # @return [true, false, Aggregation] The aggregation if a value was
  #   set or the value if used as a getter.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#62
  def allow_disk_use(value = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collection(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Get the explain plan for the aggregation.
  #
  # @example Get the explain plan for the aggregation.
  #   aggregation.explain
  # @return [Hash] The explain plan.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#114
  def explain; end

  # @return [Array<Hash>] pipeline The aggregation pipeline.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#37
  def pipeline; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # @return [View] view The collection view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#35
  def view; end

  # Whether this aggregation will write its result to a database collection.
  #
  # @api private
  # @return [Boolean] Whether the aggregation will write its result
  #   to a collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#124
  def write?; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#134
  def aggregate_spec(session, read_preference); end

  # Skip, sort, limit, projection are specified as pipeline stages
  # rather than as options.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#197
  def cache_options; end

  # Return effective read preference for the operation.
  #
  # If the pipeline contains $merge or $out, and read preference specified
  # by user is secondary or secondary_preferred, and target server is below
  # 5.0, than this method returns primary read preference, because the
  # aggregation will be routed to primary. Otherwise return the original
  # read preference.
  #
  # See https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst#read-preferences-and-server-selection
  #
  # @param connection [Server::Connection] The connection which
  #   will be used for the operation.
  # @return [Hash | nil] read preference hash that should be sent with
  #   this command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#164
  def effective_read_preference(connection); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#146
  def initial_query_op(session, read_preference); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#142
  def new(options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#183
  def send_initial_query(server, session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/aggregation.rb#130
  def server_selector; end
end

# The reroute message.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/collection/view/aggregation.rb#49
Mongo::Collection::View::Aggregation::REROUTE = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/collection/view/builder/aggregation.rb#21
module Mongo::Collection::View::Builder; end

# Builds an aggregation command specification from the view and options.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/builder/aggregation.rb#26
class Mongo::Collection::View::Builder::Aggregation
  extend ::Forwardable

  # Initialize the builder.
  #
  # @param pipeline [Array<Hash>] The aggregation pipeline.
  # @param view [Collection::View] The collection view.
  # @param options [Hash] The map/reduce and read preference options.
  # @return [Aggregation] a new instance of Aggregation
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#64
  def initialize(pipeline, view, options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collection(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # @return [Hash] options The map/reduce specific options.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#55
  def options; end

  # @return [Array<Hash>] pipeline The pipeline.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#49
  def pipeline; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # Get the specification to pass to the aggregation operation.
  #
  # @example Get the specification.
  #   builder.specification
  # @return [Hash] The specification.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#78
  def specification; end

  # @return [Collection::View] view The collection view.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#52
  def view; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern(*args, **_arg1, &block); end

  private

  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#101
  def aggregation_command; end

  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#127
  def batch_size_doc; end

  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#121
  def cursor; end

  # @return [Boolean]
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/aggregation.rb#94
  def write?; end
end

# The mappings from ruby options to the aggregation options.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/builder/aggregation.rb#32
Mongo::Collection::View::Builder::Aggregation::MAPPINGS = T.let(T.unsafe(nil), BSON::Document)

# Builds a map/reduce specification from the view and options.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#26
class Mongo::Collection::View::Builder::MapReduce
  extend ::Forwardable

  # Initialize the builder.
  #
  # @example Initialize the builder.
  #   MapReduce.new(map, reduce, view, options)
  # @param map [String] The map function.
  # @param reduce [String] The reduce function.
  # @param view [Collection::View] The collection view.
  # @param options [Hash] The map/reduce options.
  # @return [MapReduce] a new instance of MapReduce
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#67
  def initialize(map, reduce, view, options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collection(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def filter(*args, **_arg1, &block); end

  # @return [String] map The map function.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#45
  def map; end

  # @return [Hash] options The map/reduce specific options.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#54
  def options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # @return [String] reduce The reduce function.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#48
  def reduce; end

  # Get the specification to pass to the map/reduce operation.
  #
  # @example Get the specification.
  #   builder.specification
  # @return [Hash] The specification.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#82
  def specification; end

  # @return [Collection::View] view The collection view.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#51
  def view; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern(*args, **_arg1, &block); end

  private

  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#103
  def map_reduce_command; end

  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#130
  def view_options; end

  # @return [Boolean]
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#96
  def write?(spec); end
end

# The mappings from ruby options to the map/reduce options.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/builder/map_reduce.rb#32
Mongo::Collection::View::Builder::MapReduce::MAPPINGS = T.let(T.unsafe(nil), BSON::Document)

# Provides behavior around a `$changeStream` pipeline stage in the
# aggregation framework. Specifying this stage allows users to request
# that notifications are sent for all changes to a particular collection
# or database.
#
# @note Only available in server versions 3.6 and higher.
# @note ChangeStreams do not work properly with JRuby because of the
#   issue documented here: https://github.com/jruby/jruby/issues/4212.
#   Namely, JRuby eagerly evaluates #next on an Enumerator in a background
#   green thread, therefore calling #next on the change stream will cause
#   getMores to be called in a loop in the background.
# @since 2.5.0
#
# source://mongo//lib/mongo/collection/view/change_stream/retryable.rb#21
class Mongo::Collection::View::ChangeStream < ::Mongo::Collection::View::Aggregation
  include ::Mongo::Collection::View::ChangeStream::Retryable

  # Initialize the change stream for the provided collection view, pipeline
  # and options.
  #
  # @example Create the new change stream view.
  #   ChangeStream.new(view, pipeline, options)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param view [Collection::View] The collection view.
  # @param pipeline [Array<Hash>] The pipeline of operators to filter the change notifications.
  # @param options [Hash] The change stream options.
  # @return [ChangeStream] a new instance of ChangeStream
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#127
  def initialize(view, pipeline, changes_for, options = T.unsafe(nil)); end

  # Close the change stream.
  #
  # @example Close the change stream.
  #   stream.close
  # @note This method attempts to close the cursor used by the change
  #   stream, which in turn closes the server-side change stream cursor.
  #   This method ignores any errors that occur when closing the
  #   server-side cursor.
  # @return [nil] Always nil.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#237
  def close; end

  # Is the change stream closed?
  #
  # @example Determine whether the change stream is closed.
  #   stream.closed?
  # @return [true, false] If the change stream is closed.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#256
  def closed?; end

  # Iterate through documents returned by the change stream.
  #
  # This method retries once per error on resumable errors
  # (two consecutive errors result in the second error being raised,
  # an error which is recovered from resets the error count to zero).
  #
  # @example Iterate through the stream of documents.
  #   stream.each do |document|
  #   p document
  #   end
  # @return [Enumerator] The enumerator.
  # @since 2.5.0
  # @yieldparam Each [BSON::Document] change stream document.
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#161
  def each; end

  # Get a formatted string for use in inspection.
  #
  # @example Inspect the change stream object.
  #   stream.inspect
  # @return [String] The change stream inspection.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#268
  def inspect; end

  # @return [BSON::Document] The change stream options.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#61
  def options; end

  # Returns the resume token that the stream will
  # use to automatically resume, if one exists.
  #
  # @example Get the change stream resume token.
  #   stream.resume_token
  # @return [BSON::Document | nil] The change stream resume token.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#282
  def resume_token; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#213
  def to_enum; end

  # Return one document from the change stream, if one is available.
  #
  # Retries once on a resumable error.
  #
  # Raises StopIteration if the change stream is closed.
  #
  # This method will wait up to max_await_time_ms milliseconds
  # for changes from the server, and if no changes are received
  # it will return nil.
  #
  # @raise [StopIteration]
  # @return [BSON::Document | nil] A change stream document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#183
  def try_next; end

  private

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#335
  def aggregate_spec(session, read_preference); end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#341
  def change_doc; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#301
  def create_cursor!; end

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#289
  def for_cluster?; end

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#297
  def for_collection?; end

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#293
  def for_database?; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#331
  def pipeline; end

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#412
  def resuming?; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#393
  def send_initial_query(connection, session); end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream.rb#401
  def time_to_bson_timestamp(time); end
end

# @return [Symbol] Used to indicate that the change stream should listen for changes on
#   the entire cluster rather than just the collection.
# @since 2.6.0
#
# source://mongo//lib/mongo/collection/view/change_stream.rb#56
Mongo::Collection::View::ChangeStream::CLUSTER = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] Used to indicate that the change stream should listen for changes on
#   the entire database rather than just the collection.
# @since 2.6.0
#
# source://mongo//lib/mongo/collection/view/change_stream.rb#50
Mongo::Collection::View::ChangeStream::DATABASE = T.let(T.unsafe(nil), Symbol)

# @return [String] The fullDocument option default value.
# @since 2.5.0
#
# source://mongo//lib/mongo/collection/view/change_stream.rb#44
Mongo::Collection::View::ChangeStream::FULL_DOCUMENT_DEFAULT = T.let(T.unsafe(nil), String)

# Behavior around resuming a change stream.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/collection/view/change_stream/retryable.rb#26
module Mongo::Collection::View::ChangeStream::Retryable
  private

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/change_stream/retryable.rb#30
  def read_with_one_retry; end
end

# Defines explain related behavior for collection view.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/explainable.rb#25
module Mongo::Collection::View::Explainable
  # Get the query plan for the query.
  #
  # @example Get the query plan for the query with execution statistics.
  #   view.explain(verbosity: :execution_stats)
  # @option opts
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] A single document with the query plan.
  # @see https://mongodb.com/docs/manual/reference/method/db.collection.explain/#db.collection.explain
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/explainable.rb#59
  def explain(**opts); end

  private

  # @option opts
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/explainable.rb#75
  def explain_options(**opts); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/explainable.rb#65
  def explained?; end
end

# The all plans execution verbosity constant.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/explainable.rb#40
Mongo::Collection::View::Explainable::ALL_PLANS_EXECUTION = T.let(T.unsafe(nil), String)

# The execution stats verbosity constant.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/explainable.rb#35
Mongo::Collection::View::Explainable::EXECUTION_STATS = T.let(T.unsafe(nil), String)

# The query planner verbosity constant.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/collection/view/explainable.rb#30
Mongo::Collection::View::Explainable::QUERY_PLANNER = T.let(T.unsafe(nil), String)

# Defines behavior around views being configurable and immutable.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/immutable.rb#25
module Mongo::Collection::View::Immutable
  # @return [Hash] options The additional query options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/immutable.rb#28
  def options; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/immutable.rb#32
  def configure(field, value); end
end

# Defines iteration related behavior for collection views, including
# cursor instantiation.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/iterable.rb#26
module Mongo::Collection::View::Iterable
  # Cleans up resources associated with this query.
  #
  # If there is a server cursor associated with this query, it is
  # closed by sending a KillCursors command to the server.
  #
  # @note This method propagates any errors that occur when closing the
  #   server-side cursor.
  # @raise [Error::OperationFailure] If the server cursor close fails.
  # @return [nil] Always nil.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#106
  def close_query; end

  # Returns the cursor associated with this view, if any.
  #
  # @api private
  # @return [nil | Cursor] The cursor, if any.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#33
  def cursor; end

  # Iterate through documents returned by a query with this +View+.
  #
  # @example Iterate through the result of the view.
  #   view.each do |document|
  #   p document
  #   end
  # @return [Enumerator] The enumerator.
  # @since 2.0.0
  # @yieldparam Each [Hash] matching document.
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#47
  def each; end

  # Cleans up resources associated with this query.
  #
  # If there is a server cursor associated with this query, it is
  # closed by sending a KillCursors command to the server.
  #
  # @note This method propagates any errors that occur when closing the
  #   server-side cursor.
  # @raise [Error::OperationFailure] If the server cursor close fails.
  # @return [nil] Always nil.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#106
  def kill_cursors; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#136
  def cache_options; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#132
  def cached_cursor; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#152
  def initial_query_op(session); end

  # Add tailable cusror options to the command specifiction if needed.
  #
  # @param spec [Hash] The command specification.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#209
  def maybe_set_tailable_options(spec); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#115
  def select_cursor(session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#198
  def send_initial_query(server, session = T.unsafe(nil)); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/iterable.rb#202
  def use_query_cache?; end
end

# Provides behavior around a map/reduce operation on the collection
# view.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/map_reduce.rb#26
class Mongo::Collection::View::MapReduce
  include ::Enumerable
  include ::Mongo::Collection::View::Immutable
  include ::Mongo::Loggable
  include ::Mongo::Retryable
  extend ::Forwardable

  # Initialize the map/reduce for the provided collection view, functions
  # and options.
  #
  # @example Create the new map/reduce view.
  # @param view [Collection::View] The collection view.
  # @param map [String] The map function.
  # @param reduce [String] The reduce function.
  # @param options [Hash] The map/reduce options.
  # @return [MapReduce] a new instance of MapReduce
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#113
  def initialize(view, map, reduce, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collection(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Iterate through documents returned by the map/reduce.
  #
  # @example Iterate through the result of the map/reduce.
  #   map_reduce.each do |document|
  #   p document
  #   end
  # @return [Enumerator] The enumerator.
  # @since 2.0.0
  # @yieldparam Each [Hash] matching document.
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#71
  def each; end

  # Execute the map reduce, without doing a fetch query to retrieve the results
  #   if outputted to a collection.
  #
  # @example Execute the map reduce and get the raw result.
  #   map_reduce.execute
  # @return [Mongo::Operation::Result] The raw map reduce result
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#223
  def execute; end

  # Set or get the finalize function for the operation.
  #
  # @example Set the finalize function.
  #   map_reduce.finalize(function)
  # @param function [String] The finalize js function.
  # @return [MapReduce, String] The new MapReduce operation or the
  #   value of the function.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#98
  def finalize(function = T.unsafe(nil)); end

  # Set or get the jsMode flag for the operation.
  #
  # @example Set js mode for the operation.
  #   map_reduce.js_mode(true)
  # @param value [true, false] The jsMode value.
  # @return [MapReduce, true, false] The new MapReduce operation or the
  #   value of the jsMode flag.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#133
  def js_mode(value = T.unsafe(nil)); end

  # @return [String] map The map function.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#48
  def map_function; end

  # Set or get the output location for the operation.
  #
  # @example Set the output to inline.
  #   map_reduce.out(inline: 1)
  # @example Set the output collection to merge.
  #   map_reduce.out(merge: 'users')
  # @example Set the output collection to replace.
  #   map_reduce.out(replace: 'users')
  # @example Set the output collection to reduce.
  #   map_reduce.out(reduce: 'users')
  # @param location [Hash] The output location details.
  # @return [MapReduce, Hash] The new MapReduce operation or the value
  #   of the output location.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#157
  def out(location = T.unsafe(nil)); end

  # Returns the collection name where the map-reduce result is written to.
  # If the result is returned inline, returns nil.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#163
  def out_collection_name; end

  # Returns the database name where the map-reduce result is written to.
  # If the result is returned inline, returns nil.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#173
  def out_database_name; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # @return [String] reduce The reduce function.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#51
  def reduce_function; end

  # Set or get a scope on the operation.
  #
  # @example Set the scope value.
  #   map_reduce.scope(value: 'test')
  # @param object [Hash] The scope object.
  # @return [MapReduce, Hash] The new MapReduce operation or the value
  #   of the scope.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#194
  def scope(object = T.unsafe(nil)); end

  # Whether to include the timing information in the result.
  #
  # @example Set the verbose value.
  #   map_reduce.verbose(false)
  # @param value [true, false] Whether to include timing information
  #   in the result.
  # @return [MapReduce, Hash] The new MapReduce operation or the value
  #   of the verbose option.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#210
  def verbose(value = T.unsafe(nil)); end

  # @return [View] view The collection view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#45
  def view; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#308
  def fetch_query_op(server, session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#300
  def fetch_query_spec; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#304
  def find_command_spec(session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#253
  def initial_query_op(session); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#241
  def inline?; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#245
  def map_reduce_spec(session = T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#249
  def new(options); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#278
  def secondary_ok?; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#321
  def send_fetch_query(server, session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#282
  def send_initial_query(server, session, context:); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#288
  def send_initial_query_with_connection(connection, session, context:); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#237
  def server_selector; end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/map_reduce.rb#270
  def valid_server?(description); end
end

# The inline option.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/collection/view/map_reduce.rb#36
Mongo::Collection::View::MapReduce::INLINE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/map_reduce.rb#235
Mongo::Collection::View::MapReduce::OUT_ACTIONS = T.let(T.unsafe(nil), Array)

# Reroute message.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/collection/view/map_reduce.rb#42
Mongo::Collection::View::MapReduce::REROUTE = T.let(T.unsafe(nil), String)

# Defines read related behavior for collection view.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/readable.rb#25
module Mongo::Collection::View::Readable
  # Execute an aggregation on the collection view.
  #
  # @example Aggregate documents.
  #   view.aggregate([
  #   { "$group" => { "_id" => "$city", "tpop" => { "$sum" => "$pop" }}}
  #   ])
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] The aggregation pipeline.
  # @param options [Hash] The aggregation options.
  # @return [Aggregation] The aggregation object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#60
  def aggregate(pipeline, options = T.unsafe(nil)); end

  # Allows the server to write temporary data to disk while executing
  # a find operation.
  #
  # @return [View] The new view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#79
  def allow_disk_use; end

  # Allows the query to get partial results if some shards are down.
  #
  # @example Allow partial results.
  #   view.allow_partial_results
  # @return [View] The new view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#91
  def allow_partial_results; end

  # Tell the query's cursor to stay open and wait for data.
  #
  # @example Await data on the cursor.
  #   view.await_data
  # @return [View] The new view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#103
  def await_data; end

  # The number of documents returned in each batch of results from MongoDB.
  #
  # @example Set the batch size.
  #   view.batch_size(5)
  # @note Specifying 1 or a negative number is analogous to setting a limit.
  # @param batch_size [Integer] The size of each batch of results.
  # @return [Integer, View] Either the batch_size value or a
  #   new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#120
  def batch_size(batch_size = T.unsafe(nil)); end

  # Associate a comment with the query.
  #
  # @example Add a comment.
  #   view.comment('slow query')
  # @note Set profilingLevel to 2 and the comment will be logged in the profile
  #   collection along with the query.
  # @param comment [Object] The comment to be associated with the query.
  # @return [String, View] Either the comment or a
  #   new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#138
  def comment(comment = T.unsafe(nil)); end

  # Get a count of matching documents in the collection.
  #
  # @deprecated Use #count_documents or #estimated_document_count instead. However, note that
  #   the following operators will need to be substituted when switching to #count_documents:
  #   * $where should be replaced with $expr (only works on 3.6+)
  #   * $near should be replaced with $geoWithin with $center
  #   * $nearSphere should be replaced with $geoWithin with $centerSphere
  # @example Get the number of documents in the collection.
  #   collection_view.count
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] Options for the operation.
  # @return [Integer] The document count.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#170
  def count(opts = T.unsafe(nil)); end

  # Get a count of matching documents in the collection.
  #
  # @example Get the number of documents in the collection.
  #   collection_view.count
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option ops
  # @param opts [Hash] Options for the operation.
  # @param ops [Hash] a customizable set of options
  # @return [Integer] The document count.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#223
  def count_documents(opts = T.unsafe(nil)); end

  # The type of cursor to use. Can be :tailable or :tailable_await.
  #
  # @example Set the cursor type.
  #   view.cursor_type(:tailable)
  # @param type [:tailable, :tailable_await] The cursor type.
  # @return [:tailable, :tailable_await, View] Either the cursor type setting or a new +View+.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#626
  def cursor_type(type = T.unsafe(nil)); end

  # Get a list of distinct values for a specific field.
  #
  # @example Get the distinct values.
  #   collection_view.distinct('name')
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @param field_name [String, Symbol] The name of the field.
  # @param opts [Hash] Options for the distinct command.
  # @param options [Hash] a customizable set of options
  # @return [Array<Object>] The list of distinct values.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#317
  def distinct(field_name, opts = T.unsafe(nil)); end

  # Gets an estimate of the count of documents in a collection using collection metadata.
  #
  # @example Get the number of documents in the collection.
  #   collection_view.estimated_document_count
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] Options for the operation.
  # @return [Integer] The document count.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#254
  def estimated_document_count(opts = T.unsafe(nil)); end

  # The index that MongoDB will be forced to use for the query.
  #
  # @example Set the index hint.
  #   view.hint(name: 1)
  # @param hint [Hash] The index to use for the query.
  # @return [Hash, View] Either the hint or a new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#360
  def hint(hint = T.unsafe(nil)); end

  # The max number of docs to return from the query.
  #
  # @example Set the limit.
  #   view.limit(5)
  # @param limit [Integer] The number of docs to return.
  # @return [Integer, View] Either the limit or a new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#374
  def limit(limit = T.unsafe(nil)); end

  # Execute a map/reduce operation on the collection view.
  #
  # @example Execute a map/reduce.
  #   view.map_reduce(map, reduce)
  # @param map [String] The map js function.
  # @param reduce [String] The reduce js function.
  # @param options [Hash] The map/reduce options.
  # @return [MapReduce] The map reduce wrapper.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#390
  def map_reduce(map, reduce, options = T.unsafe(nil)); end

  # A cumulative time limit in milliseconds for processing get more operations
  # on a cursor.
  #
  # @example Set the max await time ms value.
  #   view.max_await_time_ms(500)
  # @param max [Integer] The max time in milliseconds.
  # @return [Integer, View] Either the max await time ms value or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#598
  def max_await_time_ms(max = T.unsafe(nil)); end

  # Set the max number of documents to scan.
  #
  # @deprecated This option is deprecated as of MongoDB server
  #   version 4.0.
  # @example Set the max scan value.
  #   view.max_scan(1000)
  # @param value [Integer] The max number to scan.
  # @return [Integer, View] The value or a new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#407
  def max_scan(value = T.unsafe(nil)); end

  # A cumulative time limit in milliseconds for processing operations on a cursor.
  #
  # @example Set the max time ms value.
  #   view.max_time_ms(500)
  # @param max [Integer] The max time in milliseconds.
  # @return [Integer, View] Either the max time ms value or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#612
  def max_time_ms(max = T.unsafe(nil)); end

  # Set the maximum value to search.
  #
  # @example Set the max value.
  #   view.max_value(_id: 1)
  # @param value [Hash] The max field and value.
  # @return [Hash, View] The value or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#421
  def max_value(value = T.unsafe(nil)); end

  # Set the minimum value to search.
  #
  # @example Set the min value.
  #   view.min_value(_id: 1)
  # @param value [Hash] The min field and value.
  # @return [Hash, View] The value or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#435
  def min_value(value = T.unsafe(nil)); end

  # If called without arguments or with a nil argument, returns
  # the legacy (OP_QUERY) server modifiers for the current view.
  # If called with a non-nil argument, which must be a Hash or a
  # subclass, merges the provided modifiers into the current view.
  # Both string and symbol keys are allowed in the input hash.
  #
  # @example Set the modifiers document.
  #   view.modifiers(:$orderby => Mongo::Index::ASCENDING)
  # @param doc [Hash] The modifiers document.
  # @return [Hash, View] Either the modifiers document or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#579
  def modifiers(doc = T.unsafe(nil)); end

  # The server normally times out idle cursors after an inactivity period
  # (10 minutes) to prevent excess memory use. Set this option to prevent that.
  #
  # @example Set the cursor to not timeout.
  #   view.no_cursor_timeout
  # @return [View] The new view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#448
  def no_cursor_timeout; end

  # The fields to include or exclude from each doc in the result set.
  #
  # @example Set the fields to include or exclude.
  #   view.projection(name: 1)
  # @note A value of 0 excludes a field from the doc. A value of 1 includes it.
  #   Values must all be 0 or all be 1, with the exception of the _id value.
  #   The _id field is included by default. It must be excluded explicitly.
  # @param document [Hash] The field and 1 or 0, to include or exclude it.
  # @return [Hash, View] Either the fields or a new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#466
  def projection(document = T.unsafe(nil)); end

  # The read preference to use for the query.
  #
  # @note If none is specified for the query, the read preference of the
  #   collection will be used.
  # @param value [Hash] The read preference mode to use for the query.
  # @return [Symbol, View] Either the read preference or a
  #   new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#482
  def read(value = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#631
  def read_concern; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#640
  def read_preference; end

  # Set whether to return only the indexed field or fields.
  #
  # @example Set the return key value.
  #   view.return_key(true)
  # @param value [true, false] The return key value.
  # @return [true, false, View] The value or a new +View+.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#497
  def return_key(value = T.unsafe(nil)); end

  # Set whether the disk location should be shown for each document.
  #
  # @example Set show disk location option.
  #   view.show_disk_loc(true)
  # @param value [true, false] The value for the field.
  # @return [true, false, View] Either the value or a new
  #   +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#512
  def show_disk_loc(value = T.unsafe(nil)); end

  # Set whether the disk location should be shown for each document.
  #
  # @example Set show disk location option.
  #   view.show_disk_loc(true)
  # @param value [true, false] The value for the field.
  # @return [true, false, View] Either the value or a new
  #   +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#512
  def show_record_id(value = T.unsafe(nil)); end

  # The number of docs to skip before returning results.
  #
  # @example Set the number to skip.
  #   view.skip(10)
  # @param number [Integer] Number of docs to skip.
  # @return [Integer, View] Either the skip value or a
  #   new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#528
  def skip(number = T.unsafe(nil)); end

  # Set the snapshot value for the view.
  #
  # @deprecated This option is deprecated as of MongoDB server
  #   version 4.0.
  # @example Set the snapshot value.
  #   view.snapshot(true)
  # @note When set to true, prevents documents from returning more than
  #   once.
  # @param value [true, false] The snapshot value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#546
  def snapshot(value = T.unsafe(nil)); end

  # The key and direction pairs by which the result set will be sorted.
  #
  # @example Set the sort criteria
  #   view.sort(name: -1)
  # @param spec [Hash] The attributes and directions to sort by.
  # @return [Hash, View] Either the sort setting or a
  #   new +View+.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#561
  def sort(spec = T.unsafe(nil)); end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#661
  def collation(doc = T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#673
  def parallel_scan(cursor_count, options = T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#665
  def server_selector; end

  # @raise [Error::InvalidDocument]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/readable.rb#715
  def validate_doc!(doc); end
end

# Defines write related behavior for collection view.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/collection/view/writable.rb#25
module Mongo::Collection::View::Writable
  # Remove documents from the collection.
  #
  # @example Remove multiple documents from the collection.
  #   collection_view.delete_many
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [Result] The response from the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#231
  def delete_many(opts = T.unsafe(nil)); end

  # Remove a document from the collection.
  #
  # @example Remove a single document from the collection.
  #   collection_view.delete_one
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [Result] The response from the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#290
  def delete_one(opts = T.unsafe(nil)); end

  # Finds a single document in the database via findAndModify and deletes
  # it, returning the original document.
  #
  # @example Find one document and delete it.
  #   view.find_one_and_delete
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [BSON::Document, nil] The document, if found.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#59
  def find_one_and_delete(opts = T.unsafe(nil)); end

  # Finds a single document and replaces it.
  #
  # @example Find a document and replace it, returning the original.
  #   view.find_one_and_replace({ name: 'test' }, :return_document => :before)
  # @example Find a document and replace it, returning the new document.
  #   view.find_one_and_replace({ name: 'test' }, :return_document => :after)
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @param replacement [BSON::Document] The replacement.
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [BSON::Document] The document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#127
  def find_one_and_replace(replacement, opts = T.unsafe(nil)); end

  # Finds a single document and updates it.
  #
  # an update should apply.
  #
  # @example Find a document and update it, returning the original.
  #   view.find_one_and_update({ "$set" => { name: 'test' }}, :return_document => :before)
  # @option options
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param document [BSON::Document] The updates.
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [BSON::Document | nil] The document or nil if none is found.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#164
  def find_one_and_update(document, opts = T.unsafe(nil)); end

  # Replaces a single document in the database with the new document.
  #
  # @example Replace a single document.
  #   collection_view.replace_one({ name: 'test' })
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param replacement [Hash] The replacement document.
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [Result] The response from the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#355
  def replace_one(replacement, opts = T.unsafe(nil)); end

  # Update documents in the collection.
  #
  # @example Update multiple documents in the collection.
  #   collection_view.update_many('$set' => { name: 'test' })
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param spec [Hash | Array<Hash>] The update document or pipeline.
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [Result] The response from the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#427
  def update_many(spec, opts = T.unsafe(nil)); end

  # Update a single document in the collection.
  #
  # @example Update a single document in the collection.
  #   collection_view.update_one('$set' => { name: 'test' })
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param spec [Hash | Array<Hash>] The update document or pipeline.
  # @param opts [Hash] The options.
  # @param options [Hash] a customizable set of options
  # @return [Result] The response from the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#499
  def update_one(spec, opts = T.unsafe(nil)); end

  private

  # Check the replacement documents to make sure they don't have atomic
  # modifiers. Note that as per the spec, we only have to examine the
  # first element in the replacement document.
  #
  # @param spec [Hash | Array<Hash>] The replacement document or pipeline.
  # @raise [Error::InvalidUpdateDocument] if the first key in the
  #   document does not start with a $.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#575
  def validate_replacement_documents!(spec); end

  # Checks the update documents to make sure they only have atomic modifiers.
  # Note that as per the spec, we only have to examine the first element
  # in the update document.
  #
  # @param spec [Hash | Array<Hash>] The update document or pipeline.
  # @raise [Error::InvalidUpdateDocument] if the first key in the
  #   document does not start with a $.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/collection/view/writable.rb#553
  def validate_update_documents!(spec); end
end

# The array filters field constant.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/collection/view/writable.rb#30
Mongo::Collection::View::Writable::ARRAY_FILTERS = T.let(T.unsafe(nil), String)

# This is an implementation of a condition variable.
#
# @api private
#
# source://mongo//lib/mongo/condition_variable.rb#22
class Mongo::ConditionVariable
  extend ::Forwardable

  # @api private
  # @return [ConditionVariable] a new instance of ConditionVariable
  #
  # source://mongo//lib/mongo/condition_variable.rb#25
  def initialize(lock = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/condition_variable.rb#38
  def broadcast; end

  # @api private
  #
  # source://mongo//lib/mongo/condition_variable.rb#43
  def signal; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def synchronize(*args, **_arg1, &block); end

  # Waits for the condition variable to be signaled up to timeout seconds.
  # If condition variable is not signaled, returns after timeout seconds.
  #
  # @api private
  #
  # source://mongo//lib/mongo/condition_variable.rb#32
  def wait(timeout = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://mongo//lib/mongo/condition_variable.rb#52
  def raise_unless_locked!; end
end

# This module defines configuration options for Mongo.
#
# @api private
#
# source://mongo//lib/mongo/config/options.rb#5
module Mongo::Config
  extend ::Forwardable
  extend ::Mongo::Config::Options
  extend ::Mongo::Config

  # source://mongo//lib/mongo/config/options.rb#28
  def broken_view_aggregate; end

  # source://mongo//lib/mongo/config/options.rb#32
  def broken_view_aggregate=(value); end

  # source://mongo//lib/mongo/config/options.rb#36
  def broken_view_aggregate?; end

  # source://mongo//lib/mongo/config/options.rb#28
  def broken_view_options; end

  # source://mongo//lib/mongo/config/options.rb#32
  def broken_view_options=(value); end

  # source://mongo//lib/mongo/config/options.rb#36
  def broken_view_options?; end

  # Set the configuration options.
  #
  # @api private
  # @example Set the options.
  #   config.options = { validate_update_replace: true }
  # @param options [Hash] The configuration options.
  #
  # source://mongo//lib/mongo/config.rb#36
  def options=(options); end

  # source://mongo//lib/mongo/config/options.rb#28
  def validate_update_replace; end

  # source://mongo//lib/mongo/config/options.rb#32
  def validate_update_replace=(value); end

  # source://mongo//lib/mongo/config/options.rb#36
  def validate_update_replace?; end
end

# Encapsulates logic for setting options.
#
# source://mongo//lib/mongo/config/options.rb#8
module Mongo::Config::Options
  # Get the defaults or initialize a new empty hash.
  #
  # @return [Hash] The default options.
  #
  # source://mongo//lib/mongo/config/options.rb#13
  def defaults; end

  # Define a configuration option with a default.
  #
  # @option options
  # @param name [Symbol] The name of the configuration option.
  # @param options [Hash] Extras for the option.
  #
  # source://mongo//lib/mongo/config/options.rb#23
  def option(name, options = T.unsafe(nil)); end

  # Reset the configuration options to the defaults.
  #
  # @example Reset the configuration options.
  #   config.reset
  # @return [Hash] The defaults.
  #
  # source://mongo//lib/mongo/config/options.rb#48
  def reset; end

  # Get the settings or initialize a new empty hash.
  #
  # @example Get the settings.
  #   options.settings
  # @return [Hash] The setting options.
  #
  # source://mongo//lib/mongo/config/options.rb#58
  def settings; end
end

# source://mongo//lib/mongo/config/validators/option.rb#6
module Mongo::Config::Validators; end

# Validator for configuration options.
#
# @api private
#
# source://mongo//lib/mongo/config/validators/option.rb#11
module Mongo::Config::Validators::Option
  extend ::Mongo::Config::Validators::Option

  # Validate a configuration option.
  #
  # @api private
  # @example Validate a configuration option.
  # @param option [String] The name of the option.
  #
  # source://mongo//lib/mongo/config/validators/option.rb#19
  def validate(option); end
end

# source://mongo//lib/mongo/crypt.rb#19
module Mongo::Crypt
  private

  # source://mongo//lib/mongo/crypt.rb#40
  def validate_ffi!; end

  class << self
    # source://mongo//lib/mongo/crypt.rb#40
    def validate_ffi!; end
  end
end

# A Context object initialized for auto decryption
#
# @api private
#
# source://mongo//lib/mongo/crypt/auto_decryption_context.rb#24
class Mongo::Crypt::AutoDecryptionContext < ::Mongo::Crypt::Context
  # Create a new AutoEncryptionContext object
  #
  # @api private
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t.
  # @param io [ClientEncryption::IO] A instance of the IO class
  #   that implements driver I/O methods required to run the
  #   state machine.
  # @param command [Hash] The command to be decrypted.
  # @return [AutoDecryptionContext] a new instance of AutoDecryptionContext
  #
  # source://mongo//lib/mongo/crypt/auto_decryption_context.rb#34
  def initialize(mongocrypt, io, command); end
end

# An AutoEcnrypter is an object that encapsulates the behavior of
# automatic encryption. It controls all resources associated with
# auto-encryption, including the libmongocrypt handle, key vault client
# object, mongocryptd client object, and encryption I/O.
#
# The AutoEncrypter is kept as an instance on a Mongo::Client. Client
# objects with the same auto_encryption_options Hash may share
# AutoEncrypters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/auto_encrypter.rb#31
class Mongo::Crypt::AutoEncrypter
  # Set up encryption-related options and instance variables
  # on the class that includes this module. Calls the same method
  # on the Mongo::Crypt::Encrypter module.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [AutoEncrypter] a new instance of AutoEncrypter
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#93
  def initialize(options); end

  # Close the resources created by the AutoEncrypter.
  #
  # @api private
  # @return [true] Always true.
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#217
  def close; end

  # Decrypt a database command.
  #
  # @api private
  # @param command [Hash] The command with encrypted fields.
  # @return [BSON::Document] The decrypted command.
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#206
  def decrypt(command); end

  # Encrypt a database command.
  #
  # @api private
  # @param database_name [String] The name of the database on which the
  #   command is being run.
  # @param command [Hash] The command to be encrypted.
  # @return [BSON::Document] The encrypted command.
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#192
  def encrypt(database_name, command); end

  # Whether this encrypter should perform encryption (returns false if
  # the :bypass_auto_encryption option is set to true).
  #
  # @api private
  # @return [Boolean] Whether to perform encryption.
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#181
  def encrypt?; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#34
  def key_vault_client; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#35
  def metadata_client; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#33
  def mongocryptd_client; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#36
  def options; end

  private

  # Creates or return already created internal client to be used for
  # auto encryption.
  #
  # auto encryption.
  #
  # @api private
  # @param client [Mongo::Client] A client connected to the
  #   encrypted collection.
  # @return [Mongo::Client] Client to be used as internal client for
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#297
  def internal_client(client); end

  # Returns a new set of options with the following changes:
  # - sets default values for all extra_options
  # - adds --idleShtudownTimeoutSecs=60 to extra_options[:mongocryptd_spawn_args]
  #   if not already present
  # - sets bypass_auto_encryption to false
  # - sets default key vault client
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#243
  def set_default_options(options); end

  # Create additional clients for auto encryption, if necessary
  #
  # @api private
  # @param options [Hash] Auto encryption options.
  #
  # source://mongo//lib/mongo/crypt/auto_encrypter.rb#270
  def set_or_create_clients(options); end
end

# A Hash of default values for the :extra_options option
#
# @api private
#
# source://mongo//lib/mongo/crypt/auto_encrypter.rb#39
Mongo::Crypt::AutoEncrypter::DEFAULT_EXTRA_OPTIONS = T.let(T.unsafe(nil), Mongo::Options::Redacted)

# A Context object initialized for auto encryption
#
# @api private
#
# source://mongo//lib/mongo/crypt/auto_encryption_context.rb#24
class Mongo::Crypt::AutoEncryptionContext < ::Mongo::Crypt::Context
  # Create a new AutoEncryptionContext object
  #
  # @api private
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t
  # @param io [ClientEncryption::IO] A instance of the IO class
  #   that implements driver I/O methods required to run the
  #   state machine
  # @param db_name [String] The name of the database against which
  #   the command is being made
  # @param command [Hash] The command to be encrypted
  # @return [AutoEncryptionContext] a new instance of AutoEncryptionContext
  #
  # source://mongo//lib/mongo/crypt/auto_encryption_context.rb#36
  def initialize(mongocrypt, io, db_name, command); end
end

# A wrapper around mongocrypt_binary_t, a non-owning buffer of
# uint-8 byte data. Each Binary instance keeps a copy of the data
# passed to it in order to keep that data alive.
#
# @api private
#
# source://mongo//lib/mongo/crypt/binary.rb#28
class Mongo::Crypt::Binary
  # Create a new Binary object that wraps a byte string
  #
  # it is recommended that you use #self.from_pointer or #self.from_data
  # methods
  #
  # @api private
  # @note When initializing a Binary object with a string or a pointer,
  # @param data [String] The data string wrapped by the
  #   byte buffer (optional)
  # @param pointer [FFI::Pointer] A pointer to an existing
  #   mongocrypt_binary_t object
  # @return [Binary] a new instance of Binary
  #
  # source://mongo//lib/mongo/crypt/binary.rb#39
  def initialize(data: T.unsafe(nil), pointer: T.unsafe(nil)); end

  # Returns the reference to the underlying mongocrypt_binary_t
  # object
  #
  # @api private
  # @return [FFI::Pointer] The underlying mongocrypt_binary_t object
  #
  # source://mongo//lib/mongo/crypt/binary.rb#139
  def ref; end

  # Returns the data stored as a string
  #
  # @api private
  # @return [String] Data stored in the mongocrypt_binary_t as a string
  #
  # source://mongo//lib/mongo/crypt/binary.rb#129
  def to_s; end

  # Overwrite the existing data wrapped by this Binary object
  #
  # original memory allocated to the underlying mongocrypt_binary_t
  # object. Do NOT use this method unless required to do so by libmongocrypt.
  #
  # than was originally allocated or when writing to an object that
  # already owns data.
  #
  # @api private
  # @note The data passed in must not take up more memory than the
  # @param data [String] The new string data to be wrapped by this binary object
  # @raise [ArgumentError] Raises when trying to write more data
  # @return [true] Always true
  #
  # source://mongo//lib/mongo/crypt/binary.rb#104
  def write(data); end

  class << self
    # Initialize a Binary object with a string. The Binary object will store a
    # copy of the specified string and destroy the allocated memory when
    # it goes out of scope.
    #
    # @api private
    # @param data [String] A string to be wrapped by the Binary object
    # @return [Mongo::Crypt::Binary] A new binary object
    #
    # source://mongo//lib/mongo/crypt/binary.rb#87
    def from_data(data); end

    # Initialize a Binary object from an existing pointer to a mongocrypt_binary_t
    # object.
    #
    # @api private
    # @param pointer [FFI::Pointer] A pointer to an existing
    #   mongocrypt_binary_t object
    # @return [Mongo::Crypt::Binary] A new binary object
    #
    # source://mongo//lib/mongo/crypt/binary.rb#76
    def from_pointer(pointer); end

    # Wraps a String with a mongocrypt_binary_t, yielding an FFI::Pointer
    # to the wrapped struct.
    #
    # @api private
    #
    # source://mongo//lib/mongo/crypt/binary.rb#145
    def wrap_string(str); end
  end
end

# A wrapper around mongocrypt_ctx_t, which manages the
# state machine for encryption and decription.
#
# This class is a superclass that defines shared methods
# amongst contexts that are initialized for different purposes
# (e.g. data key creation, encryption, explicit encryption, etc.)
#
# @api private
#
# source://mongo//lib/mongo/crypt/context.rb#29
class Mongo::Crypt::Context
  extend ::Forwardable

  # Create a new Context object
  #
  # @api private
  # @param mongocrypt_handle [Mongo::Crypt::Handle] A handle to libmongocrypt
  #   used to create a new context object.
  # @param io [ClientEncryption::IO] An instance of the IO class
  #   that implements driver I/O methods required to run the
  #   state machine.
  # @return [Context] a new instance of Context
  #
  # source://mongo//lib/mongo/crypt/context.rb#41
  def initialize(mongocrypt_handle, io); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/context.rb#57
  def ctx_p; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def kms_providers(*args, **_arg1, &block); end

  # Runs the mongocrypt_ctx_t state machine and handles
  # all I/O on behalf of libmongocrypt
  #
  # This method is not currently unit tested. It is integration tested
  # in spec/integration/explicit_encryption_spec.rb
  #
  # @api private
  # @raise [Error::CryptError] If the state machine enters the
  #   :error state
  # @return [BSON::Document] A BSON document representing the outcome
  #   of the state machine. Contents can differ depending on how the
  #   context was initialized..
  #
  # source://mongo//lib/mongo/crypt/context.rb#78
  def run_state_machine; end

  # Returns the state of the mongocrypt_ctx_t
  #
  # @api private
  # @return [Symbol] The context state
  #
  # source://mongo//lib/mongo/crypt/context.rb#62
  def state; end

  private

  # Returns an Azure access token, retrieving it if necessary.
  #
  # @api private
  # @raise [Error::CryptError] If the Azure access token could not be
  #   retrieved.
  # @return [String] An Azure access token.
  #
  # source://mongo//lib/mongo/crypt/context.rb#192
  def azure_access_token; end

  # Retrieves a GCP access token.
  #
  # @api private
  # @raise [Error::CryptError] If the GCP access token could not be
  # @return [String] A GCP access token.
  #
  # source://mongo//lib/mongo/crypt/context.rb#178
  def gcp_access_token; end

  # Indicate that state machine is done feeding I/O responses back to libmongocrypt
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/context.rb#134
  def mongocrypt_done; end

  # Feeds the result of a Mongo operation back to libmongocrypt.
  #
  # @api private
  # @param doc [Hash] BSON document to feed.
  # @return [BSON::Document] BSON document containing the result.
  #
  # source://mongo//lib/mongo/crypt/context.rb#143
  def mongocrypt_feed(doc); end

  # Retrieves KMS credentials for providers that are configured
  # for automatic credentials retrieval.
  #
  # @api private
  # @return [Crypt::KMS::Credentials] Credentials for the configured
  #   KMS providers.
  #
  # source://mongo//lib/mongo/crypt/context.rb#152
  def retrieve_kms_credentials; end
end

# A Context object initialized specifically for the purpose of creating
# a data key in the key management system.
#
# @api private
#
# source://mongo//lib/mongo/crypt/data_key_context.rb#25
class Mongo::Crypt::DataKeyContext < ::Mongo::Crypt::Context
  # Create a new DataKeyContext object
  #
  # @api private
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t
  # @param io [Mongo::Crypt::EncryptionIO] An object that performs all
  #   driver I/O on behalf of libmongocrypt
  # @param master_key_document [Mongo::Crypt::KMS::MasterKeyDocument] The master
  #   key document that contains master encryption key parameters.
  # @param key_alt_names [Array<String> | nil] An optional array of strings specifying
  #   alternate names for the new data key.
  # @param :key_material [String | nil] Optional
  #   96 bytes to use as custom key material for the data key being created.
  #   If :key_material option is given, the custom key material is used
  #   for encrypting and decrypting data.
  # @return [DataKeyContext] a new instance of DataKeyContext
  #
  # source://mongo//lib/mongo/crypt/data_key_context.rb#41
  def initialize(mongocrypt, io, master_key_document, key_alt_names, key_material); end

  private

  # Initializes the underlying mongocrypt_ctx_t object
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/data_key_context.rb#68
  def initialize_ctx; end

  # Set the alt names option on the context
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/data_key_context.rb#52
  def set_key_alt_names(key_alt_names); end
end

# A class that implements I/O methods between the driver and
# the MongoDB server or mongocryptd.
#
# @api private
#
# source://mongo//lib/mongo/crypt/encryption_io.rb#25
class Mongo::Crypt::EncryptionIO
  # Creates a new EncryptionIO object with information about how to connect
  # to the key vault.
  #
  # @api private
  # @note When being used for auto encryption, all arguments are required.
  #   When being used for explicit encryption, only the key_vault_namespace
  #   and key_vault_client arguments are required.
  # @note This class expects that the key_vault_client and key_vault_namespace
  #   options are not nil and are in the correct format.
  # @option mongocryptd_options
  # @option mongocryptd_options
  # @option mongocryptd_options
  # @param client [Mongo::Client] The client used to connect to the collection
  #   that stores the encrypted documents, defaults to nil.
  # @param mongocryptd_client [Mongo::Client] The client connected to mongocryptd,
  #   defaults to nil.
  # @param key_vault_client [Mongo::Client] The client connected to the
  #   key vault collection.
  # @param metadata_client [Mongo::Client | nil] The client to be used to
  #   obtain collection metadata.
  # @param key_vault_namespace [String] The key vault namespace in the format
  #   db_name.collection_name.
  # @param mongocryptd_options [Hash] Options related to mongocryptd.
  # @return [EncryptionIO] a new instance of EncryptionIO
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#57
  def initialize(key_vault_namespace:, key_vault_client:, metadata_client:, client: T.unsafe(nil), mongocryptd_client: T.unsafe(nil), mongocryptd_options: T.unsafe(nil)); end

  # Adds a key_alt_name to the key_alt_names array of the key document
  # in the key vault collection with the given id.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#163
  def add_key_alt_name(id, key_alt_name); end

  # Get collection info for a collection matching the provided filter
  #
  # @api private
  # @param filter [Hash]
  # @return [Hash] The collection information
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#96
  def collection_info(db_name, filter); end

  # Removes the key document with the given id
  # from the key vault collection.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#172
  def delete_key(id); end

  # Get information about the remote KMS encryption key and feed it to the the
  # KmsContext object
  #
  # @api private
  # @param kms_context [Mongo::Crypt::KmsContext] A KmsContext object
  #   corresponding to one remote KMS data key. Contains information about
  #   the endpoint at which to establish a TLS connection and the message
  #   to send on that connection.
  # @param tls_options. [Hash] TLS options to connect to KMS provider.
  #   The options are same as for Mongo::Client.
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#139
  def feed_kms(kms_context, tls_options); end

  # Query for keys in the key vault collection using the provided
  # filter
  #
  # @api private
  # @param filter [Hash]
  # @return [Array<BSON::Document>] The query results
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#78
  def find_keys(filter); end

  # Finds a single key document with the given id.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#177
  def get_key(id); end

  # Returns a key document in the key vault collection with
  # the given key_alt_name.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#183
  def get_key_by_alt_name(key_alt_name); end

  # Finds all documents in the key vault collection.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#188
  def get_keys; end

  # Insert a document into the key vault collection
  #
  # @api private
  # @param document [Hash]
  # @return [Mongo::Operation::Insert::Result] The insertion result
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#87
  def insert_data_key(document); end

  # Send the command to mongocryptd to be marked with intent-to-encrypt markings
  #
  # @api private
  # @param cmd [Hash]
  # @return [Hash] The marked command
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#109
  def mark_command(cmd); end

  # Removes a key_alt_name from the key_alt_names array of the key document
  # in the key vault collection with the given id.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#194
  def remove_key_alt_name(id, key_alt_name); end

  # Apply given requests to the key vault collection using bulk write.
  #
  # @api private
  # @param requests [Array<Hash>] The bulk write requests.
  # @return [BulkWrite::Result] The result of the operation.
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#223
  def update_data_keys(updates); end

  private

  # Use the provided key vault client and namespace to construct a
  # Mongo::Collection object representing the key vault collection.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#256
  def key_vault_collection; end

  # Spawn a new mongocryptd process using the mongocryptd_spawn_path
  # and mongocryptd_spawn_args passed in through the extra auto
  # encrypt options. Stdout and Stderr of this new process are written
  # to /dev/null.
  #
  # @api private
  # @note To capture the mongocryptd logs, add "--logpath=/path/to/logs"
  #   to auto_encryption_options -> extra_options -> mongocrpytd_spawn_args
  # @raise [ArgumentError] Raises an exception if no encryption options
  #   have been provided
  # @return [Integer] The process id of the spawned process
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#276
  def spawn_mongocryptd; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#229
  def validate_key_vault_client!(key_vault_client); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#241
  def validate_key_vault_namespace!(key_vault_namespace); end

  # Provide a TLS socket to be used for KMS calls in a block API
  #
  # @api private
  # @note The socket is always closed when the provided block has finished
  #   executing
  # @param endpoint [String] The URI at which to connect the TLS socket.
  # @param tls_options. [Hash] TLS options to connect to KMS provider.
  #   The options are same as for Mongo::Client.
  # @raise [Mongo::Error::KmsError] If the socket times out or raises
  #   an exception
  # @yieldparam ssl_socket [OpenSSL::SSL::SSLSocket] Yields a TLS socket
  #   connected to the specified endpoint.
  #
  # source://mongo//lib/mongo/crypt/encryption_io.rb#325
  def with_ssl_socket(endpoint, tls_options); end
end

# Timeout used for TLS socket connection, reading, and writing.
# There is no specific timeout written in the spec. See SPEC-1394
# for a discussion and updates on what this timeout should be.
#
# @api private
#
# source://mongo//lib/mongo/crypt/encryption_io.rb#30
Mongo::Crypt::EncryptionIO::SOCKET_TIMEOUT = T.let(T.unsafe(nil), Integer)

# A Context object initialized for explicit decryption
#
# @api private
#
# source://mongo//lib/mongo/crypt/explicit_decryption_context.rb#24
class Mongo::Crypt::ExplicitDecryptionContext < ::Mongo::Crypt::Context
  # Create a new ExplicitDecryptionContext object
  #
  # @api private
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t
  # @param io [ClientEncryption::IO] A instance of the IO class
  #   that implements driver I/O methods required to run the
  #   state machine
  # @param doc [BSON::Document] A document to decrypt
  # @return [ExplicitDecryptionContext] a new instance of ExplicitDecryptionContext
  #
  # source://mongo//lib/mongo/crypt/explicit_decryption_context.rb#34
  def initialize(mongocrypt, io, doc); end
end

# An ExplicitEncrypter is an object that performs explicit encryption
# operations and handles all associated options and instance variables.
#
# @api private
#
# source://mongo//lib/mongo/crypt/explicit_encrypter.rb#23
class Mongo::Crypt::ExplicitEncrypter
  extend ::Forwardable

  # Create a new ExplicitEncrypter object.
  #
  # @api private
  # @param key_vault_client [Mongo::Client] An instance of Mongo::Client
  #   to connect to the key vault collection.
  # @param key_vault_namespace [String] The namespace of the key vault
  #   collection in the format "db_name.collection_name".
  # @param kms_providers [Crypt::KMS::Credentials] A hash of key management service
  #   configuration information.
  # @param kms_tls_options [Hash] TLS options to connect to KMS
  #   providers. Keys of the hash should be KSM provider names; values
  #   should be hashes of TLS connection options. The options are equivalent
  #   to TLS connection options of Mongo::Client.
  # @return [ExplicitEncrypter] a new instance of ExplicitEncrypter
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#38
  def initialize(key_vault_client, key_vault_namespace, kms_providers, kms_tls_options); end

  # Adds a key_alt_name for the key in the key vault collection with the given id.
  #
  # @api private
  # @param id [BSON::Binary] Id of the key to add new key alt name.
  # @param key_alt_name [String] New key alt name to add.
  # @return [BSON::Document | nil] Document describing the identified key
  #   before adding the key alt name, or nil if no such key.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#197
  def add_key_alt_name(id, key_alt_name); end

  # Generates a data key used for encryption/decryption and stores
  # that key in the KMS collection. The generated key is encrypted with
  # the KMS master key.
  #
  # @api private
  # @param master_key_document [Mongo::Crypt::KMS::MasterKeyDocument] The master
  #   key document that contains master encryption key parameters.
  # @param key_alt_names [Array<String> | nil] An optional array of strings specifying
  #   alternate names for the new data key.
  # @param key_material [String | nil] Optional 96 bytes to use as
  #   custom key material for the data key being created.
  #   If key_material option is given, the custom key material is used
  #   for encrypting and decrypting data.
  # @return [BSON::Binary] The 16-byte UUID of the new data key as a
  #   BSON::Binary object with type :uuid.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#67
  def create_and_insert_data_key(master_key_document, key_alt_names, key_material = T.unsafe(nil)); end

  # Decrypts a value that has already been encrypted
  #
  # @api private
  # @param value [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   that will be decrypted
  # @return [Object] The decrypted value
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#182
  def decrypt(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete_key(*args, **_arg1, &block); end

  # Encrypts a value using the specified encryption key and algorithm
  #
  # if encryption algorithm is set to "Indexed". Query type should be set
  #   only if encryption algorithm is set to "Indexed". The only allowed
  #   value is "equality".
  #
  # @api private
  # @note The :key_id and :key_alt_name options are mutually exclusive. Only
  #   one is required to perform explicit encryption.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param value [Object] The value to encrypt
  # @param options [Hash]
  # @raise [ArgumentError] if either contention_factor or query_type
  #   is set, and algorithm is not "Indexed".
  # @return [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   representing the encrypted value
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#108
  def encrypt(value, options); end

  # Encrypts a Match Expression or Aggregate Expression to query a range index.
  #
  # Only supported when queryType is "rangePreview" and algorithm is "RangePreview".
  # @note: The Range algorithm is experimental only. It is not intended
  #   for public use. It is subject to breaking changes.
  #
  # # @param [ Hash ] options
  # intended for public use.
  #
  # @api private
  # @example Encrypt Match Expression.
  #   encryption.encrypt_expression(
  #   {'$and' =>  [{'field' => {'$gt' => 10}}, {'field' =>  {'$lt' => 20 }}]}
  #   )
  # @example Encrypt Aggregate Expression.
  #   encryption.encrypt_expression(
  #   {'$and' =>  [{'$gt' => ['$field', 10]}, {'$lt' => ['$field', 20]}}
  #   )
  #   {$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]
  # @note The RangePreview algorithm is experimental only. It is not
  # @note The :key_id and :key_alt_name options are mutually exclusive. Only
  #   one is required to perform explicit encryption.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param expression [Hash] Expression to encrypt.
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError] if disallowed values in options are set.
  # @return [BSON::Binary] A BSON Binary object of subtype 6 (ciphertext)
  #   representing the encrypted expression.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#167
  def encrypt_expression(expression, options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_key(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_key_by_alt_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_keys(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def remove_key_alt_name(*args, **_arg1, &block); end

  # Decrypts multiple data keys and (re-)encrypts them with a new master_key,
  #   or with their current master_key if a new one is not given.
  #
  # @api private
  # @option options
  # @option options
  # @param filter [Hash] Filter used to find keys to be updated.
  # @param options [Hash]
  # @return [Crypt::RewrapManyDataKeyResult] Result of the operation.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#250
  def rewrap_many_data_key(filter, opts = T.unsafe(nil)); end

  private

  # If a :provider is given, construct a new master key document
  # with that provider.
  #
  # @api private
  # @option [
  # @param opts [Hash] the options hash
  # @param [ [Hash] a customizable set of options
  # @return [KMS::MasterKeyDocument | nil] the new master key document,
  #   or nil if no provider was given.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#291
  def master_key_for_provider(opts); end

  # Returns the corresponding update document for each for of the given
  # data key documents.
  #
  # @api private
  # @param documents [Array<Hash>] the data key documents
  # @return [Array<Hash>] the update documents
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#305
  def updates_from_data_key_documents(documents); end

  # Ensures the consistency of the options passed to #rewrap_many_data_keys.
  #
  # @api private
  # @param opts [Hash] the options hash to validate
  # @raise [ArgumentError] if the options are not consistent or
  #   compatible.
  #
  # source://mongo//lib/mongo/crypt/explicit_encrypter.rb#276
  def validate_rewrap_options!(opts); end
end

# A Context object initialized for explicit encryption
#
# @api private
#
# source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#24
class Mongo::Crypt::ExplicitEncryptionContext < ::Mongo::Crypt::Context
  # Create a new ExplicitEncryptionContext object
  #
  # public use.
  #
  # @api private
  # @note The RangePreview algorithm is experimental only. It is not intended for
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t
  # @param io [ClientEncryption::IO] A instance of the IO class
  #   that implements driver I/O methods required to run the
  #   state machine
  # @param doc [BSON::Document] A document to encrypt
  # @param options [Hash]
  # @raise [ArgumentError|Mongo::Error::CryptError] If invalid options are provided
  # @return [ExplicitEncryptionContext] a new instance of ExplicitEncryptionContext
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#66
  def initialize(mongocrypt, io, doc, options = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#73
  def init(doc); end

  private

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#139
  def convert_range_opts(range_opts); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#117
  def set_algorithm_opts(options); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#110
  def set_key_alt_name(key_alt_name); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#99
  def set_key_id(key_id); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_context.rb#78
  def set_key_opts(options); end
end

# A Context object initialized for explicit expression encryption.
#
# @api private
#
# source://mongo//lib/mongo/crypt/explicit_encryption_expression_context.rb#24
class Mongo::Crypt::ExplicitEncryptionExpressionContext < ::Mongo::Crypt::ExplicitEncryptionContext
  # @api private
  #
  # source://mongo//lib/mongo/crypt/explicit_encryption_expression_context.rb#25
  def init(doc); end
end

# A handle to the libmongocrypt library that wraps a mongocrypt_t object,
# allowing clients to set options on that object or perform operations such
# as encryption and decryption
#
# @api private
#
# source://mongo//lib/mongo/crypt/handle.rb#29
class Mongo::Crypt::Handle
  # Creates a new Handle object and initializes it with options
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param kms_providers [Crypt::KMS::Credentials] Credentials for KMS providers.
  # @param kms_tls_options [Hash] TLS options to connect to KMS
  #   providers. Keys of the hash should be KSM provider names; values
  #   should be hashes of TLS connection options. The options are equivalent
  #   to TLS connection options of Mongo::Client.
  # @param options [Hash] A hash of options.
  # @return [Handle] a new instance of Handle
  #
  # source://mongo//lib/mongo/crypt/handle.rb#67
  def initialize(kms_providers, kms_tls_options, options = T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/crypt/handle.rb#136
  def crypt_shared_lib_available?; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#132
  def crypt_shared_lib_version; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#32
  def kms_providers; end

  # Return TLS options for KMS provider. If there are no TLS options set,
  # empty hash is returned.
  #
  # @api private
  # @param provider [String] KSM provider name.
  # @return [Hash] TLS options to connect to KMS provider.
  #
  # source://mongo//lib/mongo/crypt/handle.rb#128
  def kms_tls_options(provider); end

  # Return the reference to the underlying @mongocrypt object
  #
  # @api private
  # @return [FFI::Pointer]
  #
  # source://mongo//lib/mongo/crypt/handle.rb#118
  def ref; end

  private

  # Perform AES encryption or decryption and write the output to the
  # provided mongocrypt_binary_t object.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#244
  def do_aes(key_binary_p, iv_binary_p, input_binary_p, output_binary_p, response_length_p, status_p, decrypt: T.unsafe(nil), mode: T.unsafe(nil)); end

  # Perform HMAC SHA encryption and write the output to the provided
  # mongocrypt_binary_t object.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#260
  def do_hmac_sha(digest_name, key_binary_p, input_binary_p, output_binary_p, status_p); end

  # Perform signing using RSASSA-PKCS1-v1_5 with SHA256 hash and write
  # the output to the provided mongocrypt_binary_t object.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#272
  def do_rsaes_pkcs_signature(key_binary_p, input_binary_p, output_binary_p, status_p); end

  # Yields to the provided block and rescues exceptions raised by
  # the block. If an exception was raised, sets the specified status
  # to the exception message and returns false. If no exceptions were
  # raised, does not modify the status and returns true.
  #
  # This method is meant to be used with libmongocrypt callbacks and
  # follows the API defined by libmongocrypt.
  #
  # @api private
  # @param status_p [FFI::Pointer] A pointer to libmongocrypt status object
  # @return [true | false] Whether block executed without raising
  #   exceptions.
  #
  # source://mongo//lib/mongo/crypt/handle.rb#209
  def handle_error(status_p); end

  # Initialize the underlying mongocrypt_t object and raise an error if the operation fails
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#394
  def initialize_mongocrypt; end

  # Set the schema map option on the underlying mongocrypt_t object
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#143
  def maybe_set_schema_map(options); end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#178
  def set_bypass_query_analysis; end

  # We are building libmongocrypt without crypto functions to remove the
  # external dependency on OpenSSL. This method binds native Ruby crypto
  # methods to the underlying mongocrypt_t object so that libmongocrypt can
  # still perform cryptography.
  #
  # Every crypto binding ignores its first argument, which is an option
  # mongocrypt_ctx_t object and is not required to use crypto hooks.
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#289
  def set_crypto_hooks; end

  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#168
  def set_encrypted_fields_map; end

  # Send the logs from libmongocrypt to the Mongo::Logger
  #
  # @api private
  #
  # source://mongo//lib/mongo/crypt/handle.rb#189
  def set_logger_callback; end

  # Yields to the provided block and writes the return value of block
  # to the specified mongocrypt_binary_t object. If an exception is
  # raised during execution of the block, writes the exception message
  # to the specified status object and returns false. If no exception is
  # raised, does not modify status and returns true.
  # message to the mongocrypt_status_t object.
  #
  # @api private
  # @param output_binary_p [FFI::Pointer] A pointer to libmongocrypt
  #   Binary object to receive the result of block's execution
  # @param status_p [FFI::Pointer] A pointer to libmongocrypt status object
  # @return [true | false] Whether block executed without raising
  #   exceptions.
  #
  # source://mongo//lib/mongo/crypt/handle.rb#234
  def write_binary_string_and_set_status(output_binary_p, status_p); end
end

# A helper module that implements cryptography methods required
# for native Ruby crypto hooks. These methods are passed into FFI
# as C callbacks and called from the libmongocrypt library.
#
# @api private
#
# source://mongo//lib/mongo/crypt/hooks.rb#29
module Mongo::Crypt::Hooks
  private

  # An AES encrypt or decrypt method.
  #
  # @api private
  # @param key [String] The 32-byte AES encryption key
  # @param iv [String] The 16-byte AES IV
  # @param input [String] The data to be encrypted/decrypted
  # @param decrypt [true | false] Whether this method is decrypting. Default is
  #   false, which means the method will create an encryption cipher by default
  # @param mode [Symbol] AES mode of operation
  # @raise [Exception] Exceptions raised during encryption are propagated
  #   to caller.
  # @return [String] Output
  #
  # source://mongo//lib/mongo/crypt/hooks.rb#43
  def aes(key, iv, input, decrypt: T.unsafe(nil), mode: T.unsafe(nil)); end

  # A crypto hash (SHA-256) function
  #
  # @api private
  # @param input [String] The data to be hashed
  # @raise [Exception] Exceptions raised during encryption are propagated
  #   to caller.
  # @return [String]
  #
  # source://mongo//lib/mongo/crypt/hooks.rb#88
  def hash_sha256(input); end

  # An HMAC SHA-512 or SHA-256 function
  #
  # @api private
  # @param digest_name [String] The name of the digest, either "SHA256" or "SHA512"
  # @param key [String] The 32-byte AES encryption key
  # @param input [String] The data to be tagged
  # @raise [Exception] Exceptions raised during encryption are propagated
  #   to caller.
  # @return [String]
  #
  # source://mongo//lib/mongo/crypt/hooks.rb#76
  def hmac_sha(digest_name, key, input); end

  # Crypto secure random function
  #
  # @api private
  # @param num_bytes [Integer] The number of random bytes requested
  # @raise [Exception] Exceptions raised during encryption are propagated
  #   to caller.
  # @return [String]
  #
  # source://mongo//lib/mongo/crypt/hooks.rb#62
  def random(num_bytes); end

  # An RSASSA-PKCS1-v1_5 with SHA-256 signature function.
  #
  # @api private
  # @param key [String] The PKCS#8 private key in DER format, base64 encoded.
  # @param input [String] The data to be signed.
  # @return [String] The signature.
  #
  # source://mongo//lib/mongo/crypt/hooks.rb#99
  def rsaes_pkcs_signature(key, input); end

  class << self
    # An AES encrypt or decrypt method.
    #
    # @api private
    # @param key [String] The 32-byte AES encryption key
    # @param iv [String] The 16-byte AES IV
    # @param input [String] The data to be encrypted/decrypted
    # @param decrypt [true | false] Whether this method is decrypting. Default is
    #   false, which means the method will create an encryption cipher by default
    # @param mode [Symbol] AES mode of operation
    # @raise [Exception] Exceptions raised during encryption are propagated
    #   to caller.
    # @return [String] Output
    #
    # source://mongo//lib/mongo/crypt/hooks.rb#43
    def aes(key, iv, input, decrypt: T.unsafe(nil), mode: T.unsafe(nil)); end

    # A crypto hash (SHA-256) function
    #
    # @api private
    # @param input [String] The data to be hashed
    # @raise [Exception] Exceptions raised during encryption are propagated
    #   to caller.
    # @return [String]
    #
    # source://mongo//lib/mongo/crypt/hooks.rb#88
    def hash_sha256(input); end

    # An HMAC SHA-512 or SHA-256 function
    #
    # @api private
    # @param digest_name [String] The name of the digest, either "SHA256" or "SHA512"
    # @param key [String] The 32-byte AES encryption key
    # @param input [String] The data to be tagged
    # @raise [Exception] Exceptions raised during encryption are propagated
    #   to caller.
    # @return [String]
    #
    # source://mongo//lib/mongo/crypt/hooks.rb#76
    def hmac_sha(digest_name, key, input); end

    # Crypto secure random function
    #
    # @api private
    # @param num_bytes [Integer] The number of random bytes requested
    # @raise [Exception] Exceptions raised during encryption are propagated
    #   to caller.
    # @return [String]
    #
    # source://mongo//lib/mongo/crypt/hooks.rb#62
    def random(num_bytes); end

    # An RSASSA-PKCS1-v1_5 with SHA-256 signature function.
    #
    # @api private
    # @param key [String] The PKCS#8 private key in DER format, base64 encoded.
    # @param input [String] The data to be signed.
    # @return [String] The signature.
    #
    # source://mongo//lib/mongo/crypt/hooks.rb#99
    def rsaes_pkcs_signature(key, input); end
  end
end

# source://mongo//lib/mongo/crypt/kms.rb#20
module Mongo::Crypt::KMS; end

# source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#21
module Mongo::Crypt::KMS::AWS; end

# AWS KMS Credentials object contains credentials for using AWS KMS provider.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#26
class Mongo::Crypt::KMS::AWS::Credentials
  include ::Mongo::Crypt::KMS::Validations
  extend ::Forwardable

  # Creates an AWS KMS credentials object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains credentials for
  #   AWS KMS provider
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#55
  def initialize(opts); end

  # @api private
  # @return [String] AWS access key.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#31
  def access_key_id; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @api private
  # @return [String] AWS secret access key.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#34
  def secret_access_key; end

  # @api private
  # @return [String | nil] AWS session token.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#37
  def session_token; end

  # Convert credentials object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] AWS KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#67
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/aws/credentials.rb#42
Mongo::Crypt::KMS::AWS::Credentials::FORMAT_HINT = T.let(T.unsafe(nil), String)

# AWS KMS master key document object contains KMS master key parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#25
class Mongo::Crypt::KMS::AWS::MasterKeyDocument
  include ::Mongo::Crypt::KMS::Validations

  # Creates a master key document object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains master key options for
  #   the AWS KMS provider.
  # @raise [ArgumentError] If required options are missing or incorrectly.
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#49
  def initialize(opts); end

  # @api private
  # @return [String | nil] AWS KMS endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#35
  def endpoint; end

  # @api private
  # @return [String] AWS KMS key.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#32
  def key; end

  # @api private
  # @return [String] AWS region.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#29
  def region; end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] AWS KMS master key document in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#63
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/aws/master_document.rb#37
Mongo::Crypt::KMS::AWS::MasterKeyDocument::FORMAT_HINT = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#20
module Mongo::Crypt::KMS::Azure; end

# Azure access token for temporary credentials.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#24
class Mongo::Crypt::KMS::Azure::AccessToken
  # Creates an Azure access token object.
  #
  # @api private
  # @param access_token [String] Azure access token.
  # @param expires_in [Integer] Azure access token expiration time.
  # @return [AccessToken] a new instance of AccessToken
  #
  # source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#35
  def initialize(access_token, expires_in); end

  # @api private
  # @return [String] Azure access token.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#26
  def access_token; end

  # Checks if the access token is expired.
  #
  # The access token is considered expired if it is within 60 seconds
  # of its expiration time.
  #
  # @api private
  # @return [true | false] Whether the access token is expired.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#47
  def expired?; end

  # @api private
  # @return [Integer] Azure access token expiration time.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/access_token.rb#29
  def expires_in; end
end

# Azure KMS Credentials object contains credentials for using Azure KMS provider.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#24
class Mongo::Crypt::KMS::Azure::Credentials
  include ::Mongo::Crypt::KMS::Validations
  extend ::Forwardable

  # Creates an Azure KMS credentials object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains credentials for
  #   Azure KMS provider
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#61
  def initialize(opts); end

  # @api private
  # @return [String | nil] Azure access token.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#41
  def access_token; end

  # @api private
  # @return [String] Azure client id.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#32
  def client_id; end

  # @api private
  # @return [String] Azure client secret.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#35
  def client_secret; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @api private
  # @return [String | nil] Azure identity platform endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#38
  def identity_platform_endpoint; end

  # @api private
  # @return [String] Azure tenant id.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#29
  def tenant_id; end

  # Convert credentials object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Azure KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#80
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/credentials.rb#46
Mongo::Crypt::KMS::Azure::Credentials::FORMAT_HINT = T.let(T.unsafe(nil), String)

# This class retrieves Azure credentials using Azure
# metadata host. This should be used when the driver is used on the
# Azure environment.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#27
class Mongo::Crypt::KMS::Azure::CredentialsRetriever
  class << self
    # Fetches Azure credentials from Azure metadata host.
    #
    # @api private
    # @param extra_headers [Hash] Extra headers to be passed to the
    #   request. This is used for testing.
    # @param metadata_host [String | nil] Azure metadata host. This
    #   is used for testing.
    # @raise [KMS::CredentialsNotFound] If credentials could not be found.
    # @return [KMS::Azure::AccessToken] Azure access token.
    #
    # source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#41
    def fetch_access_token(extra_headers: T.unsafe(nil), metadata_host: T.unsafe(nil)); end

    private

    # Performs a request to Azure metadata host.
    #
    # @api private
    # @param uri [URI] URI to Azure metadata host.
    # @param req [Net::HTTP::Get] Request object.
    # @raise [KMS::CredentialsNotFound] If cannot execute request.
    # @return [Net::HTTPResponse] Response object.
    #
    # source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#107
    def do_request(uri, req); end

    # Fetches response from Azure metadata host.
    #
    # @api private
    # @param uri [URI] URI to Azure metadata host.
    # @param req [Net::HTTP::Get] Request object.
    # @raise [KMS::CredentialsNotFound] If cannot fetch response or
    #   response is invalid.
    # @return [Hash] Parsed response.
    #
    # source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#86
    def fetch_response(uri, req); end

    # Prepares a request to Azure metadata host.
    #
    # @api private
    # @param extra_headers [Hash] Extra headers to be passed to the
    #   request. This is used for testing.
    # @param metadata_host [String | nil] Azure metadata host. This
    #   is used for testing.
    # @return [Array<URI, Net::HTTP::Get>] URI and request object.
    #
    # source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#61
    def prepare_request(extra_headers, metadata_host); end
  end
end

# Default host to obtain Azure metadata.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/credentials_retriever.rb#29
Mongo::Crypt::KMS::Azure::CredentialsRetriever::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# Azure KMS master key document object contains KMS master key parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#25
class Mongo::Crypt::KMS::Azure::MasterKeyDocument
  include ::Mongo::Crypt::KMS::Validations

  # Creates a master key document object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains master key options for
  #   the Azure KMS provider.
  # @raise [ArgumentError] If required options are missing or incorrectly.
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#49
  def initialize(opts); end

  # @api private
  # @return [String] Azure KMS key name.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#32
  def key_name; end

  # @api private
  # @return [String] Azure key vault endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#29
  def key_vault_endpoint; end

  # @api private
  # @return [String | nil] Azure KMS key version.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#35
  def key_version; end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Azure KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#63
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/azure/master_document.rb#37
Mongo::Crypt::KMS::Azure::MasterKeyDocument::FORMAT_HINT = T.let(T.unsafe(nil), String)

# KMS Credentials object contains credentials for using KMS providers.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/credentials.rb#25
class Mongo::Crypt::KMS::Credentials
  # Creates a KMS credentials object form a parameters hash.
  #
  # @api private
  # @note There may be more than one KMS provider specified.
  # @param kms_providers [Hash] A hash that contains credential for
  #   KMS providers. The hash should have KMS provider names as keys,
  #   and required parameters for every provider as values.
  #   Required parameters for KMS providers are described in corresponding
  #   classes inside Mongo::Crypt::KMS module.
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#54
  def initialize(kms_providers); end

  # @api private
  # @return [Credentials::AWS | nil] AWS KMS credentials.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#28
  def aws; end

  # @api private
  # @return [Credentials::Azure | nil] Azure KMS credentials.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#31
  def azure; end

  # @api private
  # @return [Credentials::GCP | nil] GCP KMS credentials.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#34
  def gcp; end

  # @api private
  # @return [Credentials::KMIP | nil] KMIP KMS credentials.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#37
  def kmip; end

  # @api private
  # @return [Credentials::Local | nil] Local KMS credentials.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#40
  def local; end

  # Convert credentials object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Credentials as BSON document.
  #
  # source://mongo//lib/mongo/crypt/kms/credentials.rb#84
  def to_document; end
end

# This error indicates that we could not obtain credential for
# a KMS service.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms.rb#25
class Mongo::Crypt::KMS::CredentialsNotFound < ::RuntimeError; end

# source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#21
module Mongo::Crypt::KMS::GCP; end

# GCP Cloud Key Management Credentials object contains credentials for
# using GCP KMS provider.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#26
class Mongo::Crypt::KMS::GCP::Credentials
  include ::Mongo::Crypt::KMS::Validations
  extend ::Forwardable

  # Creates an GCP KMS credentials object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains credentials for
  #   GCP KMS provider
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#61
  def initialize(opts); end

  # @api private
  # @return [String | nil] GCP access token.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#40
  def access_token; end

  # @api private
  # @return [String] GCP email to authenticate with.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#31
  def email; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @api private
  # @return [String | nil] GCP KMS endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#37
  def endpoint; end

  # @api private
  # @return [String] GCP private key, base64 encoded DER format.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#34
  def private_key; end

  # Convert credentials object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Azure KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#108
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/credentials.rb#45
Mongo::Crypt::KMS::GCP::Credentials::FORMAT_HINT = T.let(T.unsafe(nil), String)

# This class retrieves GPC credentials using Google Compute Engine
# metadata host. This should be used when the driver is used on the
# Google Compute Engine instance.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/credentials_retriever.rb#27
class Mongo::Crypt::KMS::GCP::CredentialsRetriever
  class << self
    # @api private
    #
    # source://mongo//lib/mongo/crypt/kms/gcp/credentials_retriever.rb#32
    def fetch_access_token; end
  end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/credentials_retriever.rb#30
Mongo::Crypt::KMS::GCP::CredentialsRetriever::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/credentials_retriever.rb#28
Mongo::Crypt::KMS::GCP::CredentialsRetriever::METADATA_HOST_ENV = T.let(T.unsafe(nil), String)

# GCP KMS master key document object contains KMS master key parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#25
class Mongo::Crypt::KMS::GCP::MasterKeyDocument
  include ::Mongo::Crypt::KMS::Validations

  # Creates a master key document object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains master key options for
  #   the GCP KMS provider.
  # @raise [ArgumentError] If required options are missing or incorrectly.
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#62
  def initialize(opts); end

  # @api private
  # @return [String | nil] GCP KMS endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#44
  def endpoint; end

  # @api private
  # @return [String] GCP KMS key name.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#38
  def key_name; end

  # @api private
  # @return [String] GCP KMS key ring.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#35
  def key_ring; end

  # @api private
  # @return [String | nil] GCP KMS key version.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#41
  def key_version; end

  # @api private
  # @return [String] GCP location.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#32
  def location; end

  # @api private
  # @return [String] GCP project id.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#29
  def project_id; end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] GCP KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#78
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/gcp/master_document.rb#46
Mongo::Crypt::KMS::GCP::MasterKeyDocument::FORMAT_HINT = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#21
module Mongo::Crypt::KMS::KMIP; end

# KMIP KMS Credentials object contains credentials for a
# remote KMIP KMS provider.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#26
class Mongo::Crypt::KMS::KMIP::Credentials
  include ::Mongo::Crypt::KMS::Validations
  extend ::Forwardable

  # Creates a KMIP KMS credentials object form a parameters hash.
  #
  # @api private
  # @option opts
  # @param opts [Hash] A hash that contains credentials for
  #   KMIP KMS provider.
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#47
  def initialize(opts); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @api private
  # @return [String] KMIP KMS endpoint with optional port.
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#31
  def endpoint; end

  # Convert credentials object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Local KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#57
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/kmip/credentials.rb#36
Mongo::Crypt::KMS::KMIP::Credentials::FORMAT_HINT = T.let(T.unsafe(nil), String)

# KMIP KMS master key document object contains KMS master key parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#25
class Mongo::Crypt::KMS::KMIP::MasterKeyDocument
  include ::Mongo::Crypt::KMS::Validations

  # Creates a master key document object form a parameters hash.
  #
  # @api private
  # @option opts
  # @option opts
  # @param opts [Hash] A hash that contains master key options for
  #   KMIP KMS provider
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#49
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  # @return [String | nil] KMIP KMS endpoint with optional port.
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#33
  def endpoint; end

  # @api private
  # @return [String | nil] The KMIP Unique Identifier to a 96 byte
  #   KMIP Secret Data managed object.
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#30
  def key_id; end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] KMIP KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#61
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/kmip/master_document.rb#35
Mongo::Crypt::KMS::KMIP::MasterKeyDocument::FORMAT_HINT = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/crypt/kms/local/credentials.rb#21
module Mongo::Crypt::KMS::Local; end

# Local KMS Credentials object contains credentials for using local KMS provider.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/local/credentials.rb#25
class Mongo::Crypt::KMS::Local::Credentials
  include ::Mongo::Crypt::KMS::Validations
  extend ::Forwardable

  # Creates a local KMS credentials object form a parameters hash.
  #
  # @api private
  # @option opts
  # @param opts [Hash] A hash that contains credentials for
  #   local KMS provider
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Credentials] a new instance of Credentials
  #
  # source://mongo//lib/mongo/crypt/kms/local/credentials.rb#46
  def initialize(opts); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @api private
  # @return [String] Master key.
  #
  # source://mongo//lib/mongo/crypt/kms/local/credentials.rb#30
  def key; end

  # @api private
  # @return [BSON::Document] Local KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/local/credentials.rb#54
  def to_document; end
end

# @api private
#
# source://mongo//lib/mongo/crypt/kms/local/credentials.rb#35
Mongo::Crypt::KMS::Local::Credentials::FORMAT_HINT = T.let(T.unsafe(nil), String)

# Local KMS master key document object contains KMS master key parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/local/master_document.rb#25
class Mongo::Crypt::KMS::Local::MasterKeyDocument
  # Creates a master key document object form a parameters hash.
  # This empty method is to keep a uniform interface for all KMS providers.
  #
  # @api private
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/local/master_document.rb#29
  def initialize(_opts); end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Local KMS credentials in libmongocrypt format.
  #
  # source://mongo//lib/mongo/crypt/kms/local/master_document.rb#35
  def to_document; end
end

# KMS master key document object contains KMS master key parameters
# that are used for creation of data keys.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/master_key_document.rb#26
class Mongo::Crypt::KMS::MasterKeyDocument
  # Creates a master key document object form a parameters hash.
  #
  # @api private
  # @param kms_provider. [String] KMS provider name.
  # @param options [Hash] A hash that contains master key options for
  #   the KMS provider.
  #   Required parameters for KMS providers are described in corresponding
  #   classes inside Mongo::Crypt::KMS module.
  # @raise [ArgumentError] If required options are missing or incorrectly.
  # @return [MasterKeyDocument] a new instance of MasterKeyDocument
  #
  # source://mongo//lib/mongo/crypt/kms/master_key_document.rb#40
  def initialize(kms_provider, options); end

  # Convert master key document object to a BSON document in libmongocrypt format.
  #
  # @api private
  # @return [BSON::Document] Master key document as BSON document.
  #
  # source://mongo//lib/mongo/crypt/kms/master_key_document.rb#59
  def to_document; end
end

# Known KMS provider names.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms/master_key_document.rb#29
Mongo::Crypt::KMS::MasterKeyDocument::KMS_PROVIDERS = T.let(T.unsafe(nil), Array)

# This module contains helper methods for validating KMS parameters.
#
# @api private
#
# source://mongo//lib/mongo/crypt/kms.rb#30
module Mongo::Crypt::KMS::Validations
  # Validate if a KMS parameter is valid.
  #
  # @api private
  # @param key [Symbol] The parameter name.
  # @param opts [Hash] Hash should contain the parameter under the key.
  # @param required [Boolean] Whether the parameter is required or not.
  #   Non-required parameters can be nil.
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [String | nil] String parameter value or nil if a
  #   non-required parameter is missing.
  #
  # source://mongo//lib/mongo/crypt/kms.rb#43
  def validate_param(key, opts, format_hint, required: T.unsafe(nil)); end

  private

  # Validate KMS TLS options.
  #
  # @api private
  # @param options [Hash | nil] TLS options to connect to KMS
  #   providers. Keys of the hash should be KSM provider names; values
  #   should be hashes of TLS connection options. The options are equivalent
  #   to TLS connection options of Mongo::Client.
  # @raise [ArgumentError] If required options are missing or incorrectly
  #   formatted.
  # @return [Hash] Provided TLS options if valid.
  #
  # source://mongo//lib/mongo/crypt/kms.rb#87
  def validate_tls_options(options); end

  class << self
    # Validate KMS TLS options.
    #
    # @api private
    # @param options [Hash | nil] TLS options to connect to KMS
    #   providers. Keys of the hash should be KSM provider names; values
    #   should be hashes of TLS connection options. The options are equivalent
    #   to TLS connection options of Mongo::Client.
    # @raise [ArgumentError] If required options are missing or incorrectly
    #   formatted.
    # @return [Hash] Provided TLS options if valid.
    #
    # source://mongo//lib/mongo/crypt/kms.rb#87
    def validate_tls_options(options); end
  end
end

# Wraps a libmongocrypt mongocrypt_kms_ctx_t object. Contains information
# about making an HTTP request to fetch information about a KMS
# data key.
#
# source://mongo//lib/mongo/crypt/kms_context.rb#24
class Mongo::Crypt::KmsContext
  # Create a new KmsContext object.
  #
  # @param kms_ctx [FFI::Pointer] A pointer to a mongocrypt_kms_ctx_t
  #   object. This object is managed by the mongocrypt_ctx_t object that
  #   created it; this class is not responsible for de-allocating resources.
  # @return [KmsContext] a new instance of KmsContext
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#30
  def initialize(kms_ctx); end

  # Return the number of bytes still needed by libmongocrypt to complete
  # the request for information about the AWS data key.
  #
  # @return [Integer] The number of bytes needed.
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#58
  def bytes_needed; end

  # Return the endpoint at which to make the HTTP request.
  #
  # @return [String] The endpoint.
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#42
  def endpoint; end

  # Feed a response from the HTTP request to libmongocrypt.
  #
  # @param data [String] Data to feed to libmongocrypt.
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#65
  def feed(data); end

  # Return the pointer to the underlying mongocrypt_kms_ctx_t object.
  #
  # @return [FFI::Pointer] A pointer to a mongocrypt_kms_ctx_t object.
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#37
  def kms_ctx_p; end

  # Return the HTTP message to send to fetch information about the relevant
  # KMS data key.
  #
  # @return [String] The HTTP message.
  #
  # source://mongo//lib/mongo/crypt/kms_context.rb#50
  def message; end
end

# A Context object initialized specifically for the purpose of rewrapping
# data keys (decrypting and re-rencryting using a new KEK).
#
# @api private
#
# source://mongo//lib/mongo/crypt/rewrap_many_data_key_context.rb#25
class Mongo::Crypt::RewrapManyDataKeyContext < ::Mongo::Crypt::Context
  # Create a new RewrapManyDataKeyContext object
  #
  # @api private
  # @param mongocrypt [Mongo::Crypt::Handle] a Handle that
  #   wraps a mongocrypt_t object used to create a new mongocrypt_ctx_t
  # @param io [Mongo::Crypt::EncryptionIO] An object that performs all
  #   driver I/O on behalf of libmongocrypt
  # @param filter [Hash] Filter used to find keys to be updated.
  #   alternate names for the new data key.
  # @param master_key_document [Mongo::Crypt::KMS::MasterKeyDocument | nil] The optional master
  #   key document that contains master encryption key parameters.
  # @return [RewrapManyDataKeyContext] a new instance of RewrapManyDataKeyContext
  #
  # source://mongo//lib/mongo/crypt/rewrap_many_data_key_context.rb#37
  def initialize(mongocrypt, io, filter, master_key_document); end
end

# Represent result of the rewrap many data ke operation.
#
# @api semiprivate
#
# source://mongo//lib/mongo/crypt/rewrap_many_data_key_result.rb#23
class Mongo::Crypt::RewrapManyDataKeyResult
  # @api semiprivate
  # @param bulk_write_result [BulkWrite::Result | nil] The result of the
  #   bulk write operation used to update the key vault collection
  #   with rewrapped data keys.
  # @return [RewrapManyDataKeyResult] a new instance of RewrapManyDataKeyResult
  #
  # source://mongo//lib/mongo/crypt/rewrap_many_data_key_result.rb#32
  def initialize(bulk_write_result); end

  # @api semiprivate
  #
  # source://mongo//lib/mongo/crypt/rewrap_many_data_key_result.rb#27
  def bulk_write_result; end
end

# A wrapper around mongocrypt_status_t, representing the status of
# a mongocrypt_t handle.
#
# @api private
#
# source://mongo//lib/mongo/crypt/status.rb#27
class Mongo::Crypt::Status
  # Create a new Status object
  #
  # recommended that you use the #self.from_pointer method
  #
  # @api private
  # @note When initializing a Status object with a pointer, it is
  # @param pointer [FFI::Pointer | nil] A pointer to an existing
  #   mongocrypt_status_t object. Defaults to nil.
  # @return [Status] a new instance of Status
  #
  # source://mongo//lib/mongo/crypt/status.rb#35
  def initialize(pointer: T.unsafe(nil)); end

  # Return the integer code associated with the status
  #
  # @api private
  # @return [Integer] The status code, defaults to 0
  #
  # source://mongo//lib/mongo/crypt/status.rb#90
  def code; end

  # Return the label of the status
  #
  # @api private
  # @return [Symbol] The status label, either :ok, :error_kms, or :error_client,
  #   defaults to :ok
  #
  # source://mongo//lib/mongo/crypt/status.rb#83
  def label; end

  # Return the status message
  #
  # @api private
  # @return [String] The status message, defaults to empty string
  #
  # source://mongo//lib/mongo/crypt/status.rb#97
  def message; end

  # Checks whether the status is labeled :ok
  #
  # @api private
  # @return [Boolean] Whether the status is :ok
  #
  # source://mongo//lib/mongo/crypt/status.rb#105
  def ok?; end

  # Raises a Mongo::Error:CryptError corresponding to the
  # information stored in this status
  #
  # Does nothing if self.ok? is true
  #
  # @api private
  # @note If kms parameter is false, the error may still have come from a
  #   KMS. The kms parameter simply forces all errors to be treated as
  #   KMS errors.
  # @param kms [true | false] Whether the operation was against the KMS.
  #
  # source://mongo//lib/mongo/crypt/status.rb#127
  def raise_crypt_error(kms: T.unsafe(nil)); end

  # Returns the reference to the underlying mongocrypt_status_t
  # object
  #
  # @api private
  # @return [FFI::Pointer] Pointer to the underlying mongocrypt_status_t oject
  #
  # source://mongo//lib/mongo/crypt/status.rb#113
  def ref; end

  # Set a label, code, and message on the Status
  #
  # @api private
  # @param label [Symbol] One of :ok, :error_client, or :error_kms
  # @param code [Integer]
  # @param message [String]
  # @return [Mongo::Crypt::Status] returns self
  #
  # source://mongo//lib/mongo/crypt/status.rb#65
  def update(label, code, message); end

  class << self
    # Initialize a Status object from an existing pointer to a
    # mongocrypt_status_t object.
    #
    # @api private
    # @param pointer [FFI::Pointer] A pointer to an existing
    #   mongocrypt_status_t object
    # @return [Mongo::Crypt::Status] A new Status object
    #
    # source://mongo//lib/mongo/crypt/status.rb#54
    def from_pointer(pointer); end
  end
end

# Client-side representation of an iterator over a query result set on
# the server.
#
# +Cursor+ objects are not directly exposed to application code. Rather,
# +Collection::View+ exposes the +Enumerable+ interface to the applications,
# and the enumerator is backed by a +Cursor+ instance.
#
# @api private
# @example Get an array of 5 users named Emily.
#   users.find({:name => 'Emily'}).limit(5).to_a
# @example Call a block on each user doc.
#   users.find.each { |doc| puts doc }
#
# source://mongo//lib/mongo/cursor.rb#34
class Mongo::Cursor
  include ::Enumerable
  include ::Mongo::Retryable
  extend ::Forwardable

  # Creates a +Cursor+ object.
  #
  # @api private
  # @example Instantiate the cursor.
  #   Mongo::Cursor.new(view, response, server)
  # @option options
  # @option options
  # @param view [CollectionView] The +CollectionView+ defining the query.
  # @param result [Operation::Result] The result of the first execution.
  # @param server [Server] The server this cursor is locked to.
  # @param options [Hash] The cursor options.
  # @return [Cursor] a new instance of Cursor
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cursor.rb#69
  def initialize(view, result, server, options = T.unsafe(nil)); end

  # Get the batch size.
  #
  # @api private
  # @example Get the batch size.
  #   cursor.batch_size
  # @return [Integer] The batch size.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cursor.rb#261
  def batch_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # Closes this cursor, freeing any associated resources on the client and
  # the server.
  #
  # @api private
  # @return [nil] Always nil.
  #
  # source://mongo//lib/mongo/cursor.rb#287
  def close; end

  # Is the cursor closed?
  #
  # @api private
  # @example Is the cursor closed?
  #   cursor.closed?
  # @return [true, false] If the cursor is closed.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cursor.rb#278
  def closed?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def collection(*args, **_arg1, &block); end

  # Get the parsed collection name.
  #
  # @api private
  # @example Get the parsed collection name.
  #   cursor.coll_name
  # @return [String] The collection name.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cursor.rb#320
  def collection_name; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Iterate through documents returned from the query.
  #
  # A cursor may be iterated at most once. Incomplete iteration is also
  # allowed. Attempting to iterate the cursor more than once raises
  # InvalidCursorOperation.
  #
  # @api private
  # @example Iterate over the documents in the cursor.
  #   cursor.each do |doc|
  #   ...
  #   end
  # @return [Enumerator] The enumerator.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cursor.rb#145
  def each; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor.rb#394
  def fully_iterated?; end

  # Execute a getMore command and return the batch of documents
  # obtained from the server.
  #
  # @api private
  # @return [Array<BSON::Document>] The batch of documents
  #
  # source://mongo//lib/mongo/cursor.rb#370
  def get_more; end

  # Get the cursor id.
  #
  # @api private
  # @example Get the cursor id.
  #   cursor.id
  # @note A cursor id of 0 means the cursor was closed on the server.
  # @return [Integer] The cursor id.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cursor.rb#347
  def id; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#99
  def initial_result; end

  # Get a human-readable string representation of +Cursor+.
  #
  # @api private
  # @example Inspect the cursor.
  #   cursor.inspect
  # @return [String] A string representation of a +Cursor+ instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/cursor.rb#127
  def inspect; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#382
  def kill_spec(connection_global_id); end

  # The resume token tracked by the cursor for change stream resuming
  #
  # @api private
  # @return [BSON::Document | nil] The cursor resume token.
  #
  # source://mongo//lib/mongo/cursor.rb#50
  def resume_token; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#96
  def server; end

  # Get the number of documents to return. Used on 3.0 and lower server
  # versions.
  #
  # @api private
  # @example Get the number to return.
  #   cursor.to_return
  # @return [Integer] The number of documents to return.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/cursor.rb#360
  def to_return; end

  # Return one document from the query, if one is available.
  #
  # This method will wait up to max_await_time_ms milliseconds
  # for changes from the server, and if no changes are received
  # it will return nil. If there are no more documents to return
  # from the server, or if we have exhausted the cursor, it will
  # raise a StopIteration exception.
  #
  # @api private
  # @note This method is experimental and subject to change.
  # @raise [StopIteration] Raised on the calls after the cursor had been
  #   completely iterated.
  # @return [BSON::Document | nil] A document.
  #
  # source://mongo//lib/mongo/cursor.rb#205
  def try_next; end

  # @api private
  # @return [Collection::View] view The collection view.
  #
  # source://mongo//lib/mongo/cursor.rb#44
  def view; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#406
  def batch_size_for_get_more; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#424
  def cache_batch_resume_token; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#418
  def cache_resume_token(doc); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#453
  def end_session; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#498
  def execute_operation(op); end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor.rb#414
  def exhausted?; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor.rb#400
  def explicitly_closed?; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#428
  def get_more_operation; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#486
  def limit; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor.rb#457
  def limited?; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#461
  def process(result); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#490
  def register; end

  # Sets @cursor_id from the operation result.
  #
  # In the operation result cursor id can be represented either as Integer
  # value or as BSON::Int64. This method ensures that the instance variable
  # is always of type Integer.
  #
  # @api private
  # @param result [Operation::Result] The result of the operation.
  #
  # source://mongo//lib/mongo/cursor.rb#516
  def set_cursor_id(result); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor.rb#494
  def unregister; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor.rb#482
  def use_limit?; end

  class << self
    # Finalize the cursor for garbage collection. Schedules this cursor to be included
    # in a killCursors operation executed by the Cluster's CursorReaper.
    #
    # @api private
    # @param kill_spec [Cursor::KillSpec] The KillCursor operation specification.
    # @param cluster [Mongo::Cluster] The cluster associated with this cursor and its server.
    # @return [Proc] The Finalizer.
    #
    # source://mongo//lib/mongo/cursor.rb#110
    def finalize(kill_spec, cluster); end
  end
end

# This class contains the operation specification for KillCursors.
#
# Its purpose is to ensure we don't misspell attribute names accidentally.
#
# @api private
#
# source://mongo//lib/mongo/cursor/kill_spec.rb#26
class Mongo::Cursor::KillSpec
  # @api private
  # @return [KillSpec] a new instance of KillSpec
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#28
  def initialize(cursor_id:, coll_name:, db_name:, connection_global_id:, server_address:, session:); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#51
  def ==(other); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def coll_name; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def connection_global_id; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def cursor_id; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def db_name; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#60
  def eql?(other); end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#64
  def hash; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def server_address; end

  # @api private
  #
  # source://mongo//lib/mongo/cursor/kill_spec.rb#44
  def session; end
end

# source://mongo//lib/mongo/dbref.rb#19
Mongo::DBRef = BSON::DBRef

# Represents a database on the db server and operations that can execute on
# it at this level.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database/view.rb#19
class Mongo::Database
  include ::Mongo::Retryable
  extend ::Forwardable

  # Instantiate a new database object.
  #
  # @example Instantiate the database.
  #   Mongo::Database.new(client, :test)
  # @param client [Mongo::Client] The driver client.
  # @param name [String, Symbol] The name of the database.
  # @param options [Hash] The options.
  # @raise [Mongo::Database::InvalidName] If the name is nil.
  # @return [Database] a new instance of Database
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#316
  def initialize(client, name, options = T.unsafe(nil)); end

  # Check equality of the database object against another. Will simply check
  # if the names are the same.
  #
  # @example Check database equality.
  #   database == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#94
  def ==(other); end

  # Get a collection in this database by the provided name.
  #
  # @example Get a collection.
  #   database[:users]
  # @param collection_name [String, Symbol] The name of the collection.
  # @param options [Hash] The options to the collection.
  # @return [Mongo::Collection] The collection object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#110
  def [](collection_name, options = T.unsafe(nil)); end

  # Perform an aggregation on the database.
  #
  # @example Perform an aggregation.
  #   collection.aggregate([ { "$listLocalSessions" => {} } ])
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] The aggregation pipeline.
  # @param options [Hash] The aggregation options.
  # @return [Collection::View::Aggregation] The aggregation object.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/database.rb#403
  def aggregate(pipeline, options = T.unsafe(nil)); end

  # @return [Client] client The database client.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#62
  def client; end

  # @return [Mongo::Server] Get the primary server from the cluster.
  # @since 2.0.0
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # Get a collection in this database by the provided name.
  #
  # @example Get a collection.
  #   database[:users]
  # @param collection_name [String, Symbol] The name of the collection.
  # @param options [Hash] The options to the collection.
  # @return [Mongo::Collection] The collection object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#110
  def collection(collection_name, options = T.unsafe(nil)); end

  # Get all the names of the non-system collections in the database.
  #
  # @note The set of returned collection names depends on the version of
  #   MongoDB server that fulfills the request.
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<String>] Names of the collections.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#138
  def collection_names(options = T.unsafe(nil)); end

  # Get all the non-system collections that belong to this database.
  #
  # @note The set of returned collections depends on the version of
  #   MongoDB server that fulfills the request.
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<Mongo::Collection>] The collections.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#191
  def collections(options = T.unsafe(nil)); end

  # Execute a command on the database.
  #
  # @example Execute a command.
  #   database.command(:hello => 1)
  # @option opts
  # @option opts
  # @option opts
  # @param operation [Hash] The command to execute.
  # @param opts [Hash] The command options.
  # @return [Mongo::Operation::Result] The result of the command execution.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#213
  def command(operation, opts = T.unsafe(nil)); end

  # Drop the database and all its associated information.
  #
  # @example Drop the database.
  #   database.drop
  # @option options
  # @option opts
  # @param options [Hash] The options for the operation.
  # @param opts [Hash] a customizable set of options
  # @return [Result] The result of the command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#287
  def drop(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def encrypted_fields_map(*args, **_arg1, &block); end

  # Get the Grid "filesystem" for this database.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The GridFS options.
  # @return [Grid::FSBucket] The GridFS for the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#358
  def fs(options = T.unsafe(nil)); end

  # Get a pretty printed string inspection for the database.
  #
  # @example Inspect the database.
  #   database.inspect
  # @return [String] The database inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#334
  def inspect; end

  # Get info on all the non-system collections in the database.
  #
  # @note The set of collections returned, and the schema of the
  #   information hash per collection, depends on the MongoDB server
  #   version that fulfills the request.
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<Hash>] Array of information hashes, one for each
  #   collection in the database.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/database.rb#167
  def list_collections(options = T.unsafe(nil)); end

  # @return [String] name The name of the database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#65
  def name; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # @return [Hash] options The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#68
  def options; end

  # Execute a read command on the database, retrying the read if necessary.
  #
  # @api private
  # @option opts
  # @option opts
  # @param operation [Hash] The command to execute.
  # @param opts [Hash] The command options.
  # @return [Hash] The result of the command execution.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#251
  def read_command(operation, opts = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_concern(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_preference(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_selector(*args, **_arg1, &block); end

  # Get the user view for this database.
  #
  # @example Get the user view.
  #   database.users
  # @return [View::User] The user view.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database.rb#370
  def users; end

  # As of version 3.6 of the MongoDB server, a ``$changeStream`` pipeline stage is supported
  # in the aggregation framework. As of version 4.0, this stage allows users to request that
  # notifications are sent for all changes that occur in the client's database.
  #
  # @example Get change notifications for a given database..
  #   database.watch([{ '$match' => { operationType: { '$in' => ['insert', 'replace'] } } }])
  # @note A change stream only allows 'majority' read concern.
  # @note This helper method is preferable to running a raw aggregation with a $changeStream
  #   stage, for the purpose of supporting resumability.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param pipeline [Array<Hash>] Optional additional filter operators.
  # @param options [Hash] The change stream options.
  # @return [ChangeStream] The change stream object.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/database.rb#472
  def watch(pipeline = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern(*args, **_arg1, &block); end

  class << self
    # Create a database for the provided client, for use when we don't want the
    # client's original database instance to be the same.
    #
    # @api private
    # @example Create a database for the client.
    #   Database.create(client)
    # @param client [Client] The client to create on.
    # @return [Database] The database.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/database.rb#496
    def create(client); end
  end
end

# The admin database name.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database.rb#33
Mongo::Database::ADMIN = T.let(T.unsafe(nil), String)

# The "collection" that database commands operate against.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database.rb#38
Mongo::Database::COMMAND = T.let(T.unsafe(nil), String)

# Databases constant.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/database.rb#54
Mongo::Database::DATABASES = T.let(T.unsafe(nil), String)

# The default database options.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database.rb#43
Mongo::Database::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Mongo::Options::Redacted)

# Database name field constant.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/database.rb#49
Mongo::Database::NAME = T.let(T.unsafe(nil), String)

# The name of the collection that holds all the collection names.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database.rb#59
Mongo::Database::NAMESPACES = T.let(T.unsafe(nil), String)

# A class representing a view of a database.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/database/view.rb#24
class Mongo::Database::View
  include ::Enumerable
  include ::Mongo::Retryable
  extend ::Forwardable

  # Create the new database view.
  #
  # @example Create the new database view.
  #   View::Index.new(database)
  # @param database [Database] The database.
  # @return [View] a new instance of View
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#127
  def initialize(database); end

  # Execute an aggregation on the database view.
  #
  # @api private
  # @example Aggregate documents.
  #   view.aggregate([
  #   { "$listLocalSessions" => {} }
  #   ])
  # @param pipeline [Array<Hash>] The aggregation pipeline.
  # @param options [Hash] The aggregation options.
  # @return [Collection::View::Aggregation] The aggregation object.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/database/view.rb#151
  def aggregate(pipeline, options = T.unsafe(nil)); end

  # @return [Integer] batch_size The size of the batch of results
  #   when sending the listCollections command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#36
  def batch_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # @return [Collection] collection The command collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#42
  def collection; end

  # Get all the names of the non-system collections in the database.
  #
  # @note The set of returned collection names depends on the version of
  #   MongoDB server that fulfills the request.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Options for the listCollections command.
  # @return [Array<String>] The names of all non-system collections.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#67
  def collection_names(options = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#135
  def database; end

  # @return [Integer] limit The limit when sending a command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#39
  def limit; end

  # Get info on all the collections in the database.
  #
  # @example Get info on each collection.
  #   database.list_collections
  # @note The set of collections returned, and the schema of the
  #   information hash per collection, depends on the MongoDB server
  #   version that fulfills the request.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<Hash>] Info for each collection in the database.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/database/view.rb#114
  def list_collections(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_concern(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_preference(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server_selector(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern(*args, **_arg1, &block); end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#157
  def collections_info(session, server_selector, options = T.unsafe(nil), &block); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#184
  def collections_info_spec(session, options = T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#198
  def initial_query_op(session, options = T.unsafe(nil)); end

  # Sends command that obtains information about the database.
  #
  # This command returns a cursor, so there could be additional commands,
  # therefore this method is called send *initial* command.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param server [Server] Server to send the query to.
  # @param session [Session] Session that should be used to send the query.
  # @param options [Hash]
  # @return [Operation::Result] Result of the query.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/database/view.rb#227
  def send_initial_query(server, session, options = T.unsafe(nil)); end
end

# This is a semaphore that distinguishes waits ending due to the timeout
# being reached from waits ending due to the semaphore being signaled.
#
# @api private
#
# source://mongo//lib/mongo/distinguishing_semaphore.rb#23
class Mongo::DistinguishingSemaphore
  # @api private
  # @return [DistinguishingSemaphore] a new instance of DistinguishingSemaphore
  #
  # source://mongo//lib/mongo/distinguishing_semaphore.rb#24
  def initialize; end

  # @api private
  #
  # source://mongo//lib/mongo/distinguishing_semaphore.rb#44
  def broadcast; end

  # @api private
  #
  # source://mongo//lib/mongo/distinguishing_semaphore.rb#51
  def signal; end

  # Waits for the semaphore to be signaled up to timeout seconds.
  # If semaphore is not signaled, returns after timeout seconds.
  #
  # @api private
  # @return [true | false] true if semaphore was signaled, false if
  #   timeout was reached.
  #
  # source://mongo//lib/mongo/distinguishing_semaphore.rb#35
  def wait(timeout = T.unsafe(nil)); end
end

# Base error class for all Mongo related errors.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/notable.rb#19
class Mongo::Error < ::StandardError
  include ::Mongo::Error::Notable
  include ::Mongo::Error::Labelable
  include ::Mongo::Error::WriteRetryable
  include ::Mongo::Error::ChangeStreamResumable

  # @return [Error] a new instance of Error
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error.rb#112
  def initialize(msg = T.unsafe(nil)); end

  # Can the change stream on which this error occurred be resumed,
  # provided the operation that triggered this error was a getMore?
  #
  # @example Is the error resumable for the change stream?
  #   error.change_stream_resumable?
  # @return [true, false] Whether the error is resumable.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error.rb#94
  def change_stream_resumable?; end

  # Does the write concern error have the given label?
  #
  # @param label [String] The label to check for the presence of.
  # @return [Boolean] Whether the write concern error has the given label.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error.rb#122
  def write_concern_error_label?(label); end

  # The set of error labels associated with the write concern error.
  #
  # @return [Array<String>] The list of error labels.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error.rb#129
  def write_concern_error_labels; end
end

# Raised when authentication fails.
#
# Note: This class is derived from RuntimeError for
# backwards compatibility reasons. It is subject to
# change in future major versions of the driver.
#
# @since 2.11.0
#
# source://mongo//lib/mongo/error/auth_error.rb#28
class Mongo::Error::AuthError < ::RuntimeError
  include ::Mongo::Error::Notable
end

# Constant for a bad value error.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#78
Mongo::Error::BAD_VALUE = T.let(T.unsafe(nil), Integer)

# Raised when the driver is in load-balancing mode but a connection
# is established to something other than a mongos.
#
# source://mongo//lib/mongo/error/bad_load_balancer_target.rb#23
class Mongo::Error::BadLoadBalancerTarget < ::Mongo::Error; end

# Exception raised if there are write errors upon executing a bulk
# operation.
#
# Unlike OperationFailure, BulkWriteError does not currently expose
# individual error components (such as the error code). The result document
# (which can be obtained using the +result+ attribute) provides detailed
# error information and can be examined by the application if desired.
#
# @note A bulk operation that resulted in a BulkWriteError may have
#   written some of the documents to the database. If the bulk write
#   was unordered, writes may have also continued past the write that
#   produced a BulkWriteError.
# @since 2.0.0
#
# source://mongo//lib/mongo/error/bulk_write_error.rb#35
class Mongo::Error::BulkWriteError < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::BulkWriteError.new(response)
  # @param result [Hash] A processed response from the server
  #   reporting results of the operation.
  # @return [BulkWriteError] a new instance of BulkWriteError
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/bulk_write_error.rb#49
  def initialize(result); end

  # @return [BSON::Document] result The error result.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/bulk_write_error.rb#38
  def result; end

  private

  # Generates an error message when there are multiple write errors.
  #
  # col has validation { 'validator' => { 'x' => { '$type' => 'string' } } }
  # col.insert_many([{_id: 1}, {_id: 2}], ordered: false)
  #
  # Multiple errors:
  #   [121]: Document failed validation --
  #     {"failingDocumentId":1,"details":{"operatorName":"$type",
  #     "specifiedAs":{"x":{"$type":"string"}},"reason":"field was
  #     missing"}};
  #   [121]: Document failed validation --
  #     {"failingDocumentId":2, "details":{"operatorName":"$type",
  #     "specifiedAs":{"x":{"$type":"string"}}, "reason":"field was
  #     missing"}}
  #
  # @example Multiple documents fail validation
  # @return [String] The error message
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/bulk_write_error.rb#76
  def build_message; end
end

# The error code field.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#32
Mongo::Error::CODE = T.let(T.unsafe(nil), String)

# Constant for a Cursor not found error.
#
# @since 2.2.3
#
# source://mongo//lib/mongo/error.rb#83
Mongo::Error::CURSOR_NOT_FOUND = T.let(T.unsafe(nil), String)

# A module signifying the error will always cause change stream to
# resume once.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/change_stream_resumable.rb#25
module Mongo::Error::ChangeStreamResumable
  # Can the change stream on which this error occurred be resumed,
  # provided the operation that triggered this error was a getMore?
  #
  # @example Is the error resumable for the change stream?
  #   error.change_stream_resumable?
  # @return [true, false] Whether the error is resumable.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/change_stream_resumable.rb#35
  def change_stream_resumable?; end
end

# source://mongo//lib/mongo/error/client_closed.rb#21
class Mongo::Error::ClientClosed < ::Mongo::Error; end

# Raised if the Grid::FSBucket::Stream object is closed and an operation is attempted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/closed_stream.rb#24
class Mongo::Error::ClosedStream < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::ClosedStream.new
  # @return [ClosedStream] a new instance of ClosedStream
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/closed_stream.rb#32
  def initialize; end
end

# Exception raised when trying to check out a connection from a connection
# pool, the pool is at its max size and no connections become available
# within the configured wait timeout.
#
# @note For backwards compatibility reasons this class derives from
#   Timeout::Error rather than Mongo::Error.
# @since 2.9.0
#
# source://mongo//lib/mongo/error/connection_check_out_timeout.rb#29
class Mongo::Error::ConnectionCheckOutTimeout < ::Timeout::Error
  # Instantiate the new exception.
  #
  # @api private
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [ConnectionCheckOutTimeout] a new instance of ConnectionCheckOutTimeout
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/connection_check_out_timeout.rb#42
  def initialize(msg, options); end

  # @return [Mongo::Address] address The address of the server the
  #   pool's connections connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/connection_check_out_timeout.rb#35
  def address; end
end

# Exception raised when trying to perform operations on a connection that
# experienced a network error.
#
# source://mongo//lib/mongo/error/connection_perished.rb#23
class Mongo::Error::ConnectionPerished < ::Mongo::Error; end

# Exception raised when trying to check out a connection with a specific
# global id, and the connection for that global id no longer exists in the
# pool.
#
# source://mongo//lib/mongo/error/connection_unavailable.rb#24
class Mongo::Error::ConnectionUnavailable < ::Mongo::Error; end

# Credential check for MONGODB-AWS authentication mechanism failed.
#
# This exception is raised when the driver attempts to verify the
# credentials via STS prior to sending them to the server, and the
# verification fails due to an error response from the STS.
#
# source://mongo//lib/mongo/error/credential_check_error.rb#26
class Mongo::Error::CredentialCheckError < ::Mongo::Error::AuthError; end

# An error related to client-side encryption.
#
# source://mongo//lib/mongo/error/crypt_error.rb#22
class Mongo::Error::CryptError < ::Mongo::Error
  # Create a new CryptError
  #
  # @param code [Integer | nil] The optional libmongocrypt error code
  # @param message [String] The error message
  # @return [CryptError] a new instance of CryptError
  #
  # source://mongo//lib/mongo/error/crypt_error.rb#27
  def initialize(message, code: T.unsafe(nil)); end
end

# An error field, MongoDB < 2.6
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#38
Mongo::Error::ERR = T.let(T.unsafe(nil), String)

# The standard error message field, MongoDB 3.0+
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#50
Mongo::Error::ERRMSG = T.let(T.unsafe(nil), String)

# An error field, MongoDB < 2.4
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#44
Mongo::Error::ERROR = T.let(T.unsafe(nil), String)

# Raised if an extra chunk is found.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/extra_file_chunk.rb#24
class Mongo::Error::ExtraFileChunk < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::ExtraFileChunk.new
  # @return [ExtraFileChunk] a new instance of ExtraFileChunk
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/extra_file_chunk.rb#32
  def initialize; end
end

# This exception is raised when stringprep validation fails, such as due to
#   character being present or bidirection data being invalid.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/failed_string_prep_validation.rb#10
class Mongo::Error::FailedStringPrepValidation < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::FailedStringPrepValidation.new(
  #   Mongo::Error::FailedStringPrepValidation::PROHIBITED_CHARACTER)
  # @param msg [String] The error message describing how the validation failed.
  # @return [FailedStringPrepValidation] a new instance of FailedStringPrepValidation
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/failed_string_prep_validation.rb#36
  def initialize(msg); end
end

# The error message describing failed bidi validation.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/failed_string_prep_validation.rb#14
Mongo::Error::FailedStringPrepValidation::INVALID_BIDIRECTIONAL = T.let(T.unsafe(nil), String)

# The error message describing the discovery of a prohibited character.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/failed_string_prep_validation.rb#19
Mongo::Error::FailedStringPrepValidation::PROHIBITED_CHARACTER = T.let(T.unsafe(nil), String)

# The error message describing that stringprep normalization can't be done on Ruby versions
# below 2.2.0.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/failed_string_prep_validation.rb#25
Mongo::Error::FailedStringPrepValidation::UNABLE_TO_NORMALIZE = T.let(T.unsafe(nil), String)

# Raised if a file is deleted from a GridFS but it is not found.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/file_not_found.rb#24
class Mongo::Error::FileNotFound < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::FileNotFound.new(id, :id)
  # @param value [Object] The property value used to find the file.
  # @param property [String, Symbol] The name of the property used to find the file.
  # @return [FileNotFound] a new instance of FileNotFound
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/file_not_found.rb#35
  def initialize(value, property); end
end

# Raised when a server handshake fails.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/error/handshake_error.rb#24
class Mongo::Error::HandshakeError < ::Mongo::Error; end

# Exception that is raised when trying to create a database with no name.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/insufficient_iteration_count.rb#24
class Mongo::Error::InsufficientIterationCount < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidDatabaseName.new
  # @return [InsufficientIterationCount] a new instance of InsufficientIterationCount
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/insufficient_iteration_count.rb#32
  def initialize(msg); end

  class << self
    # @since 2.6.0
    #
    # source://mongo//lib/mongo/error/insufficient_iteration_count.rb#36
    def message(required_count, given_count); end
  end
end

# Raised when the driver detects an internal implementation problem.
#
# source://mongo//lib/mongo/error/internal_driver_error.rb#22
class Mongo::Error::InternalDriverError < ::Mongo::Error; end

# Raised when validation of addresses in URIs and SRV records fails.
#
# @since 2.11.0
#
# source://mongo//lib/mongo/error/invalid_address.rb#24
class Mongo::Error::InvalidAddress < ::Mongo::Error; end

# This exception is raised when the metadata document sent to the server
#   at the time of a connection handshake is invalid.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/error/invalid_application_name.rb#25
class Mongo::Error::InvalidApplicationName < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Create the exception.
  #   InvalidApplicationName.new(app_name, 128)
  # @param app_name [String] The application name option.
  # @param max_size [Integer] The max byte size of the application name.
  # @return [InvalidApplicationName] a new instance of InvalidApplicationName
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/error/invalid_application_name.rb#36
  def initialize(app_name, max_size); end
end

# Exception raised if an non-existent operation type is used.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_bulk_operation.rb#24
class Mongo::Error::InvalidBulkOperation < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidBulkOperation.new(name)
  # @param type [String] The bulk operation type.
  # @param operation [Hash] The bulk operation.
  # @return [InvalidBulkOperation] a new instance of InvalidBulkOperation
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_bulk_operation.rb#35
  def initialize(type, operation); end
end

# Exception raised if an non-existent operation type is used.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_bulk_operation_type.rb#24
class Mongo::Error::InvalidBulkOperationType < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidBulkOperationType.new(type)
  # @param type [String] The attempted operation type.
  # @return [InvalidBulkOperationType] a new instance of InvalidBulkOperationType
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_bulk_operation_type.rb#34
  def initialize(type); end
end

# Exception that is raised when trying to create a collection with no name.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_collection_name.rb#24
class Mongo::Error::InvalidCollectionName < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Collection::InvalidName.new
  # @return [InvalidCollectionName] a new instance of InvalidCollectionName
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_collection_name.rb#37
  def initialize; end
end

# The message is constant.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_collection_name.rb#29
Mongo::Error::InvalidCollectionName::MESSAGE = T.let(T.unsafe(nil), String)

# This error is raised when a bad configuration option is attempted to be
# set.
#
# source://mongo//lib/mongo/error/invalid_config_option.rb#9
class Mongo::Error::InvalidConfigOption < ::Mongo::Error
  # Create the new error.
  #
  # @api private
  # @param name [Symbol, String] The attempted config option name.
  # @return [InvalidConfigOption] a new instance of InvalidConfigOption
  #
  # source://mongo//lib/mongo/error/invalid_config_option.rb#16
  def initialize(name); end
end

# Exception raised when an unsupported operation is attempted on a cursor.
#
# Examples:
# - Attempting to iterate a regular cursor more than once.
# - Attempting to call try_next on a caching cursor after it had been
#   iterated completely the first time.
#
# source://mongo//lib/mongo/error/invalid_cursor_operation.rb#27
class Mongo::Error::InvalidCursorOperation < ::Mongo::Error; end

# Exception that is raised when trying to create a database with no name.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_database_name.rb#24
class Mongo::Error::InvalidDatabaseName < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidDatabaseName.new
  # @return [InvalidDatabaseName] a new instance of InvalidDatabaseName
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_database_name.rb#37
  def initialize; end
end

# The message is constant.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_database_name.rb#29
Mongo::Error::InvalidDatabaseName::MESSAGE = T.let(T.unsafe(nil), String)

# Exception raised if the object is not a valid document.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_document.rb#24
class Mongo::Error::InvalidDocument < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidDocument.new
  # @return [InvalidDocument] a new instance of InvalidDocument
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_document.rb#37
  def initialize; end
end

# The error message.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_document.rb#29
Mongo::Error::InvalidDocument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised if the file md5 and server md5 do not match when acknowledging
# GridFS writes.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_file.rb#25
class Mongo::Error::InvalidFile < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::InvalidFile.new(file_md5, server_md5)
  # @param client_md5 [String] The client side file md5.
  # @param server_md5 [String] The server side file md5.
  # @return [InvalidFile] a new instance of InvalidFile
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_file.rb#36
  def initialize(client_md5, server_md5); end
end

# Raised if the requested file revision is not found.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/invalid_file_revision.rb#24
class Mongo::Error::InvalidFileRevision < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::InvalidFileRevision.new('some-file.txt', 3)
  # @param filename [String] The name of the file.
  # @param revision [Integer] The requested revision.
  # @return [InvalidFileRevision] a new instance of InvalidFileRevision
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/invalid_file_revision.rb#35
  def initialize(filename, revision); end
end

# Exception that is raised when trying to create a client with an invalid
#   max_connecting option.
#
# source://mongo//lib/mongo/error/invalid_max_connecting.rb#21
class Mongo::Error::InvalidMaxConnecting < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @return [InvalidMaxConnecting] a new instance of InvalidMaxConnecting
  #
  # source://mongo//lib/mongo/error/invalid_max_connecting.rb#23
  def initialize(max_connecting); end
end

# Exception that is raised when trying to create a client with an invalid
#   min_pool_size option.
#
# @since 2.4.2
#
# source://mongo//lib/mongo/error/invalid_min_pool_size.rb#25
class Mongo::Error::InvalidMinPoolSize < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidMinPoolSize.new(10, 5)
  # @return [InvalidMinPoolSize] a new instance of InvalidMinPoolSize
  # @since 2.4.2
  #
  # source://mongo//lib/mongo/error/invalid_min_pool_size.rb#33
  def initialize(min, max); end
end

# This exception is raised when the server nonce returned does not
# start with the client nonce sent to it.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_nonce.rb#25
class Mongo::Error::InvalidNonce < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Create the exception.
  #   InvalidNonce.new(nonce, rnonce)
  # @param nonce [String] The client nonce.
  # @param rnonce [String] The server nonce.
  # @return [InvalidNonce] a new instance of InvalidNonce
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_nonce.rb#42
  def initialize(nonce, rnonce); end

  # @return [String] nonce The client nonce.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_nonce.rb#28
  def nonce; end

  # @return [String] rnonce The server nonce.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_nonce.rb#31
  def rnonce; end
end

# Raised when an invalid read concern is provided.
#
# source://mongo//lib/mongo/error/invalid_read_concern.rb#22
class Mongo::Error::InvalidReadConcern < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @return [InvalidReadConcern] a new instance of InvalidReadConcern
  #
  # source://mongo//lib/mongo/error/invalid_read_concern.rb#24
  def initialize(msg = T.unsafe(nil)); end
end

# Exception that is raised when trying to create a client with an invalid
#   read option.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/invalid_read_option.rb#25
class Mongo::Error::InvalidReadOption < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidReadOption.new({:mode => 'bogus'})
  # @return [InvalidReadOption] a new instance of InvalidReadOption
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/invalid_read_option.rb#33
  def initialize(read_option, msg); end
end

# Exception raised if the object is not a valid replacement document.
#
# source://mongo//lib/mongo/error/invalid_replacement_document.rb#22
class Mongo::Error::InvalidReplacementDocument < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @param :key [String] The invalid key.
  # @return [InvalidReplacementDocument] a new instance of InvalidReplacementDocument
  #
  # source://mongo//lib/mongo/error/invalid_replacement_document.rb#55
  def initialize(key: T.unsafe(nil)); end

  class << self
    # Construct the error message.
    #
    # @api private
    # @param key [String] The invalid key.
    # @return [String] The error message.
    #
    # source://mongo//lib/mongo/error/invalid_replacement_document.rb#36
    def message(key); end

    # Send and cache the warning.
    #
    # @api private
    #
    # source://mongo//lib/mongo/error/invalid_replacement_document.rb#45
    def warn(logger, key); end
  end
end

# The error message.
#
# @deprecated
#
# source://mongo//lib/mongo/error/invalid_replacement_document.rb#27
Mongo::Error::InvalidReplacementDocument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when the server returned an invalid Host value in AWS auth.
#
# source://mongo//lib/mongo/error/invalid_server_auth_host.rb#22
class Mongo::Error::InvalidServerAuthHost < ::Mongo::Error::InvalidServerAuthResponse; end

# Raised when authentication is aborted on the client because the server
# responded in an unacceptable manner.
#
# source://mongo//lib/mongo/error/invalid_server_auth_response.rb#23
class Mongo::Error::InvalidServerAuthResponse < ::Mongo::Error::AuthError; end

# Raised when an invalid server preference is provided.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#24
class Mongo::Error::InvalidServerPreference < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidServerPreference.new
  # @param message [String] The error message.
  # @return [InvalidServerPreference] a new instance of InvalidServerPreference
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_server_preference.rb#63
  def initialize(message); end
end

# Error message for when the max staleness is not at least twice the heartbeat frequency.
#
# @deprecated
# @since 2.4.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#45
Mongo::Error::InvalidServerPreference::INVALID_MAX_STALENESS = T.let(T.unsafe(nil), String)

# Error message when hedge is specified for a read preference that does not support it.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#39
Mongo::Error::InvalidServerPreference::NO_HEDGE_SUPPORT = T.let(T.unsafe(nil), String)

# Error message when a max staleness is specified for a read preference that cannot support it.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#34
Mongo::Error::InvalidServerPreference::NO_MAX_STALENESS_SUPPORT = T.let(T.unsafe(nil), String)

# Error message when max staleness cannot be used because one or more servers has version < 3.4.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#52
Mongo::Error::InvalidServerPreference::NO_MAX_STALENESS_WITH_LEGACY_SERVER = T.let(T.unsafe(nil), String)

# Error message when tags are specified for a read preference that cannot support them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/error/invalid_server_preference.rb#29
Mongo::Error::InvalidServerPreference::NO_TAG_SUPPORT = T.let(T.unsafe(nil), String)

# This exception is raised when a session is attempted to be used and it
# is invalid.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/invalid_session.rb#25
class Mongo::Error::InvalidSession < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   InvalidSession.new(message)
  # @param message [String] The error message.
  # @return [InvalidSession] a new instance of InvalidSession
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/error/invalid_session.rb#35
  def initialize(message); end
end

# This exception is raised when the server verifier does not match the
# expected signature on the client.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_signature.rb#25
class Mongo::Error::InvalidSignature < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   InvalidSignature.new(verifier, server_signature)
  # @param verifier [String] The verifier returned from the server.
  # @param server_signature [String] The expected value from the
  #   server.
  # @return [InvalidSignature] a new instance of InvalidSignature
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_signature.rb#43
  def initialize(verifier, server_signature); end

  # @return [String] server_signature The expected server signature.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_signature.rb#31
  def server_signature; end

  # @return [String] verifier The server verifier string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_signature.rb#28
  def verifier; end
end

# This exception is raised when the URI Parser's query returns too many
#   TXT records or the record specifies invalid options.
#
# @example Instantiate the exception.
#   Mongo::Error::InvalidTXTRecord.new(message)
# @since 2.5.0
#
# source://mongo//lib/mongo/error/invalid_txt_record.rb#28
class Mongo::Error::InvalidTXTRecord < ::Mongo::Error; end

# Exception raised if an invalid operation is attempted as part of a transaction.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/invalid_transaction_operation.rb#24
class Mongo::Error::InvalidTransactionOperation < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidTransactionOperation.new(msg)
  # @return [InvalidTransactionOperation] a new instance of InvalidTransactionOperation
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/invalid_transaction_operation.rb#54
  def initialize(msg); end

  class << self
    # Create an error message for incorrectly running a transaction operation that cannot be run
    # after the previous one.
    #
    # @example Create the error message.
    #   InvalidTransactionOperation.cannot_call_after(last_op, current_op)
    # @param last_op [Symbol] The operation which was run before.
    # @param current_op [Symbol] The operation which cannot be run.
    # @since 2.6.0
    #
    # source://mongo//lib/mongo/error/invalid_transaction_operation.rb#80
    def cannot_call_after_msg(last_op, current_op); end

    # Create an error message for incorrectly running a transaction operation twice.
    #
    # @example Create the error message.
    #   InvalidTransactionOperation.cannot_call_twice(op)
    # @param op [Symbol] The operation which was run twice.
    # @since 2.6.0
    #
    # source://mongo//lib/mongo/error/invalid_transaction_operation.rb#66
    def cannot_call_twice_msg(op); end
  end
end

# The error message for when a transaction read operation uses a non-primary read preference.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/invalid_transaction_operation.rb#41
Mongo::Error::InvalidTransactionOperation::INVALID_READ_PREFERENCE = T.let(T.unsafe(nil), String)

# The error message for when a user attempts to commit or abort a transaction when none is in
# progress.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/invalid_transaction_operation.rb#30
Mongo::Error::InvalidTransactionOperation::NO_TRANSACTION_STARTED = T.let(T.unsafe(nil), String)

# The error message for when a user attempts to start a transaction when one is already in
# progress.
#
# @since 2.6.0.
#
# source://mongo//lib/mongo/error/invalid_transaction_operation.rb#36
Mongo::Error::InvalidTransactionOperation::TRANSACTION_ALREADY_IN_PROGRESS = T.let(T.unsafe(nil), String)

# The error message for when a transaction is started with an unacknowledged write concern.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/invalid_transaction_operation.rb#46
Mongo::Error::InvalidTransactionOperation::UNACKNOWLEDGED_WRITE_CONCERN = T.let(T.unsafe(nil), String)

# Exception that is raised when trying to parse a URI that does not match
# the specification.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_uri.rb#25
class Mongo::Error::InvalidURI < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidURI.new(uri, details, format)
  # @return [InvalidURI] a new instance of InvalidURI
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_uri.rb#33
  def initialize(uri, details, format = T.unsafe(nil)); end
end

# Exception raised if the object is not a valid update document.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_update_document.rb#24
class Mongo::Error::InvalidUpdateDocument < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @param :key [String] The invalid key.
  # @return [InvalidUpdateDocument] a new instance of InvalidUpdateDocument
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/invalid_update_document.rb#57
  def initialize(key: T.unsafe(nil)); end

  class << self
    # Construct the error message.
    #
    # @api private
    # @param key [String] The invalid key.
    # @return [String] The error message.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/error/invalid_update_document.rb#38
    def message(key); end

    # Send and cache the warning.
    #
    # @api private
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/error/invalid_update_document.rb#47
    def warn(logger, key); end
  end
end

# The error message.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error/invalid_update_document.rb#29
Mongo::Error::InvalidUpdateDocument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when an invalid write concern is provided.
#
# @since 2.2.0
#
# source://mongo//lib/mongo/error/invalid_write_concern.rb#24
class Mongo::Error::InvalidWriteConcern < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::InvalidWriteConcern.new
  # @return [InvalidWriteConcern] a new instance of InvalidWriteConcern
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/error/invalid_write_concern.rb#32
  def initialize(msg = T.unsafe(nil)); end
end

# A KMS-related error during client-side encryption.
#
# source://mongo//lib/mongo/error/kms_error.rb#22
class Mongo::Error::KmsError < ::Mongo::Error::CryptError; end

# A module encapsulating functionality to manage labels added to errors.
#
# @api semipublic
# @note Although methods of this module are part of the public API,
#   the fact that these methods are defined on this module and not on
#   the classes which include this module is not part of the public API.
#
# source://mongo//lib/mongo/error/labelable.rb#28
module Mongo::Error::Labelable
  # Adds the specified label to the error instance, if the label is not
  # already in the set of labels.
  #
  # @api private
  # @param label [String] The label to add.
  #
  # source://mongo//lib/mongo/error/labelable.rb#66
  def add_label(label); end

  # Does the error have the given label?
  #
  # @api semipublic
  # @example
  #   error.label?(label)
  # @param label [String] The label to check if the error has.
  # @return [true, false] Whether the error has the given label.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/labelable.rb#40
  def label?(label); end

  # Gets the set of labels associated with the error.
  #
  # @api semipublic
  # @example
  #   error.labels
  # @return [Array] The set of labels.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/error/labelable.rb#52
  def labels; end
end

# Raised when the driver is used incorrectly.
#
# Normally the driver passes certain data to the server and lets the
# server return an error if the data is invalid. This makes it possible
# for the server to add functionality in the future and for older
# driver versions to support such functionality transparently, but
# also complicates debugging.
#
# Setting the environment variable MONGO_RUBY_DRIVER_LINT to 1, true
# or yes will make the driver perform additional checks on data it passes
# to the server, to flag failures sooner. This exception is raised on
# such failures.
#
# @since 2.6.1
#
# source://mongo//lib/mongo/error/lint_error.rb#35
class Mongo::Error::LintError < ::Mongo::Error; end

# Exception that is raised when trying to serialize a document that
# exceeds max BSON object size.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/max_bson_size.rb#25
class Mongo::Error::MaxBSONSize < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::MaxBSONSize.new(max)
  # @param max_size_or_msg [String | Numeric] The message to use or
  #   the maximum size to insert into the predefined message. The
  #   Numeric argument type is deprecated.
  # @return [MaxBSONSize] a new instance of MaxBSONSize
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/max_bson_size.rb#42
  def initialize(max_size_or_msg = T.unsafe(nil)); end
end

# The message is constant.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/max_bson_size.rb#30
Mongo::Error::MaxBSONSize::MESSAGE = T.let(T.unsafe(nil), String)

# Exception that is raised when trying to send a message that exceeds max
# message size.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/max_message_size.rb#25
class Mongo::Error::MaxMessageSize < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::MaxMessageSize.new(max)
  # @param max_size [Integer] The maximum message size.
  # @return [MaxMessageSize] a new instance of MaxMessageSize
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/max_message_size.rb#40
  def initialize(max_size = T.unsafe(nil)); end
end

# The message is constant.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/max_message_size.rb#30
Mongo::Error::MaxMessageSize::MESSAGE = T.let(T.unsafe(nil), String)

# This exception is raised when the URI Parser's DNS query returns SRV record(s)
#   whose parent domain does not match the hostname used for the query.
#
# @example Instantiate the exception.
#   Mongo::Error::MismatchedDomain.new(message)
# @since 2.5.0
#
# source://mongo//lib/mongo/error/mismatched_domain.rb#28
class Mongo::Error::MismatchedDomain < ::Mongo::Error; end

# Exception raised when trying to check out a connection with a specific
# global id, and the connection for that global id no longer exists in the
# pool.
#
# source://mongo//lib/mongo/error/missing_connection.rb#24
class Mongo::Error::MissingConnection < ::Mongo::Error; end

# Raised if the next chunk when reading from a GridFSBucket does not have the
# expected sequence number (n).
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/missing_file_chunk.rb#25
class Mongo::Error::MissingFileChunk < ::Mongo::Error
  # Create the new exception.
  #
  # @api private
  # @example Create the new exception.
  #   Mongo::Error::MissingFileChunk.new(expected_n, chunk)
  # @param expected_n [Integer] The expected index value.
  # @param chunk [Grid::File::Chunk | Integer] The chunk read from GridFS.
  # @return [MissingFileChunk] a new instance of MissingFileChunk
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/missing_file_chunk.rb#38
  def initialize(expected_n, chunk); end
end

# Raised when the operations that require a password (e.g. retrieving
# a salted or hashed password) are attempted on a User object that was
# not created with a password.
#
# @since 2.8.0
#
# source://mongo//lib/mongo/error/missing_password.rb#26
class Mongo::Error::MissingPassword < ::Mongo::Error
  # @return [MissingPassword] a new instance of MissingPassword
  # @since 2.8.0
  #
  # source://mongo//lib/mongo/error/missing_password.rb#27
  def initialize(msg = T.unsafe(nil)); end
end

# Raised if a change stream document is returned without a resume token.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/missing_resume_token.rb#24
class Mongo::Error::MissingResumeToken < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::MissingResumeToken.new
  # @return [MissingResumeToken] a new instance of MissingResumeToken
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/error/missing_resume_token.rb#37
  def initialize; end
end

# The error message.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/missing_resume_token.rb#29
Mongo::Error::MissingResumeToken::MESSAGE = T.let(T.unsafe(nil), String)

# This exception is raised when the server returned +{done: true}+ in a
# SCRAM conversation but did not provide a ServerSignature.
#
# source://mongo//lib/mongo/error/missing_scram_server_signature.rb#23
class Mongo::Error::MissingScramServerSignature < ::Mongo::Error
  # @return [MissingScramServerSignature] a new instance of MissingScramServerSignature
  #
  # source://mongo//lib/mongo/error/missing_scram_server_signature.rb#24
  def initialize(msg = T.unsafe(nil)); end
end

# Raised when the driver is in load-balancing mode via the URI option
# but a connection does not report a value in the serviceId field.
#
# source://mongo//lib/mongo/error/missing_service_id.rb#23
class Mongo::Error::MissingServiceId < ::Mongo::Error; end

# An error related to spawning mongocryptd for client-side encryption.
#
# source://mongo//lib/mongo/error/mongocryptd_spawn_error.rb#22
class Mongo::Error::MongocryptdSpawnError < ::Mongo::Error::CryptError; end

# Exception raised if '*' is passed to drop_one on indexes.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/multi_index_drop.rb#24
class Mongo::Error::MultiIndexDrop < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::MultiIndexDrop.new
  # @return [MultiIndexDrop] a new instance of MultiIndexDrop
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/multi_index_drop.rb#32
  def initialize; end
end

# Raised when a primary server is needed but not found.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/need_primary_server.rb#24
class Mongo::Error::NeedPrimaryServer < ::Mongo::Error; end

# This exception is raised when the URI Parser's DNS query returns no SRV records.
#
# @example Instantiate the exception.
#   Mongo::Error::NoSRVRecords.new(message)
# @since 2.5.0
#
# source://mongo//lib/mongo/error/no_srv_records.rb#27
class Mongo::Error::NoSRVRecords < ::Mongo::Error; end

# Raised if there are no servers available matching the preference.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/no_server_available.rb#24
class Mongo::Error::NoServerAvailable < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @example Instantiate the exception.
  #   Mongo::Error::NoServerAvailable.new(server_selector)
  # @param server_selector [Hash] The server preference that could not be
  #   satisfied.
  # @param cluster [Cluster] The cluster that server selection was
  #   performed on. (added in 2.7.0)
  # @return [NoServerAvailable] a new instance of NoServerAvailable
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/no_server_available.rb#37
  def initialize(server_selector, cluster = T.unsafe(nil), msg = T.unsafe(nil)); end
end

# Raised when the driver requires a connection to a particular service
# but no matching connections exist in the connection pool.
#
# source://mongo//lib/mongo/error/no_service_connection_available.rb#23
class Mongo::Error::NoServiceConnectionAvailable < ::Mongo::Error
  # @api private
  # @return [NoServiceConnectionAvailable] a new instance of NoServiceConnectionAvailable
  #
  # source://mongo//lib/mongo/error/no_service_connection_available.rb#25
  def initialize(message, address:, service_id:); end

  # @return [Mongo::Address] The address to which a connection was
  #   requested.
  #
  # source://mongo//lib/mongo/error/no_service_connection_available.rb#34
  def address; end

  # @return [nil | Object] The service id.
  #
  # source://mongo//lib/mongo/error/no_service_connection_available.rb#37
  def service_id; end

  class << self
    # @api private
    #
    # source://mongo//lib/mongo/error/no_service_connection_available.rb#40
    def generate(address:, service_id:); end
  end
end

# A module encapsulating functionality to manage data attached to
# exceptions in the driver, since the driver does not currently have a
# single exception hierarchy root.
#
# @api private
# @since 2.11.0
#
# source://mongo//lib/mongo/error/notable.rb#27
module Mongo::Error::Notable
  # @api private
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#45
  def add_note(note); end

  # Allows multiple notes to be added in a single call, for convenience.
  #
  # @api private
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#63
  def add_notes(*notes); end

  # Returns global id of the connection on which the error occurred.
  #
  # @api private
  # @return [Integer | nil] Connection global id.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#85
  def connection_global_id; end

  # Returns global id of the connection on which the error occurred.
  #
  # @api private
  # @return [Integer | nil] Connection global id.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#85
  def connection_global_id=(_arg0); end

  # Returns connection pool generation for the connection on which the
  # error occurred.
  #
  # @api private
  # @return [Integer | nil] Connection pool generation.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#71
  def generation; end

  # Returns connection pool generation for the connection on which the
  # error occurred.
  #
  # @api private
  # @return [Integer | nil] Connection pool generation.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#71
  def generation=(_arg0); end

  # Returns an array of strings with additional information about the
  # exception.
  #
  # @api public
  # @return [Array<String>] Additional information strings.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#36
  def notes; end

  # Returns service id for the connection on which the error occurred.
  #
  # @api experimental
  # @return [Object | nil] Service id.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#78
  def service_id; end

  # Returns service id for the connection on which the error occurred.
  #
  # @api experimental
  # @return [Object | nil] Service id.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#78
  def service_id=(_arg0); end

  # @api public
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#88
  def to_s; end

  private

  # @api private
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/notable.rb#95
  def notes_tail; end
end

# Raised when an operation fails for some reason.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/operation_failure.rb#25
class Mongo::Error::OperationFailure < ::Mongo::Error
  include ::Mongo::Error::SdamErrorDetection
  include ::Mongo::Error::ReadWriteRetryable
  extend ::Forwardable

  # Create the operation failure.
  #
  # @example Create the error object
  #   OperationFailure.new(message, result)
  # @example Create the error object with a code and a code name
  #   OperationFailure.new(message, result, :code => code, :code_name => code_name)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param message [String] The error message.
  # @param result [Operation::Result] The result object.
  # @param options [Hash] Additional parameters.
  # @return [OperationFailure] a new instance of OperationFailure
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#187
  def initialize(message = T.unsafe(nil), result = T.unsafe(nil), options = T.unsafe(nil)); end

  # Can the change stream on which this error occurred be resumed,
  # provided the operation that triggered this error was a getMore?
  #
  # @example Is the error resumable for the change stream?
  #   error.change_stream_resumable?
  # @return [true, false] Whether the error is resumable.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#96
  def change_stream_resumable?; end

  # @return [Integer] The error code parsed from the document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#43
  def code; end

  # @return [String] The error code name parsed from the document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#48
  def code_name; end

  # @api private
  # @return [Server::Description] Server description of the server that
  #   the operation that this exception refers to was performed on.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def connection_description(*args, **_arg1, &block); end

  # @return [String | nil] The details of the error.
  #   For WriteConcernErrors this is `document['writeConcernError']['errInfo']`.
  #   For WriteErrors this is `document['writeErrors'][0]['errInfo']`.
  #   For all other errors this is nil.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#151
  def details; end

  # @api experimental
  # @return [BSON::Document | nil] The server-returned error document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#156
  def document; end

  # Whether the error is MaxTimeMSExpired.
  #
  # @return [true | false] Whether the error is MaxTimeMSExpired.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#218
  def max_time_ms_expired?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def operation_time(*args, **_arg1, &block); end

  # @api experimental
  # @return [String] The server-returned error message
  #   parsed from the response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#54
  def server_message; end

  # Whether the error is caused by an attempted retryable write
  # on a storage engine that does not support retryable writes.
  #
  # retryable write on a storage engine that does not support retryable writes.
  #
  # @return [true | false] Whether the error is caused by an attempted
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#229
  def unsupported_retryable_write?; end

  # @return [true | false] Whether the failure includes a write
  #   concern error. A failure may have a top level error and a write
  #   concern error or either one of the two.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#125
  def write_concern_error?; end

  # @return [Integer | nil] The error code for the write concern error,
  #   if a write concern error is present and has a code.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#139
  def write_concern_error_code; end

  # @return [String | nil] The code name for the write concern error,
  #   if a write concern error is present and has a code name.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#145
  def write_concern_error_code_name; end

  # Returns the write concern error document as it was reported by the
  # server, if any.
  #
  # @return [Hash | nil] Write concern error as reported to the server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#133
  def write_concern_error_document; end

  # Whether the error is a write concern timeout.
  #
  # @return [true | false] Whether the error is a write concern timeout.
  # @since 2.7.1
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#209
  def wtimeout?; end

  private

  # Append the details to the message
  #
  # @return [String] the message with the details appended to it
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#253
  def append_details(message, details); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#115
  def change_stream_resumable_code?; end

  # Retrieve the details from a document
  #
  # @return [Hash | nil] the details extracted from the document
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/operation_failure.rb#241
  def retrieve_details(document); end
end

# Error codes and code names that should result in a failing getMore
# command on a change stream NOT being resumed.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/error/operation_failure.rb#60
Mongo::Error::OperationFailure::CHANGE_STREAM_RESUME_ERRORS = T.let(T.unsafe(nil), Array)

# Change stream can be resumed when these error messages are encountered.
#
# @api private
# @since 2.6.0
#
# source://mongo//lib/mongo/error/operation_failure.rb#85
Mongo::Error::OperationFailure::CHANGE_STREAM_RESUME_MESSAGES = T.let(T.unsafe(nil), Array)

# Class for parsing the various forms that errors can come in from MongoDB
# command responses.
#
# The errors can be reported by the server in a number of ways:
# - {ok:0} response indicates failure. In newer servers, code, codeName
#   and errmsg fields should be set. In older servers some may not be set.
# - {ok:1} response with a write concern error (writeConcernError top-level
#   field). This indicates that the node responding successfully executed
#   the request, but not enough other nodes successfully executed the
#   request to satisfy the write concern.
# - {ok:1} response with writeErrors top-level field. This can be obtained
#   in a bulk write but also in a non-bulk write. In a non-bulk write
#   there should be exactly one error in the writeErrors list.
#   The case of multiple errors is handled by BulkWrite::Result.
# - {ok:1} response with writeConcernErrors top-level field. This can
#   only be obtained in a bulk write and is handled by BulkWrite::Result,
#   not by this class.
#
# Note that writeErrors do not have codeName fields - they just provide
# codes and messages. writeConcernErrors may similarly not provide code
# names.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/error/parser.rb#69
class Mongo::Error::Parser
  include ::Mongo::Error::SdamErrorDetection

  # Create the new parser with the returned document.
  #
  # In legacy mode, the code and codeName fields of the document are not
  # examined because the status (ok: 1) is not part of the document and
  # there is no way to distinguish successful from failed responses using
  # the document itself, and a successful response may legitimately have
  # { code: 123, codeName: 'foo' } as the contents of a user-inserted
  # document. The legacy server versions do not fill out code nor codeName
  # thus not reading them does not lose information.
  #
  # @api private
  # @example Create the new parser.
  #   Parser.new({ 'errmsg' => 'failed' })
  # @option options
  # @param document [BSON::Document] The returned document.
  # @param replies [Array<Protocol::Message>] The message replies.
  # @param options [Hash] The options.
  # @return [Parser] a new instance of Parser
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#122
  def initialize(document, replies = T.unsafe(nil), options = T.unsafe(nil)); end

  # @api private
  # @return [Integer] The error code parsed from the document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/parser.rb#88
  def code; end

  # @api private
  # @return [String] The error code name parsed from the document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/parser.rb#92
  def code_name; end

  # @api private
  # @return [BSON::Document] The returned document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#73
  def document; end

  # @api private
  # @return [Array<String>] The set of labels associated with the error.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/error/parser.rb#96
  def labels; end

  # @api private
  # @return [String] The full error message to be used in the
  #   raised exception.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#77
  def message; end

  # @api private
  # @return [Array<Protocol::Message>] The message replies.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#84
  def replies; end

  # @api private
  # @return [String] The server-returned error message
  #   parsed from the response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#81
  def server_message; end

  # @api experimental
  # @return [true | false] Whether the document includes a write
  #   concern error. A failure may have a top level error and a write
  #   concern error or either one of the two.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/parser.rb#139
  def write_concern_error?; end

  # @api experimental
  # @return [Integer | nil] The error code for the write concern error,
  #   if a write concern error is present and has a code.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/parser.rb#157
  def write_concern_error_code; end

  # @api experimental
  # @return [String | nil] The code name for the write concern error,
  #   if a write concern error is present and has a code name.
  # @since 2.10.0
  #
  # source://mongo//lib/mongo/error/parser.rb#166
  def write_concern_error_code_name; end

  # Returns the write concern error document as it was reported by the
  # server, if any.
  #
  # @api experimental
  # @return [Hash | nil] Write concern error as reported to the server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#148
  def write_concern_error_document; end

  # write concern error, if there is a write concern error present.
  #
  # @api private
  # @return [Array<String> | nil] The error labels associated with this
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#172
  def write_concern_error_labels; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#99
  def wtimeout; end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#242
  def append(message, error); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#195
  def parse!; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#250
  def parse_code; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#235
  def parse_flag(message); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#283
  def parse_labels; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#227
  def parse_multiple(message, key); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#221
  def parse_single(message, key, doc = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/error/parser.rb#287
  def parse_wtimeout; end

  class << self
    # @api private
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/error/parser.rb#177
    def build_message(code: T.unsafe(nil), code_name: T.unsafe(nil), message: T.unsafe(nil)); end
  end
end

# Exception raised if an operation is attempted connection that was
# interrupted due to server monitor timeout.
#
# source://mongo//lib/mongo/error/pool_cleared_error.rb#23
class Mongo::Error::PoolClearedError < ::Mongo::Error::PoolError
  # Instantiate the new exception.
  #
  # @api private
  # @example Instantiate the exception.
  #   Mongo::Error::PoolClearedError.new(address, pool)
  # @return [PoolClearedError] a new instance of PoolClearedError
  #
  # source://mongo//lib/mongo/error/pool_cleared_error.rb#33
  def initialize(address, pool); end
end

# Exception raised if an operation is attempted on a closed connection pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/error/pool_closed_error.rb#24
class Mongo::Error::PoolClosedError < ::Mongo::Error::PoolError
  # Instantiate the new exception.
  #
  # @api private
  # @example Instantiate the exception.
  #   Mongo::Error::PoolClosedError.new(address, pool)
  # @return [PoolClosedError] a new instance of PoolClosedError
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/pool_closed_error.rb#33
  def initialize(address, pool); end
end

# Abstract base class for connection pool-related exceptions.
#
# source://mongo//lib/mongo/error/pool_error.rb#22
class Mongo::Error::PoolError < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @api private
  # @return [PoolError] a new instance of PoolError
  #
  # source://mongo//lib/mongo/error/pool_error.rb#38
  def initialize(address, pool, message); end

  # pool's connections connect to.
  #
  # @return [Mongo::Address] address The address of the server the
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/pool_error.rb#28
  def address; end

  # @return [Mongo::Server::ConnectionPool] pool The connection pool.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/error/pool_error.rb#33
  def pool; end
end

# Exception raised if an operation is attempted on a paused connection pool.
#
# source://mongo//lib/mongo/error/pool_paused_error.rb#22
class Mongo::Error::PoolPausedError < ::Mongo::Error::PoolError
  # Instantiate the new exception.
  #
  # @api private
  # @example Instantiate the exception.
  #   Mongo::Error::PoolClosedError.new(address, pool)
  # @return [PoolPausedError] a new instance of PoolPausedError
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/pool_paused_error.rb#33
  def initialize(address, pool); end
end

# This is a special marker exception class used internally in the
# retryable reads/writes implementation. Its purpose is to bypass
# note addition when raising the exception from the first read/write
# attempt.
#
# @api private
# @note This class must not derive from Error.
#
# source://mongo//lib/mongo/error/raise_original_error.rb#29
class Mongo::Error::RaiseOriginalError < ::Exception; end

# A module encapsulating functionality to indicate whether errors are
# retryable.
#
# @api semipublic
# @note Although methods of this module are part of the public API,
#   the fact that these methods are defined on this module and not on
#   the classes which include this module is not part of the public API.
#
# source://mongo//lib/mongo/error/read_write_retryable.rb#29
module Mongo::Error::ReadWriteRetryable
  # Whether the error is a retryable error according to the legacy
  # read retry logic.
  #
  # @api semipublic
  # @deprecated
  # @return [true, false]
  #
  # source://mongo//lib/mongo/error/read_write_retryable.rb#81
  def retryable?; end

  # Whether the error is a retryable error according to the modern retryable
  # reads and retryable writes specifications.
  #
  # This method is also used by the legacy retryable write logic to determine
  # whether an error is a retryable one.
  #
  # @api semipublic
  # @return [true, false]
  #
  # source://mongo//lib/mongo/error/read_write_retryable.rb#93
  def write_retryable?; end

  private

  # @api semipublic
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/error/read_write_retryable.rb#98
  def write_retryable_code?; end
end

# These are magic error messages that could indicate a cluster
# reconfiguration behind a mongos.
#
# @api private
#
# source://mongo//lib/mongo/error/read_write_retryable.rb#62
Mongo::Error::ReadWriteRetryable::RETRY_MESSAGES = T.let(T.unsafe(nil), Array)

# Error codes and code names that should result in a failing write
# being retried.
#
# @api private
#
# source://mongo//lib/mongo/error/read_write_retryable.rb#35
Mongo::Error::ReadWriteRetryable::WRITE_RETRY_ERRORS = T.let(T.unsafe(nil), Array)

# These are magic error messages that could indicate a master change.
#
# @api private
#
# source://mongo//lib/mongo/error/read_write_retryable.rb#53
Mongo::Error::ReadWriteRetryable::WRITE_RETRY_MESSAGES = T.let(T.unsafe(nil), Array)

# @api semipublic
# @note Although not_master? and node_recovering? methods of this module
#   are part of the public API, the fact that these methods are defined on
#   this module and not on the classes which include this module is not
#   part of the public API.
#
# source://mongo//lib/mongo/error/sdam_error_detection.rb#12
module Mongo::Error::SdamErrorDetection
  # Whether the error is a "node is recovering" error, or one of its variants.
  #
  # See https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering.
  #
  # @api semipublic
  # @return [true | false] Whether the error is a node is recovering.
  # @since 2.8.0
  #
  # source://mongo//lib/mongo/error/sdam_error_detection.rb#53
  def node_recovering?; end

  # Whether the error is a "node is shutting down" type error.
  #
  # See https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering.
  #
  # @api semipublic
  # @return [true | false] Whether the error is a node is shutting down.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/error/sdam_error_detection.rb#74
  def node_shutting_down?; end

  # Whether the error is a "not master" error, or one of its variants.
  #
  # See https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering.
  #
  # @api semipublic
  # @return [true | false] Whether the error is a not master.
  # @since 2.8.0
  #
  # source://mongo//lib/mongo/error/sdam_error_detection.rb#30
  def not_master?; end
end

# @api private
#
# source://mongo//lib/mongo/error/sdam_error_detection.rb#18
Mongo::Error::SdamErrorDetection::NODE_RECOVERING_CODES = T.let(T.unsafe(nil), Array)

# @api private
#
# source://mongo//lib/mongo/error/sdam_error_detection.rb#21
Mongo::Error::SdamErrorDetection::NODE_SHUTTING_DOWN_CODES = T.let(T.unsafe(nil), Array)

# @api private
#
# source://mongo//lib/mongo/error/sdam_error_detection.rb#15
Mongo::Error::SdamErrorDetection::NOT_MASTER_CODES = T.let(T.unsafe(nil), Array)

# Exception raised when a Client has :server_api configured and an
# operation attempts to specify any of server API version parameters.
#
# source://mongo//lib/mongo/error/server_api_conflict.rb#23
class Mongo::Error::ServerApiConflict < ::Mongo::Error; end

# Exception raised when a Client has :server_api configured and an
# operation is executed against a pre-3.6 MongoDB server using a legacy
# wire protocol message that does not permit sending API parameters.
#
# source://mongo//lib/mongo/error/server_api_not_supported.rb#24
class Mongo::Error::ServerApiNotSupported < ::Mongo::Error; end

# Server certificate has been revoked (determined via OCSP).
#
# source://mongo//lib/mongo/error/server_certificate_revoked.rb#22
class Mongo::Error::ServerCertificateRevoked < ::Mongo::Error; end

# Exception raised if an unknown server is attempted to be used for
# an operation.
#
# source://mongo//lib/mongo/error/server_not_usable.rb#25
class Mongo::Error::ServerNotUsable < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @api private
  # @return [ServerNotUsable] a new instance of ServerNotUsable
  #
  # source://mongo//lib/mongo/error/server_not_usable.rb#30
  def initialize(address); end
end

# Session was previously ended.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/error/session_ended.rb#24
class Mongo::Error::SessionEnded < ::Mongo::Error
  # @return [SessionEnded] a new instance of SessionEnded
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/error/session_ended.rb#25
  def initialize; end
end

# This exception is raised when a session is attempted to be used but
# it was never materialized.
#
# source://mongo//lib/mongo/error/session_not_materialized.rb#23
class Mongo::Error::SessionNotMaterialized < ::Mongo::Error::InvalidSession
  # @return [SessionNotMaterialized] a new instance of SessionNotMaterialized
  #
  # source://mongo//lib/mongo/error/session_not_materialized.rb#24
  def initialize; end
end

# This exception is raised when a session is attempted to be used and the
# deployment does not support sessions.
#
# @note The subclassing of InvalidSession only exists for backwards
#   compatibility and will be removed in driver version 3.0.
#
# source://mongo//lib/mongo/error/sessions_not_supported.rb#26
class Mongo::Error::SessionsNotSupported < ::Mongo::Error::InvalidSession
  # Create the new exception.
  #
  # @api private
  # @param message [String] The error message.
  # @return [SessionsNotSupported] a new instance of SessionsNotSupported
  #
  # source://mongo//lib/mongo/error/sessions_not_supported.rb#33
  def initialize(message); end
end

# Exception raised if an operation using a snapshot session is
# directed to a pre-5.0 server.
#
# source://mongo//lib/mongo/error/snapshot_session_invalid_server_version.rb#23
class Mongo::Error::SnapshotSessionInvalidServerVersion < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @return [SnapshotSessionInvalidServerVersion] a new instance of SnapshotSessionInvalidServerVersion
  #
  # source://mongo//lib/mongo/error/snapshot_session_invalid_server_version.rb#26
  def initialize; end
end

# Exception raised if a transaction is attempted on a snapshot session.
#
# source://mongo//lib/mongo/error/snapshot_session_transaction_prohibited.rb#22
class Mongo::Error::SnapshotSessionTransactionProhibited < ::Mongo::Error
  # Instantiate the new exception.
  #
  # @return [SnapshotSessionTransactionProhibited] a new instance of SnapshotSessionTransactionProhibited
  #
  # source://mongo//lib/mongo/error/snapshot_session_transaction_prohibited.rb#25
  def initialize; end
end

# Raised when a socket has an error.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/socket_error.rb#24
class Mongo::Error::SocketError < ::Mongo::Error; end

# Raised when a socket connection times out.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/socket_timeout_error.rb#24
class Mongo::Error::SocketTimeoutError < ::Mongo::Error; end

# Error label describing errors that will likely not occur if a transaction is manually retried
# from the start.
#
# @deprecated
# @since 2.6.0
#
# source://mongo//lib/mongo/error.rb#110
Mongo::Error::TRANSIENT_TRANSACTION_ERROR_LABEL = T.let(T.unsafe(nil), String)

# Constant for an unknown error.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#73
Mongo::Error::UNKNOWN_ERROR = T.let(T.unsafe(nil), Integer)

# Error label describing commitTransaction errors that may or may not occur again if a commit is
# manually retried by the user.
#
# @deprecated
# @since 2.6.0
#
# source://mongo//lib/mongo/error.rb#103
Mongo::Error::UNKNOWN_TRANSACTION_COMMIT_RESULT_LABEL = T.let(T.unsafe(nil), String)

# Raised if a new collection is created from an existing one and options other than the
# changeable ones are provided.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/unchangeable_collection_option.rb#25
class Mongo::Error::UnchangeableCollectionOption < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnchangeableCollectionOption.new(option)
  # @param option [String, Symbol] The option that was attempted to be changed.
  # @return [UnchangeableCollectionOption] a new instance of UnchangeableCollectionOption
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/unchangeable_collection_option.rb#35
  def initialize(option); end
end

# Raised if the next chunk when reading from a GridFSBucket does not have the
# expected length.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/error/unexpected_chunk_length.rb#25
class Mongo::Error::UnexpectedChunkLength < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnexpectedChunkLength.new(expected_len, chunk)
  # @param expected_len [Integer] The expected length.
  # @param chunk [Grid::File::Chunk] The chunk read from GridFS.
  # @return [UnexpectedChunkLength] a new instance of UnexpectedChunkLength
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/error/unexpected_chunk_length.rb#36
  def initialize(expected_len, chunk); end
end

# Raised if the response read from the socket does not match the latest query.
#
# @since 2.2.6
#
# source://mongo//lib/mongo/error/unexpected_response.rb#24
class Mongo::Error::UnexpectedResponse < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnexpectedResponse.new(expected_response_to, response_to)
  # @param expected_response_to [Integer] The last request id sent.
  # @param response_to [Integer] The actual response_to of the reply.
  # @return [UnexpectedResponse] a new instance of UnexpectedResponse
  # @since 2.2.6
  #
  # source://mongo//lib/mongo/error/unexpected_response.rb#35
  def initialize(expected_response_to, response_to); end
end

# Raised if an unknown payload type is encountered when an OP_MSG is created or read.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unknown_payload_type.rb#24
class Mongo::Error::UnknownPayloadType < ::Mongo::Error
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnknownPayloadType.new(byte)
  # @param byte [String] The unknown payload type.
  # @return [UnknownPayloadType] a new instance of UnknownPayloadType
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/error/unknown_payload_type.rb#39
  def initialize(byte); end
end

# The error message.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unknown_payload_type.rb#29
Mongo::Error::UnknownPayloadType::MESSAGE = T.let(T.unsafe(nil), String)

# Raised if an optional dependency of the driver is not met.
#
# source://mongo//lib/mongo/error/unmet_dependency.rb#22
class Mongo::Error::UnmetDependency < ::Mongo::Error; end

# Raised if the array filters option is specified for an operation but the server
# selected does not support array filters.
#
# @deprecated RUBY-2260 In driver version 3.0, this error class will be
#   replaced with UnsupportedOption. To handle this error, catch
#   Mongo::Error::UnsupportedOption, which will prevent any breaking changes
#   in your application when upgrading to version 3.0 of the driver.
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unsupported_array_filters.rb#30
class Mongo::Error::UnsupportedArrayFilters < ::Mongo::Error::UnsupportedOption
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnsupportedArrayFilters.new
  # @return [UnsupportedArrayFilters] a new instance of UnsupportedArrayFilters
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/error/unsupported_array_filters.rb#54
  def initialize(message = T.unsafe(nil)); end
end

# The default error message describing that array filters are not supported.
#
# @return [String] A default message describing that array filters are not supported by the server.
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unsupported_array_filters.rb#37
Mongo::Error::UnsupportedArrayFilters::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# The error message describing that array filters cannot be used when write concern is unacknowledged.
#
# @return [String] A message describing that array filters cannot be used when write concern is unacknowledged.
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unsupported_array_filters.rb#45
Mongo::Error::UnsupportedArrayFilters::UNACKNOWLEDGED_WRITES_MESSAGE = T.let(T.unsafe(nil), String)

# Raised if a collation is specified for an operation but the server selected does not
# support collations.
#
# @deprecated RUBY-2260 In driver version 3.0, this error class will be
#   replaced with UnsupportedOption. To handle this error, catch
#   Mongo::Error::UnsupportedOption, which will prevent any breaking changes
#   in your application when upgrading to version 3.0 of the driver.
# @since 2.4.0
#
# source://mongo//lib/mongo/error/unsupported_collation.rb#30
class Mongo::Error::UnsupportedCollation < ::Mongo::Error::UnsupportedOption
  # Create the new exception.
  #
  # @example Create the new exception.
  #   Mongo::Error::UnsupportedCollation.new
  # @return [UnsupportedCollation] a new instance of UnsupportedCollation
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/error/unsupported_collation.rb#54
  def initialize(message = T.unsafe(nil)); end
end

# The default error message describing that collations is not supported.
#
# @return [String] A default message describing that collations is not supported by the server.
# @since 2.4.0
#
# source://mongo//lib/mongo/error/unsupported_collation.rb#37
Mongo::Error::UnsupportedCollation::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# The error message describing that collations cannot be used when write concern is unacknowledged.
#
# @return [String] A message describing that collations cannot be used when write concern is unacknowledged.
# @since 2.4.0
#
# source://mongo//lib/mongo/error/unsupported_collation.rb#45
Mongo::Error::UnsupportedCollation::UNACKNOWLEDGED_WRITES_MESSAGE = T.let(T.unsafe(nil), String)

# Raised when the driver does not support the complete set of server
# features.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/error/unsupported_features.rb#25
class Mongo::Error::UnsupportedFeatures < ::Mongo::Error; end

# Raised when trying to get a message type from the registry that doesn't exist.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/error/unsupported_message_type.rb#24
class Mongo::Error::UnsupportedMessageType < ::Mongo::Error; end

# Raised if an unsupported option is specified for an operation.
#
# source://mongo//lib/mongo/error/unsupported_option.rb#22
class Mongo::Error::UnsupportedOption < ::Mongo::Error
  class << self
    # Raise an error about an unsupported allow_disk_use option.
    #
    # @api private
    # @return [Mongo::Error::UnsupportedOption] An error with a default
    #   error message.
    #
    # source://mongo//lib/mongo/error/unsupported_option.rb#89
    def allow_disk_use_error; end

    # Raise an error about an unsupported commit_quorum option.
    #
    # @api private
    # @return [Mongo::Error::UnsupportedOption] An error with a default
    #   error message.
    #
    # source://mongo//lib/mongo/error/unsupported_option.rb#99
    def commit_quorum_error; end

    # Raise an error about an unsupported hint option.
    #
    # @api private
    # @option options
    # @param options [Hash] a customizable set of options
    # @return [Mongo::Error::UnsupportedOption] An error with a default
    #   error message.
    #
    # source://mongo//lib/mongo/error/unsupported_option.rb#71
    def hint_error(**options); end
  end
end

# The error message provided when the user passes the allow_disk_use
# option to a find operation against a server that does not support the
# allow_disk_use operation and does not provide option validation.
#
# @api private
#
# source://mongo//lib/mongo/error/unsupported_option.rb#46
Mongo::Error::UnsupportedOption::ALLOW_DISK_USE_MESSAGE = T.let(T.unsafe(nil), String)

# The error message provided when the user passes the commit_quorum option
# to a createIndexes operation against a server that does not support
# that option.
#
# @api private
#
# source://mongo//lib/mongo/error/unsupported_option.rb#56
Mongo::Error::UnsupportedOption::COMMIT_QUORUM_MESSAGE = T.let(T.unsafe(nil), String)

# The error message provided when the user passes the hint option to
# a write operation against a server that does not support the hint
# option and does not provide option validation.
#
# @api private
#
# source://mongo//lib/mongo/error/unsupported_option.rb#28
Mongo::Error::UnsupportedOption::HINT_MESSAGE = T.let(T.unsafe(nil), String)

# The error message provided when the user passes the hint option to
# an unacknowledged write operation.
#
# @api private
#
# source://mongo//lib/mongo/error/unsupported_option.rb#37
Mongo::Error::UnsupportedOption::UNACKNOWLEDGED_HINT_MESSAGE = T.let(T.unsafe(nil), String)

# The constant for a write concern error.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#62
Mongo::Error::WRITE_CONCERN_ERROR = T.let(T.unsafe(nil), String)

# The constant for write concern errors.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/error.rb#68
Mongo::Error::WRITE_CONCERN_ERRORS = T.let(T.unsafe(nil), String)

# The constant for the writeErrors array.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/error.rb#56
Mongo::Error::WRITE_ERRORS = T.let(T.unsafe(nil), String)

# A module signifying the error is always write retryable.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/error/write_retryable.rb#24
module Mongo::Error::WriteRetryable
  # @return [Boolean]
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/error/write_retryable.rb#25
  def write_retryable?; end
end

# source://mongo//lib/mongo/event.rb#19
module Mongo::Event; end

# Base class for all events.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/event/base.rb#24
class Mongo::Event::Base
  # Returns a concise yet useful summary of the event.
  # Meant to be overridden in derived classes.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/event/base.rb#34
  def summary; end

  private

  # @since 2.6.0
  #
  # source://mongo//lib/mongo/event/base.rb#40
  def short_class_name; end
end

# When a server is to be removed from a cluster.
#
# @deprecated Will be removed in 3.0
# @since 2.0.6
#
# source://mongo//lib/mongo/event.rb#43
Mongo::Event::DESCRIPTION_CHANGED = T.let(T.unsafe(nil), String)

# The queue of events getting processed in the client.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/event/listeners.rb#24
class Mongo::Event::Listeners
  # Initialize the event listeners.
  #
  # @example Initialize the event listeners.
  #   Listeners.new
  # @return [Listeners] a new instance of Listeners
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/listeners.rb#32
  def initialize; end

  # Add an event listener for the provided event.
  #
  # @example Add an event listener
  #   publisher.add_listener("my_event", listener)
  # @param event [String] The event to listen for.
  # @param listener [Object] The event listener.
  # @return [Array<Object>] The listeners for the event.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/listeners.rb#47
  def add_listener(event, listener); end

  # Get the listeners for a specific event.
  #
  # @example Get the listeners.
  #   publisher.listeners_for("test")
  # @param event [String] The event name.
  # @return [Array<Object>] The listeners.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/listeners.rb#61
  def listeners_for(event); end
end

# When a server is discovered to be a member of a topology.
#
# @deprecated Will be removed in 3.0
# @since 2.4.0
#
# source://mongo//lib/mongo/event.rb#37
Mongo::Event::MEMBER_DISCOVERED = T.let(T.unsafe(nil), String)

# When a server is elected primary.
#
# @deprecated Will be removed in 3.0
# @since 2.0.0
#
# source://mongo//lib/mongo/event.rb#31
Mongo::Event::PRIMARY_ELECTED = T.let(T.unsafe(nil), String)

# This module is included for objects that need to publish events.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/event/publisher.rb#24
module Mongo::Event::Publisher
  # @return [Event::Listeners] event_listeners The listeners.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/publisher.rb#27
  def event_listeners; end

  # Publish the provided event.
  #
  # @example Publish an event.
  #   publisher.publish("my_event", "payload")
  # @param event [String] The event to publish.
  # @param args [Array<Object>] The objects to pass to the listeners.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/publisher.rb#38
  def publish(event, *args); end
end

# When a standalone is discovered.
#
# @deprecated Will be removed in 3.0
# @since 2.0.6
#
# source://mongo//lib/mongo/event.rb#25
Mongo::Event::STANDALONE_DISCOVERED = T.let(T.unsafe(nil), String)

# Adds convenience methods for adding listeners to event publishers.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/event/subscriber.rb#24
module Mongo::Event::Subscriber
  # @return [Event::Listeners] event_listeners The listeners.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/subscriber.rb#27
  def event_listeners; end

  # Subscribe to the provided event.
  #
  # @example Subscribe to the event.
  #   subscriber.subscribe_to('test', listener)
  # @param event [String] The event.
  # @param listener [Object] The event listener.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/event/subscriber.rb#38
  def subscribe_to(event, listener); end
end

# source://mongo//lib/mongo/grid/file/chunk.rb#19
module Mongo::Grid; end

# Represents a view of the GridFS in the database.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/fs_bucket.rb#24
class Mongo::Grid::FSBucket
  extend ::Forwardable

  # Create the GridFS.
  #
  # @example Create the GridFS.
  #   Grid::FSBucket.new(database)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param database [Database] The database the files reside in.
  # @param options [Hash] The GridFS options.
  # @return [FSBucket] a new instance of FSBucket
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#70
  def initialize(database, options = T.unsafe(nil)); end

  # @return [Collection] chunks_collection The chunks collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#88
  def chunks_collection; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # @return [Database] database The database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#93
  def database; end

  # Remove a single file, identified by its id from the GridFS.
  #
  # @example Remove a file from the GridFS.
  #   fs.delete(id)
  # @param id [BSON::ObjectId, Object] The id of the file to remove.
  # @raise [Error::FileNotFound] If the file is not found.
  # @return [Result] The result of the remove.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#220
  def delete(id); end

  # Remove a single file from the GridFS.
  #
  # @example Remove a file from the GridFS.
  #   fs.delete_one(file)
  # @param file [Grid::File] The file to remove.
  # @return [Result] The result of the remove.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#204
  def delete_one(file); end

  # Downloads the contents of the file specified by id and writes them to
  # the destination io object.
  #
  # @example Download the file and write it to the io object.
  #   fs.download_to_stream(id, io)
  # @param id [BSON::ObjectId, Object] The id of the file to read.
  # @param io [IO] The io object to write to.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#266
  def download_to_stream(id, io); end

  # Downloads the contents of the stored file specified by filename and by the
  # revision in options and writes the contents to the destination io object.
  #
  # Revision numbers are defined as follows:
  # 0 = the original stored file
  # 1 = the first revision
  # 2 = the second revision
  # etc…
  # -2 = the second most recent revision
  # -1 = the most recent revision
  #
  # # @example Download the original file.
  #   fs.download_to_stream_by_name('some-file.txt', io, revision: 0)
  #
  # @example Download the most recent revision.
  #   fs.download_to_stream_by_name('some-file.txt', io)
  # @example Download the second revision of the stored file.
  #   fs.download_to_stream_by_name('some-file.txt', io, revision: 2)
  # @option opts
  # @param filename [String] The file's name.
  # @param io [IO] The io object to write to.
  # @param opts [Hash] Options for the download.
  # @raise [Error::FileNotFound] If the file is not found.
  # @raise [Error::InvalidFileRevision] If the requested revision is not found for the file.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#359
  def download_to_stream_by_name(filename, io, opts = T.unsafe(nil)); end

  # @return [Collection] files_collection The files collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#98
  def files_collection; end

  # Find files collection documents matching a given selector.
  #
  # @example Find files collection documents by a filename.
  #   fs.find(filename: 'file.txt')
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param selector [Hash] The selector to use in the find.
  # @param options [Hash] The options for the find.
  # @return [CollectionView] The collection view.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#134
  def find(selector = T.unsafe(nil), options = T.unsafe(nil)); end

  # Find a file in the GridFS.
  #
  # @deprecated Please use #find instead with a limit of -1.
  #   Will be removed in version 3.0.
  # @example Find a file by its id.
  #   fs.find_one(_id: id)
  # @example Find a file by its filename.
  #   fs.find_one(filename: 'test.txt')
  # @param selector [Hash] The selector.
  # @return [Grid::File] The file.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#155
  def find_one(selector = T.unsafe(nil)); end

  # Insert a single file into the GridFS.
  #
  # @deprecated Please use #upload_from_stream or #open_upload_stream instead.
  #   Will be removed in version 3.0.
  # @example Insert a single file.
  #   fs.insert_one(file)
  # @param file [Grid::File] The file to insert.
  # @return [BSON::ObjectId] The file id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#175
  def insert_one(file); end

  # Opens a stream from which a file can be downloaded, specified by id.
  #
  # @example Open a stream from which a file can be downloaded.
  #   fs.open_download_stream(id)
  # @option options
  # @param id [BSON::ObjectId, Object] The id of the file to read.
  # @param options [Hash] The options.
  # @return [Stream::Read] The stream to read from.
  # @since 2.1.0
  # @yieldparam The [Hash] read stream.
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#243
  def open_download_stream(id, options = T.unsafe(nil)); end

  # Opens a stream from which the application can read the contents of the stored file
  # specified by filename and the revision in options.
  #
  # Revision numbers are defined as follows:
  # 0 = the original stored file
  # 1 = the first revision
  # 2 = the second revision
  # etc…
  # -2 = the second most recent revision
  # -1 = the most recent revision
  #
  # # @example Open a stream to download the original file.
  #   fs.open_download_stream_by_name('some-file.txt', revision: 0)
  #
  # @example Open a stream to download the most recent revision.
  #   fs.open_download_stream_by_name('some-file.txt')
  # @example Open a stream to download the second revision of the stored file.
  #   fs.open_download_stream_by_name('some-file.txt', revision: 2)
  # @option opts
  # @param filename [String] The file's name.
  # @param opts [Hash] Options for the download.
  # @raise [Error::FileNotFound] If the file is not found.
  # @raise [Error::InvalidFileRevision] If the requested revision is not found for the file.
  # @return [Stream::Read] The stream to read from.
  # @since 2.1.0
  # @yieldparam The [Hash] read stream.
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#308
  def open_download_stream_by_name(filename, opts = T.unsafe(nil), &block); end

  # Opens an upload stream to GridFS to which the contents of a file or
  # blob can be written.
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param filename [String] The name of the file in GridFS.
  # @param opts [Hash] The options for the write stream.
  # @param options [Hash] a customizable set of options
  # @return [Stream::Write] The write stream.
  # @since 2.1.0
  # @yieldparam The [Hash] write stream.
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#389
  def open_upload_stream(filename, opts = T.unsafe(nil)); end

  # @return [Hash] options The FSBucket options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#103
  def options; end

  # Get the prefix for the GridFS
  #
  # @example Get the prefix.
  #   fs.prefix
  # @return [String] The GridFS prefix.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#190
  def prefix; end

  # Get the read preference.
  #
  # @note This method always returns a BSON::Document instance, even though
  #   the FSBucket constructor specifies the type of :read as a Hash, not
  #   as a BSON::Document.
  # @return [BSON::Document] The read preference.
  #   The document may have the following fields:
  #   - *:mode* -- read preference specified as a symbol; valid values are
  #   *:primary*, *:primary_preferred*, *:secondary*, *:secondary_preferred*
  #   and *:nearest*.
  #   - *:tag_sets* -- an array of hashes.
  #   - *:local_threshold*.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#460
  def read_preference; end

  # Uploads a user file to a GridFS bucket.
  # Reads the contents of the user file from the source stream and uploads it as chunks in the
  # chunks collection. After all the chunks have been uploaded, it creates a files collection
  # document for the filename in the files collection.
  #
  # @example Upload a file to the GridFS bucket.
  #   fs.upload_from_stream('a-file.txt', file)
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param filename [String] The filename of the file to upload.
  # @param io [IO] The source io stream to upload from.
  # @param opts [Hash] The options for the write stream.
  # @param options [Hash] a customizable set of options
  # @return [BSON::ObjectId] The ObjectId file id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#430
  def upload_from_stream(filename, io, opts = T.unsafe(nil)); end

  # Get the write concern.
  #
  # @example Get the write concern.
  #   stream.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#479
  def write_concern; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#501
  def chunks_name; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#519
  def create_index_if_missing!(collection, index_spec, options = T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#509
  def ensure_indexes!; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#505
  def files_name; end

  # @option opts
  # @param opts [Hash] The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#493
  def read_stream(id, **opts); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/fs_bucket.rb#497
  def write_stream(filename, **opts); end
end

# The specification for the chunks collection index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/fs_bucket.rb#35
Mongo::Grid::FSBucket::CHUNKS_INDEX = T.let(T.unsafe(nil), Hash)

# The default root prefix.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/fs_bucket.rb#30
Mongo::Grid::FSBucket::DEFAULT_ROOT = T.let(T.unsafe(nil), String)

# The specification for the files collection index.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/fs_bucket.rb#40
Mongo::Grid::FSBucket::FILES_INDEX = T.let(T.unsafe(nil), Hash)

# A stream that reads and writes files from/to the FSBucket.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream/read.rb#22
module Mongo::Grid::FSBucket::Stream
  extend ::Mongo::Grid::FSBucket::Stream

  # Get a stream for reading/writing files from/to the FSBucket.
  #
  # @example Get a stream.
  #   FSBucket::Stream.get(fs, FSBucket::READ_MODE, options)
  # @param fs [FSBucket] The GridFS bucket object.
  # @param mode [FSBucket::READ_MODE, FSBucket::WRITE_MODE] The stream mode.
  # @param options [Hash] The stream options.
  # @return [Stream::Read, Stream::Write] The stream object.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream.rb#61
  def get(fs, mode, options = T.unsafe(nil)); end
end

# Mapping from mode to stream class.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream.rb#44
Mongo::Grid::FSBucket::Stream::MODE_MAP = T.let(T.unsafe(nil), Hash)

# The symbol for opening a read stream.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream.rb#34
Mongo::Grid::FSBucket::Stream::READ_MODE = T.let(T.unsafe(nil), Symbol)

# A stream that reads files from the FSBucket.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream/read.rb#26
class Mongo::Grid::FSBucket::Stream::Read
  include ::Enumerable

  # Create a stream for reading files from the FSBucket.
  #
  # @example Create the stream.
  #   Stream::Read.new(fs, options)
  # @option options
  # @param fs [FSBucket] The GridFS bucket object.
  # @param options [Hash] The read stream options.
  # @return [Read] a new instance of Read
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#56
  def initialize(fs, options); end

  # Close the read stream.
  #
  # If the stream is already closed, this method does nothing.
  #
  # @example Close the stream.
  #   stream.close
  # @return [BSON::ObjectId, Object] The file id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#125
  def close; end

  # Is the stream closed.
  #
  # @example Is the stream closd.
  #   stream.closed?
  # @return [true, false] Whether the stream is closed.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#141
  def closed?; end

  # Iterate through chunk data streamed from the FSBucket.
  #
  # @example Iterate through the chunk data.
  #   stream.each do |data|
  #   buffer << data
  #   end
  # @raise [Error::MissingFileChunk] If a chunk is found out of sequence.
  # @return [Enumerator] The enumerator.
  # @since 2.1.0
  # @yieldparam Each [Hash] chunk of file data.
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#78
  def each; end

  # @return [BSON::ObjectId, Object] file_id The id of the file being read.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#42
  def file_id; end

  # Get the files collection file information document for the file
  # being read.
  #
  # @note The file information is cached in the stream. Subsequent
  #   calls to file_info will return the same information that the
  #   first call returned, and will not query the database again.
  # @return [File::Info] The file information object.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#179
  def file_info; end

  # @return [FSBucket] fs The fs bucket from which this stream reads.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#32
  def fs; end

  # @return [Hash] options The stream options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#37
  def options; end

  # Read all file data.
  #
  # @example Read the file data.
  #   stream.read
  # @raise [Error::MissingFileChunk] If a chunk is found out of sequence.
  # @return [String] The file data.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#111
  def read; end

  # Get the read preference.
  #
  # @note This method always returns a BSON::Document instance, even
  #   though the constructor specifies the type of :read as a Hash, not
  #   as a BSON::Document.
  # @return [BSON::Document] The read preference.
  #   The document may have the following fields:
  #   - *:mode* -- read preference specified as a symbol; valid values are
  #   *:primary*, *:primary_preferred*, *:secondary*, *:secondary_preferred*
  #   and *:nearest*.
  #   - *:tag_sets* -- an array of hashes.
  #   - *:local_threshold*.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#158
  def read_preference; end

  private

  # @raise [Error::FileNotFound]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#196
  def ensure_file_info!; end

  # @raise [Error::ClosedStream]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#192
  def ensure_open!; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#200
  def ensure_readable!; end

  # @raise [Error::UnexpectedChunkLength]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#222
  def raise_unexpected_chunk_length!(chunk); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#217
  def validate!(index, num_chunks, chunk, length_read); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#227
  def validate_length!(index, num_chunks, chunk, length_read); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#240
  def validate_n!(index, chunk); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/read.rb#205
  def view; end
end

# The symbol for opening a write stream.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream.rb#39
Mongo::Grid::FSBucket::Stream::WRITE_MODE = T.let(T.unsafe(nil), Symbol)

# A stream that writes files to the FSBucket.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/grid/stream/write.rb#26
class Mongo::Grid::FSBucket::Stream::Write
  # Create a stream for writing files to the FSBucket.
  #
  # @example Create the stream.
  #   Stream::Write.new(fs, options)
  # @option options
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option options
  # @option options
  # @param fs [FSBucket] The GridFS bucket object.
  # @param options [Hash] The write stream options.
  # @param opts [Hash] a customizable set of options
  # @return [Write] a new instance of Write
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#70
  def initialize(fs, options); end

  # Abort the upload by deleting all chunks already inserted.
  #
  # @example Abort the write operation.
  #   stream.abort
  # @return [true] True if the operation was aborted and the stream is closed.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#168
  def abort; end

  # Close the write stream.
  #
  # @example Close the stream.
  #   stream.close
  # @raise [Error::ClosedStream] If the stream is already closed.
  # @return [BSON::ObjectId, Object] The file id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#124
  def close; end

  # Is the stream closed.
  #
  # @example Is the stream closed.
  #   stream.closed?
  # @return [true, false] Whether the stream is closed.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#156
  def closed?; end

  # @return [Object] file_id The id of the file being uploaded.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#36
  def file_id; end

  # @return [String] filename The name of the file being uploaded.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#41
  def filename; end

  # @return [FSBucket] fs The fs bucket to which this stream writes.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#31
  def fs; end

  # @return [Hash] options The write stream options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#46
  def options; end

  # Write to the GridFS bucket from the source stream or a string.
  #
  # @example Write to GridFS.
  #   stream.write(io)
  # @param io [String | IO] The string or IO object to upload from.
  # @return [Stream::Write] self The write stream itself.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#98
  def write(io); end

  # Get the write concern used when uploading.
  #
  # @example Get the write concern.
  #   stream.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#140
  def write_concern; end

  private

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#175
  def chunks_collection; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#202
  def ensure_indexes!; end

  # @raise [Error::ClosedStream]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#206
  def ensure_open!; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#197
  def file_info; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#179
  def files_collection; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#193
  def update_length; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/grid/stream/write.rb#183
  def with_write_concern(collection); end
end

# A representation of a file in the database.
#
# @deprecated Please use the 'stream' API on a FSBucket instead.
#   Will be removed in driver version 3.0.
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/chunk.rb#20
class Mongo::Grid::File
  extend ::Forwardable

  # Initialize the file.
  #
  # @example Create the file.
  #   Grid::File.new(data, :filename => 'test.txt')
  # @option options
  # @option options
  # @option options
  # @option options
  # @option opts
  # @param data [IO, String, Array<BSON::Document>] The file object, file
  #   contents or chunks.
  # @param options [BSON::Document, Hash] The info options.
  # @param opts [Hash] a customizable set of options
  # @return [File] a new instance of File
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#76
  def initialize(data, options = T.unsafe(nil)); end

  # Check equality of files.
  #
  # @example Check the equality of files.
  #   file == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#52
  def ==(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def chunk_size(*args, **_arg1, &block); end

  # @return [Array<Chunk>] chunks The file chunks.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#37
  def chunks; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def content_type(*args, **_arg1, &block); end

  # Joins chunks into a string.
  #
  # @return [String] The raw data for the file.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#87
  def data; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def filename(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def id(*args, **_arg1, &block); end

  # @return [File::Info] info The file information.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#40
  def info; end

  # Gets a pretty inspection of the file.
  #
  # @example Get the file inspection.
  #   file.inspect
  # @return [String] The file inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#99
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def md5(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def upload_date(*args, **_arg1, &block); end

  private

  # @note If we have provided an array of BSON::Documents to initialize
  #   with, we have an array of chunk documents and need to create the
  #   chunk objects and assemble the data. If we have an IO object, then
  #   it's the original file data and we must split it into chunks and set
  #   the original data itself.
  # @param value [IO, String, Array<BSON::Document>] The file object,
  #   file contents or chunk documents.
  # @return [Array<Grid::File::Chunk>] Array of chunks.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file.rb#115
  def initialize_chunks!(value); end
end

# Encapsulates behavior around GridFS chunks of file data.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/chunk.rb#25
class Mongo::Grid::File::Chunk
  # Create the new chunk.
  #
  # @example Create the chunk.
  #   Chunk.new(document)
  # @param document [BSON::Document] The document to create the chunk
  #   from.
  # @return [Chunk] a new instance of Chunk
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#125
  def initialize(document); end

  # Check chunk equality.
  #
  # @example Check chunk equality.
  #   chunk == other
  # @param other [Object] The object ot compare to.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#51
  def ==(other); end

  # Get the BSON type for a chunk document.
  #
  # @example Get the BSON type.
  #   chunk.bson_type
  # @return [Integer] The BSON type.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#64
  def bson_type; end

  # Get the chunk data.
  #
  # @example Get the chunk data.
  #   chunk.data
  # @return [BSON::Binary] The chunk data.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#76
  def data; end

  # @return [BSON::Document] document The document to store for the
  #   chunk.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#39
  def document; end

  # Get the files id.
  #
  # @example Get the files id.
  #   chunk.files_id
  # @return [BSON::ObjectId] The files id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#100
  def files_id; end

  # Get the chunk id.
  #
  # @example Get the chunk id.
  #   chunk.id
  # @return [BSON::ObjectId] The chunk id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#88
  def id; end

  # Get the chunk position.
  #
  # @example Get the chunk position.
  #   chunk.n
  # @return [Integer] The chunk position.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#112
  def n; end

  # Conver the chunk to BSON for storage.
  #
  # @example Convert the chunk to BSON.
  #   chunk.to_bson
  # @param buffer [BSON::ByteBuffer] The encoded BSON buffer to append to.
  # @param validating_keys [true, false] Whether keys should be validated when serializing.
  #   This option is deprecated and will not be used. It will removed in version 3.0.
  # @return [String] The raw BSON data.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/chunk.rb#141
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # Takes an array of chunks and assembles them back into the full
    # piece of raw data.
    #
    # @api private
    # @example Assemble the chunks.
    #   Chunk.assemble(chunks)
    # @param chunks [Array<Chunk>] The chunks.
    # @return [String] The assembled data.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/grid/file/chunk.rb#159
    def assemble(chunks); end

    # Split the provided data into multiple chunks.
    #
    # @api private
    # @example Split the data into chunks.
    #   Chunks.split(data)
    # @param io [String, IO] The raw bytes.
    # @param file_info [File::Info] The files collection file doc.
    # @param offset [Integer] The offset.
    # @return [Array<Chunk>] The chunks of the data.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/grid/file/chunk.rb#176
    def split(io, file_info, offset = T.unsafe(nil)); end
  end
end

# Name of the chunks collection.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/chunk.rb#30
Mongo::Grid::File::Chunk::COLLECTION = T.let(T.unsafe(nil), String)

# Default size for chunks of data.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/chunk.rb#35
Mongo::Grid::File::Chunk::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)

# Encapsulates behavior around GridFS files collection file document.
#
# @deprecated Please use the 'stream' API on a FSBucket instead.
#   Will be removed in driver version 3.0.
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/info.rb#28
class Mongo::Grid::File::Info
  # Create the new file information document.
  #
  # @example Create the new file information document.
  #   Info.new(:filename => 'test.txt')
  # @param document [BSON::Document] The document to create from.
  # @return [Info] a new instance of Info
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#139
  def initialize(document); end

  # Is this file information document equal to another?
  #
  # @example Check file information document equality.
  #   file_info == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#68
  def ==(other); end

  # Get the BSON type for a files information document.
  #
  # @example Get the BSON type.
  #   file_info.bson_type
  # @return [Integer] The BSON type.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#81
  def bson_type; end

  # Get the file chunk size.
  #
  # @example Get the chunk size.
  #   file_info.chunk_size
  # @return [Integer] The chunksize in bytes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#93
  def chunk_size; end

  # Get the file information content type.
  #
  # @example Get the content type.
  #   file_info.content_type
  # @return [String] The content type.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#105
  def content_type; end

  # @return [BSON::Document] document The files collection document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#56
  def document; end

  # Get the filename from the file information.
  #
  # @example Get the filename.
  #   file_info.filename
  # @return [String] The filename.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#115
  def filename; end

  # Get the file id from the file information.
  #
  # @example Get the file id.
  #   file_info.id
  # @return [BSON::ObjectId] The file id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#127
  def id; end

  # Get a readable inspection for the object.
  #
  # @example Inspect the file information.
  #   file_info.inspect
  # @return [String] The nice inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#158
  def inspect; end

  # Get the length of the document in bytes.
  #
  # @example Get the file length from the file information document.
  #   file_info.length
  # @return [Integer] The file length.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#171
  def length; end

  # Get the md5 hash.
  #
  # @deprecated as of 2.6.0
  # @example Get the md5 hash.
  #   file_info.md5
  # @return [String] The md5 hash as a string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#198
  def md5; end

  # Get the additional metadata from the file information document.
  #
  # @example Get additional metadata.
  #   file_info.metadata
  # @return [String] The additional metadata from file information document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#184
  def metadata; end

  # Get the length of the document in bytes.
  #
  # @example Get the file length from the file information document.
  #   file_info.length
  # @return [Integer] The file length.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#171
  def size; end

  # Convert the file information document to BSON for storage.
  #
  # @example Convert the file information document to BSON.
  #   file_info.to_bson
  # @note If no md5 exists in the file information document (it was loaded
  #   from the server and is not a new file) then we digest the md5 and set it.
  # @param buffer [BSON::ByteBuffer] The encoded BSON buffer to append to.
  # @param validating_keys [true, false] Whether keys should be validated when serializing.
  #   This option is deprecated and will not be used. It will removed in version 3.0.
  # @return [String] The raw BSON data.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#236
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Update the md5 hash if there is one.
  #
  # It will be removed when md5 support is deprecated entirely.
  #
  # @deprecated as of 2.6.0
  # @example Update the md5 hash.
  #   file_info.update_md5(bytes)
  # @note This method is transitional and is provided for backwards compatibility.
  # @param bytes [String] The bytes to use to update the digest.
  # @return [Digest::MD5] The md5 hash object.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#217
  def update_md5(bytes); end

  # Get the upload date.
  #
  # @example Get the upload date.
  #   file_info.upload_date
  # @return [Time] The upload date.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#251
  def upload_date; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/grid/file/info.rb#257
  def default_document; end
end

# Name of the files collection.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/info.rb#33
Mongo::Grid::File::Info::COLLECTION = T.let(T.unsafe(nil), String)

# Default content type for stored files.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/info.rb#53
Mongo::Grid::File::Info::DEFAULT_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# Mappings of user supplied fields to db specification.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/grid/file/info.rb#38
Mongo::Grid::File::Info::MAPPINGS = T.let(T.unsafe(nil), Hash)

# This module abstracts the functionality for generating sequential
# unique integer IDs for instances of the class. It defines the method
# #next_id on the class that includes it. The implementation ensures that
# the IDs will be unique even when called from multiple threads.
#
# Classes which include Id should _not_ access `@@id` or `@@id_lock`
# directly; instead, they should call `#next_id` in `#initialize` and save
# the result in the instance being created.
#
# @api private
# @example Include the Id module.
#   class Foo
#   include Mongo::Id
#   end
#
#   f = Foo.new
#   foo.next_id # => 1
#   foo.next_id # => 2
# @example Save the ID in the instance of the including class.
#   class Bar
#   include Mongo::Id
#
#   attr_reader :id
#
#   def initialize
#   @id = self.class.next_id
#   end
#   end
#
#   a = Bar.new
#   a.id # => 1
#   b = Bar.new
#   b.id # => 2
# @since 2.7.0
#
# source://mongo//lib/mongo/id.rb#55
module Mongo::Id
  class << self
    # @api private
    # @since 2.7.0
    #
    # source://mongo//lib/mongo/id.rb#56
    def included(klass); end
  end
end

# Contains constants for indexing purposes.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index/view.rb#19
module Mongo::Index; end

# Wildcard constant for all.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/index.rb#30
Mongo::Index::ALL = T.let(T.unsafe(nil), String)

# Specify ascending order for an index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#35
Mongo::Index::ASCENDING = T.let(T.unsafe(nil), Integer)

# Constant for the indexes collection.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#71
Mongo::Index::COLLECTION = T.let(T.unsafe(nil), String)

# Specify descending order for an index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#40
Mongo::Index::DESCENDING = T.let(T.unsafe(nil), Integer)

# Specify a 2d Geo index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#45
Mongo::Index::GEO2D = T.let(T.unsafe(nil), String)

# Specify a 2d sphere Geo index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#50
Mongo::Index::GEO2DSPHERE = T.let(T.unsafe(nil), String)

# Specify a geoHaystack index.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#56
Mongo::Index::GEOHAYSTACK = T.let(T.unsafe(nil), String)

# Specify a hashed index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#66
Mongo::Index::HASHED = T.let(T.unsafe(nil), String)

# Encodes a text index.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index.rb#61
Mongo::Index::TEXT = T.let(T.unsafe(nil), String)

# A class representing a view of indexes.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index/view.rb#24
class Mongo::Index::View
  include ::Enumerable
  include ::Mongo::Retryable
  extend ::Forwardable

  # Create the new index view.
  #
  # @example Create the new index view.
  #   View::Index.new(collection)
  # @option options
  # @param collection [Collection] The collection.
  # @param options [Hash] Options for getting a list of indexes.
  #   Only relevant for when the listIndexes command is used with server
  #   versions >=2.8.
  # @return [View] a new instance of View
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#293
  def initialize(collection, options = T.unsafe(nil)); end

  # @return [Integer] batch_size The size of the batch of results
  #   when sending the listIndexes command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#34
  def batch_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # @return [Collection] collection The indexes collection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#30
  def collection; end

  # Creates multiple indexes on the collection.
  #
  # @example Create multiple indexes.
  #   view.create_many([
  #   { key: { name: 1 }, unique: true },
  #   { key: { age: -1 }, background: true }
  #   ])
  # @example Create multiple indexes with options.
  #   view.create_many(
  #   { key: { name: 1 }, unique: true },
  #   { key: { age: -1 }, background: true },
  #   { commit_quorum: 'majority' }
  #   )
  # @note On MongoDB 3.0.0 and higher, the indexes will be created in
  #   parallel on the server.
  # @param models [Array<Hash>] The index specifications. Each model MUST
  #   include a :key option, except for the last item in the Array, which
  #   may be a Hash specifying options relevant to the createIndexes operation.
  #   The following options are accepted:
  #   - commit_quorum: Specify how many data-bearing members of a replica set,
  #   including the primary, must complete the index builds successfully
  #   before the primary marks the indexes as ready. Potential values are:
  #   - an integer from 0 to the number of members of the replica set
  #   - "majority" indicating that a majority of data bearing nodes must vote
  #   - "votingMembers" which means that all voting data bearing nodes must vote
  #   - session: The session to use.
  #   - comment: A user-provided comment to attach to this command.
  # @return [Result] The result of the command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#206
  def create_many(*models); end

  # Creates an index on the collection.
  #
  # See the MongoDB documentation for a full list of supported options by server version.
  #
  # @example Create a unique index on the collection.
  #   view.create_one({ name: 1 }, { unique: true })
  # @note Note that the options listed may be subset of those available.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param keys [Hash] A hash of field name/direction pairs.
  # @param options [Hash] Options for this index.
  # @return [Result] The response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#157
  def create_one(keys, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def database(*args, **_arg1, &block); end

  # Drop all indexes on the collection.
  #
  # @example Drop all indexes on the collection.
  #   view.drop_all
  # @option options
  # @param options [Hash] Options for this operation.
  # @return [Result] The response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#109
  def drop_all(options = T.unsafe(nil)); end

  # Drop an index by its name.
  #
  # @example Drop an index by its name.
  #   view.drop_one('name_1')
  # @option options
  # @param name [String] The name of the index.
  # @param options [Hash] Options for this operation.
  # @raise [Error::MultiIndexDrop]
  # @return [Result] The response.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#91
  def drop_one(name, options = T.unsafe(nil)); end

  # Iterate over all indexes for the collection.
  #
  # @example Get all the indexes.
  #   view.each do |index|
  #   ...
  #   end
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#265
  def each(&block); end

  # Convenience method for getting index information by a specific name or
  # spec.
  #
  # @example Get index information by name.
  #   view.get('name_1')
  # @example Get index information by the keys.
  #   view.get(name: 1)
  # @param keys_or_name [Hash, String] The index name or spec.
  # @return [Hash] The index information.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#251
  def get(keys_or_name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def next_primary(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_preference(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_concern(*args, **_arg1, &block); end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#301
  def drop_by_name(name, comment: T.unsafe(nil)); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#316
  def index_name(spec); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#320
  def indexes_spec(session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#330
  def initial_query_op(session); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#334
  def limit; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#336
  def normalize_keys(spec); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#341
  def normalize_models(models, server); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/index/view.rb#350
  def send_initial_query(server, session); end
end

# The index key field.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index/view.rb#42
Mongo::Index::View::KEY = T.let(T.unsafe(nil), String)

# The index name field.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index/view.rb#47
Mongo::Index::View::NAME = T.let(T.unsafe(nil), String)

# The mappings of Ruby index options to server options.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/index/view.rb#52
Mongo::Index::View::OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://mongo//lib/mongo/lint.rb#7
module Mongo::Lint
  private

  # Raises LintError if +obj+ is not of type +cls+.
  #
  # @api private
  #
  # source://mongo//lib/mongo/lint.rb#10
  def assert_type(obj, cls); end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/lint.rb#100
  def enabled?; end

  # @api private
  #
  # source://mongo//lib/mongo/lint.rb#38
  def validate_camel_case_read_preference(read_pref); end

  # @api private
  #
  # source://mongo//lib/mongo/lint.rb#48
  def validate_camel_case_read_preference_mode(mode); end

  # Validates the provided hash as a read concern object, per the
  # read/write concern specification
  # (https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern).
  #
  # This method also accepts nil as input for convenience.
  #
  # The read concern document as sent to the server may include
  # additional fields, for example afterClusterTime. These fields
  # are generated internally by the driver and cannot be specified by
  # the user (and would potentially lead to incorrect behavior if they
  # were specified by the user), hence this method prohibits them.
  #
  # @api private
  # @param read_concern [Hash] The read concern options hash,
  #   with the following optional keys:
  #   - *:level* -- the read preference level as a symbol; valid values
  #   are *:local*, *:majority*, and *:snapshot*
  # @raise [Error::LintError] If the validation failed.
  #
  # source://mongo//lib/mongo/lint.rb#76
  def validate_read_concern_option(read_concern); end

  # @api private
  #
  # source://mongo//lib/mongo/lint.rb#18
  def validate_underscore_read_preference(read_pref); end

  # @api private
  #
  # source://mongo//lib/mongo/lint.rb#28
  def validate_underscore_read_preference_mode(mode); end

  class << self
    # Raises LintError if +obj+ is not of type +cls+.
    #
    # @api private
    #
    # source://mongo//lib/mongo/lint.rb#10
    def assert_type(obj, cls); end

    # @api private
    # @return [Boolean]
    #
    # source://mongo//lib/mongo/lint.rb#100
    def enabled?; end

    # @api private
    #
    # source://mongo//lib/mongo/lint.rb#38
    def validate_camel_case_read_preference(read_pref); end

    # @api private
    #
    # source://mongo//lib/mongo/lint.rb#48
    def validate_camel_case_read_preference_mode(mode); end

    # Validates the provided hash as a read concern object, per the
    # read/write concern specification
    # (https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern).
    #
    # This method also accepts nil as input for convenience.
    #
    # The read concern document as sent to the server may include
    # additional fields, for example afterClusterTime. These fields
    # are generated internally by the driver and cannot be specified by
    # the user (and would potentially lead to incorrect behavior if they
    # were specified by the user), hence this method prohibits them.
    #
    # @api private
    # @param read_concern [Hash] The read concern options hash,
    #   with the following optional keys:
    #   - *:level* -- the read preference level as a symbol; valid values
    #   are *:local*, *:majority*, and *:snapshot*
    # @raise [Error::LintError] If the validation failed.
    #
    # source://mongo//lib/mongo/lint.rb#76
    def validate_read_concern_option(read_concern); end

    # @api private
    #
    # source://mongo//lib/mongo/lint.rb#18
    def validate_underscore_read_preference(read_pref); end

    # @api private
    #
    # source://mongo//lib/mongo/lint.rb#28
    def validate_underscore_read_preference_mode(mode); end
  end
end

# Allows objects to easily log operations.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/loggable.rb#23
module Mongo::Loggable
  # Convenience method to log debug messages with the standard prefix.
  #
  # @example Log a debug message.
  #   log_debug('Message')
  # @param message [String] The message to log.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#38
  def log_debug(message); end

  # Convenience method to log error messages with the standard prefix.
  #
  # @example Log a error message.
  #   log_error('Message')
  # @param message [String] The message to log.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#50
  def log_error(message); end

  # Convenience method to log fatal messages with the standard prefix.
  #
  # @example Log a fatal message.
  #   log_fatal('Message')
  # @param message [String] The message to log.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#62
  def log_fatal(message); end

  # Convenience method to log info messages with the standard prefix.
  #
  # @example Log a info message.
  #   log_info('Message')
  # @param message [String] The message to log.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#74
  def log_info(message); end

  # Convenience method to log warn messages with the standard prefix.
  #
  # @example Log a warn message.
  #   log_warn('Message')
  # @param message [String] The message to log.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#86
  def log_warn(message); end

  # Get the logger instance.
  #
  # @example Get the logger instance.
  #   loggable.logger
  # @return [Logger] The logger.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/loggable.rb#98
  def logger; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#108
  def _mongo_log_prefix; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/loggable.rb#104
  def format_message(message); end
end

# The standard MongoDB log prefix.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/loggable.rb#28
Mongo::Loggable::PREFIX = T.let(T.unsafe(nil), String)

# Provides ability to log messages.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/logger.rb#23
class Mongo::Logger
  class << self
    # Get the global logger level.
    #
    # @example Get the global logging level.
    #   Mongo::Logger.level
    # @return [Integer] The log level.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/logger.rb#62
    def level; end

    # Set the global logger level.
    #
    # @example Set the global logging level.
    #   Mongo::Logger.level == Logger::DEBUG
    # @return [Integer] The log level.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/logger.rb#74
    def level=(level); end

    # Get the wrapped logger. If none was set will return a default info
    # level logger.
    #
    # @example Get the wrapped logger.
    #   Mongo::Logger.logger
    # @return [::Logger] The wrapped logger.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/logger.rb#36
    def logger; end

    # Set the logger.
    #
    # @example Set the wrapped logger.
    #   Mongo::Logger.logger = logger
    # @param other [::Logger] The logger to set.
    # @return [::Logger] The wrapped logger.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/logger.rb#50
    def logger=(other); end

    private

    # @since 2.0.0
    #
    # source://mongo//lib/mongo/logger.rb#80
    def default_logger; end
  end
end

# The class defines behavior for the performance monitoring API.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring.rb#23
class Mongo::Monitoring
  include ::Mongo::Id
  include ::Mongo::Monitoring::Subscribable

  # Initialize the monitoring.
  #
  # @api private
  # @example Create the new monitoring.
  #   Monitoring.new(:monitoring => true)
  # @option options
  # @param options [Hash] Options. Client constructor forwards its
  #   options to Monitoring constructor, although Monitoring recognizes
  #   only a subset of the options recognized by Client.
  # @return [Monitoring] a new instance of Monitoring
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#220
  def initialize(options = T.unsafe(nil)); end

  # Publish a failed event.
  #
  # This method is used for event types which have the started/succeeded/failed
  # events in them, such as command and heartbeat events.
  #
  # @example Publish a failed event.
  #   monitoring.failed(COMMAND, event)
  # @param topic [String] The event topic.
  # @param event [Event] The event to publish.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#306
  def failed(topic, event); end

  # @api private
  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#245
  def monitoring?; end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#242
  def options; end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#311
  def publish_heartbeat(server, awaited: T.unsafe(nil)); end

  # Publish an event.
  #
  # This method is used for event types which only have a single event
  # in them.
  #
  # @param topic [String] The event topic.
  # @param event [Event] The event to publish.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring.rb#258
  def published(topic, event); end

  # Publish a started event.
  #
  # This method is used for event types which have the started/succeeded/failed
  # events in them, such as command and heartbeat events.
  #
  # @example Publish a started event.
  #   monitoring.started(COMMAND, event)
  # @param topic [String] The event topic.
  # @param event [Event] The event to publish.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#274
  def started(topic, event); end

  # Publish a succeeded event.
  #
  # This method is used for event types which have the started/succeeded/failed
  # events in them, such as command and heartbeat events.
  #
  # @example Publish a succeeded event.
  #   monitoring.succeeded(COMMAND, event)
  # @param topic [String] The event topic.
  # @param event [Event] The event to publish.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#290
  def succeeded(topic, event); end

  private

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#359
  def initialize_copy(original); end

  class << self
    # source://mongo//lib/mongo/id.rb#60
    def next_id; end

    # Used for generating unique operation ids to link events together.
    #
    # @example Get the next operation id.
    #   Monitoring.next_operation_id
    # @return [Integer] The next operation id.
    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring.rb#79
    def next_operation_id; end
  end
end

# The command topic.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring.rb#29
Mongo::Monitoring::COMMAND = T.let(T.unsafe(nil), String)

# The connection pool topic.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring.rb#34
Mongo::Monitoring::CONNECTION_POOL = T.let(T.unsafe(nil), String)

# Subscribes to CMAP events and logs them.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/cmap_log_subscriber.rb#24
class Mongo::Monitoring::CmapLogSubscriber
  include ::Mongo::Loggable

  # Create the new log subscriber.
  #
  # @example Create the log subscriber.
  #   CmapLogSubscriber.new
  # @option options
  # @param options [Hash] The options.
  # @return [CmapLogSubscriber] a new instance of CmapLogSubscriber
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/cmap_log_subscriber.rb#42
  def initialize(options = T.unsafe(nil)); end

  # @return [Hash] options The options.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/cmap_log_subscriber.rb#30
  def options; end

  # Handle a CMAP event.
  #
  # @param event [Event] The event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/cmap_log_subscriber.rb#51
  def published(event); end
end

# Subscribes to command events and logs them.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#24
class Mongo::Monitoring::CommandLogSubscriber
  include ::Mongo::Loggable

  # Create the new log subscriber.
  #
  # @example Create the log subscriber.
  #   CommandLogSubscriber.new
  # @option options
  # @param options [Hash] The options.
  # @return [CommandLogSubscriber] a new instance of CommandLogSubscriber
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#46
  def initialize(options = T.unsafe(nil)); end

  # Handle the command failed event.
  #
  # @example Handle the event.
  #   subscriber.failed(event)
  # @param event [CommandFailedEvent] The event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#91
  def failed(event); end

  # @return [Hash] options The options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#28
  def options; end

  # Handle the command started event.
  #
  # @example Handle the event.
  #   subscriber.started(event)
  # @param event [CommandStartedEvent] The event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#58
  def started(event); end

  # Handle the command succeeded event.
  #
  # @example Handle the event.
  #   subscriber.succeeded(event)
  # @param event [CommandSucceededEvent] The event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#77
  def succeeded(event); end

  private

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#99
  def format_command(args); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#107
  def prefix(event, connection_generation: T.unsafe(nil), connection_id: T.unsafe(nil), server_connection_id: T.unsafe(nil)); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#123
  def truncate(command); end

  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#127
  def truncating?; end
end

# Constant for the max number of characters to print when inspecting
# a query field.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/command_log_subscriber.rb#34
Mongo::Monitoring::CommandLogSubscriber::LOG_STRING_LIMIT = T.let(T.unsafe(nil), Integer)

# source://mongo//lib/mongo/monitoring/event/secure.rb#20
module Mongo::Monitoring::Event; end

# source://mongo//lib/mongo/monitoring/event/cmap/base.rb#21
module Mongo::Monitoring::Event::Cmap; end

# Base class for CMAP events.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/base.rb#26
class Mongo::Monitoring::Event::Cmap::Base < ::Mongo::Event::Base; end

# Event published when a connection is unable to be checked out of a pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionCheckOutFailed < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @param address [Address]
  # @param reason [Symbol]
  # @return [ConnectionCheckOutFailed] a new instance of ConnectionCheckOutFailed
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#67
  def initialize(address, reason); end

  # @return [Mongo::Address] address The address of the server the
  #   connection would have connected to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#52
  def address; end

  # @return [Symbol] reason The reason a connection was unable to be
  #   acquired.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#58
  def reason; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#80
  def summary; end
end

# @return [Symbol] CONNECTION_ERROR Indicates that the connection
#   check out failed due to an error encountered while setting up a
#   new connection.
# @since 2.10.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#46
Mongo::Monitoring::Event::Cmap::ConnectionCheckOutFailed::CONNECTION_ERROR = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] POOL_CLOSED Indicates that the connection check
#   out failed due to the pool already being closed.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#32
Mongo::Monitoring::Event::Cmap::ConnectionCheckOutFailed::POOL_CLOSED = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] TIMEOUT Indicates that the connection check out
#   failed due to the timeout being reached before a connection
#   became available.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_failed.rb#39
Mongo::Monitoring::Event::Cmap::ConnectionCheckOutFailed::TIMEOUT = T.let(T.unsafe(nil), Symbol)

# Event published when a thread begins attempting to check a connection out of a pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_started.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionCheckOutStarted < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @param address [Address]
  # @return [ConnectionCheckOutStarted] a new instance of ConnectionCheckOutStarted
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_started.rb#40
  def initialize(address); end

  # @return [Mongo::Address] address The address of the server that the connection will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_started.rb#32
  def address; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_check_out_started.rb#52
  def summary; end
end

# Event published when a connection is returned to a connection pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionCheckedIn < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ConnectionCheckedIn.new(address, id, pool)
  # @return [ConnectionCheckedIn] a new instance of ConnectionCheckedIn
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#52
  def initialize(address, id, pool); end

  # @return [Address] address The address of the server the connection was connected to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#31
  def address; end

  # @return [Integer] connection_id The ID of the connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#36
  def connection_id; end

  # was checked in to.
  #
  # @api experimental
  # @return [Mongo::Server::ConnectionPool] pool The pool that the connection
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#43
  def pool; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_in.rb#66
  def summary; end
end

# Event published when a connection is successfully checked out out of a pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionCheckedOut < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ConnectionCheckedOut.new(address, id, pool)
  # @return [ConnectionCheckedOut] a new instance of ConnectionCheckedOut
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#53
  def initialize(address, id, pool); end

  # @return [Mongo::Address] address The address of the server that the connection will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#32
  def address; end

  # @return [Integer] connection_id The ID of the connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#37
  def connection_id; end

  # was checked out from.
  #
  # @api experimental
  # @return [Mongo::Server::ConnectionPool] pool The pool that the connection
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#44
  def pool; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_checked_out.rb#67
  def summary; end
end

# Event published when a connection is closed.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionClosed < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ConnectionClosed.new(address, id, reason)
  # @return [ConnectionClosed] a new instance of ConnectionClosed
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#84
  def initialize(address, id, reason); end

  # @return [Mongo::Address] address The address of the server the pool's connections will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#75
  def address; end

  # @return [Integer] connection_id The ID of the connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#64
  def connection_id; end

  # @return [Symbol] reason The reason why the connection was closed.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#69
  def reason; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#98
  def summary; end
end

# @return [Symbol] ERROR Indicates that the connection was closed due to it experiencing
#   an error.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#42
Mongo::Monitoring::Event::Cmap::ConnectionClosed::ERROR = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] HANDSHAKE_FAILED Indicates that the connection was closed due to the
#   connection handshake failing.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#54
Mongo::Monitoring::Event::Cmap::ConnectionClosed::HANDSHAKE_FAILED = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] IDLE Indicates that the connection was closed due to it being idle.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#36
Mongo::Monitoring::Event::Cmap::ConnectionClosed::IDLE = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] POOL_CLOSED Indicates that the connection was closed due to the pool
#   already being closed.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#48
Mongo::Monitoring::Event::Cmap::ConnectionClosed::POOL_CLOSED = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] STALE Indicates that the connection was closed due to it being stale.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#31
Mongo::Monitoring::Event::Cmap::ConnectionClosed::STALE = T.let(T.unsafe(nil), Symbol)

# @return [Symbol] UNKNOWN Indicates that the connection was closed for an unknown reason.
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_closed.rb#59
Mongo::Monitoring::Event::Cmap::ConnectionClosed::UNKNOWN = T.let(T.unsafe(nil), Symbol)

# Event published when a connection is created.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_created.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionCreated < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ConnectionCreated.new(address, id)
  # @return [ConnectionCreated] a new instance of ConnectionCreated
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_created.rb#46
  def initialize(address, id); end

  # @return [Mongo::Address] address The address of the server the connection will connect
  #   to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_created.rb#32
  def address; end

  # @return [Integer] connection_id The ID of the connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_created.rb#37
  def connection_id; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_created.rb#59
  def summary; end
end

# Event published when a connection is ready to be used for operations.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/connection_ready.rb#26
class Mongo::Monitoring::Event::Cmap::ConnectionReady < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ConnectionReady.new(address, id)
  # @return [ConnectionReady] a new instance of ConnectionReady
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_ready.rb#46
  def initialize(address, id); end

  # @return [Mongo::Address] address The address of the server the connection is connected
  #   to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_ready.rb#32
  def address; end

  # @return [Integer] connection_id The ID of the connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_ready.rb#37
  def connection_id; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/connection_ready.rb#59
  def summary; end
end

# Event published when a connection pool is cleared.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#26
class Mongo::Monitoring::Event::Cmap::PoolCleared < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @param address [Address]
  # @param service_id [Object] The service id, if any.
  # @param interrupt_in_use_connections [true | false | nil] The
  #   interrupt_in_use_connections flag, if given.
  # @return [PoolCleared] a new instance of PoolCleared
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#48
  def initialize(address, service_id: T.unsafe(nil), interrupt_in_use_connections: T.unsafe(nil)); end

  # @return [Mongo::Address] address The address of the server the pool's connections will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#32
  def address; end

  # @return [Hash] options The options
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#38
  def options; end

  # @return [nil | Object] The service id, if any.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#35
  def service_id; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_cleared.rb#63
  def summary; end
end

# Event published when a connection pool is closed.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/pool_closed.rb#26
class Mongo::Monitoring::Event::Cmap::PoolClosed < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   PoolClosed.new(address, pool)
  # @return [PoolClosed] a new instance of PoolClosed
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_closed.rb#47
  def initialize(address, pool); end

  # @return [Mongo::Address] address The address of the server the pool's connections will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_closed.rb#32
  def address; end

  # @api experimental
  # @return [Mongo::Server::ConnectionPool] pool The pool that was closed.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_closed.rb#38
  def pool; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_closed.rb#60
  def summary; end
end

# Event published when a connection pool is created.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#26
class Mongo::Monitoring::Event::Cmap::PoolCreated < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   PoolCreated.new(address, options, pool)
  # @return [PoolCreated] a new instance of PoolCreated
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#53
  def initialize(address, options, pool); end

  # @return [Mongo::Address] address The address of the server the pool's connections will
  #   connect to.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#32
  def address; end

  # @return [Hash] options Options specified for pool creation.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#37
  def options; end

  # created.
  #
  # @api experimental
  # @return [Mongo::Server::ConnectionPool] pool The pool that was just
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#44
  def pool; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_created.rb#67
  def summary; end
end

# Event published when a connection pool is marked ready.
#
# source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#24
class Mongo::Monitoring::Event::Cmap::PoolReady < ::Mongo::Monitoring::Event::Cmap::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   PoolCreated.new(address, options, pool)
  # @return [PoolReady] a new instance of PoolReady
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#46
  def initialize(address, options, pool); end

  # @return [Mongo::Address] address The address of the server the pool's connections will
  #   connect to.
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#28
  def address; end

  # @return [Hash] options Options specified for pool creation.
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#31
  def options; end

  # created.
  #
  # @api experimental
  # @return [Mongo::Server::ConnectionPool] pool The pool that was just
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#37
  def pool; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  #
  # source://mongo//lib/mongo/monitoring/event/cmap/pool_ready.rb#59
  def summary; end
end

# Event that is fired when a command operation fails.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/event/command_failed.rb#25
class Mongo::Monitoring::Event::CommandFailed < ::Mongo::Event::Base
  include ::Mongo::Monitoring::Event::Secure

  # Create the new event.
  #
  # @api private
  # @example Create the event.
  # @param command_name [String] The name of the command.
  # @param database_name [String] The database_name name.
  # @param address [Server::Address] The server address.
  # @param request_id [Integer] The request id.
  # @param operation_id [Integer] The operation id.
  # @param message [String] The error message.
  # @param failure [BSON::Document] The error document, if any.
  # @param duration [Float] The duration the command took in seconds.
  # @param started_event [Monitoring::Event::CommandStarted] The corresponding
  #   started event.
  # @param service_id [Object] The service id, if any.
  # @return [CommandFailed] a new instance of CommandFailed
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#85
  def initialize(command_name, database_name, address, request_id, operation_id, message, failure, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @return [Server::Address] address The server address.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#29
  def address; end

  # @return [String] command_name The name of the command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#32
  def command_name; end

  # @return [String] database_name The name of the database_name.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#35
  def database_name; end

  # @return [Float] duration The duration of the command in seconds.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#38
  def duration; end

  # @return [BSON::Document] failure The error document, if present.
  #   This will only be filled out for errors communicated by a
  #   MongoDB server. In other situations, for example in case of
  #   a network error, this attribute may be nil.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#44
  def failure; end

  # @return [String] message The error message. Unlike the error
  #   document, the error message should always be present.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#48
  def message; end

  # @return [Integer] operation_id The operation id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#51
  def operation_id; end

  # @return [Integer] request_id The request id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#54
  def request_id; end

  # @return [Integer] server_connection_id The server connection id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#57
  def server_connection_id; end

  # @return [nil | Object] The service id, if any.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#60
  def service_id; end

  # @api private
  # @return [Monitoring::Event::CommandStarted] started_event The corresponding
  #   started event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#66
  def started_event; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_failed.rb#109
  def summary; end

  class << self
    # Create the event from a wire protocol message payload.
    #
    # @api private
    # @example Create the event.
    #   CommandFailed.generate(address, 1, payload, duration)
    # @param address [Server::Address] The server address.
    # @param operation_id [Integer] The operation id.
    # @param payload [Hash] The message payload.
    # @param message [String] The error message.
    # @param failure [BSON::Document] The error document, if any.
    # @param duration [Float] The duration of the command in seconds.
    # @param started_event [Monitoring::Event::CommandStarted] The corresponding
    #   started event.
    # @param service_id [Object] The service id, if any.
    # @return [CommandFailed] The event.
    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring/event/command_failed.rb#132
    def generate(address, operation_id, payload, message, failure, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end
  end
end

# Event that is fired when a command operation starts.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/event/command_started.rb#25
class Mongo::Monitoring::Event::CommandStarted < ::Mongo::Event::Base
  include ::Mongo::Monitoring::Event::Secure

  # Create the new event.
  #
  # @api private
  # @example Create the event.
  # @param command_name [String] The name of the command.
  # @param database_name [String] The database_name name.
  # @param address [Server::Address] The server address.
  # @param request_id [Integer] The request id.
  # @param operation_id [Integer] The operation id.
  # @param command [BSON::Document] The command arguments.
  # @param service_id [Object] The service id, if any.
  # @return [CommandStarted] a new instance of CommandStarted
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#85
  def initialize(command_name, database_name, address, request_id, operation_id, command, socket_object_id: T.unsafe(nil), connection_id: T.unsafe(nil), connection_generation: T.unsafe(nil), server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @return [Server::Address] address The server address.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#29
  def address; end

  # @return [BSON::Document] command The command arguments.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#32
  def command; end

  # @return [String] command_name The name of the command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#35
  def command_name; end

  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#55
  def connection_generation; end

  # @api private
  # @return [Integer] The ID for the connection over which the command
  #   is sent.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#61
  def connection_id; end

  # @return [String] database_name The name of the database_name.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#38
  def database_name; end

  # Returns a concise yet useful summary of the event.
  #
  # @return [String] String summary of the event.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#179
  def inspect; end

  # @return [Integer] operation_id The operation id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#41
  def operation_id; end

  # @return [Integer] request_id The request id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#44
  def request_id; end

  # @api private
  # @return [true | false] Whether the event contains sensitive data.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#69
  def sensitive; end

  # @return [Integer] server_connection_id The server connection id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#64
  def server_connection_id; end

  # @return [nil | Object] The service id, if any.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#47
  def service_id; end

  # object_id of the socket object used for this command.
  #
  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#52
  def socket_object_id; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#114
  def summary; end

  private

  # Returns the command, formatted as a string, with automatically added
  # keys elided ($clusterTime, lsid, signature).
  #
  # @return [String] The command summary.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_started.rb#122
  def command_summary; end

  class << self
    # Create the event from a wire protocol message payload.
    #
    # @api private
    # @example Create the event.
    #   CommandStarted.generate(address, 1, payload)
    # @param address [Server::Address] The server address.
    # @param operation_id [Integer] The operation id.
    # @param payload [Hash] The message payload.
    # @param service_id [Object] The service id, if any.
    # @return [CommandStarted] The event.
    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring/event/command_started.rb#150
    def generate(address, operation_id, payload, socket_object_id: T.unsafe(nil), connection_id: T.unsafe(nil), connection_generation: T.unsafe(nil), server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end
  end
end

# Event that is fired when a command operation succeeds.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#25
class Mongo::Monitoring::Event::CommandSucceeded < ::Mongo::Event::Base
  include ::Mongo::Monitoring::Event::Secure

  # Create the new event.
  #
  # @api private
  # @example Create the event.
  # @param command_name [String] The name of the command.
  # @param database_name [String] The database name.
  # @param address [Server::Address] The server address.
  # @param request_id [Integer] The request id.
  # @param operation_id [Integer] The operation id.
  # @param reply [BSON::Document] The command reply.
  # @param duration [Float] The duration the command took in seconds.
  # @param started_event [Monitoring::Event::CommandStarted] The corresponding
  #   started event.
  # @param service_id [Object] The service id, if any.
  # @return [CommandSucceeded] a new instance of CommandSucceeded
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#78
  def initialize(command_name, database_name, address, request_id, operation_id, reply, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @return [Server::Address] address The server address.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#29
  def address; end

  # @return [String] command_name The name of the command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#32
  def command_name; end

  # @return [String] database_name The name of the database.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#38
  def database_name; end

  # @return [Float] duration The duration of the event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#41
  def duration; end

  # @return [Integer] operation_id The operation id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#44
  def operation_id; end

  # @return [BSON::Document] reply The command reply.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#35
  def reply; end

  # @return [Integer] request_id The request id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#47
  def request_id; end

  # @return [Integer] server_connection_id The server connection id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#50
  def server_connection_id; end

  # @return [nil | Object] The service id, if any.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#53
  def service_id; end

  # @api private
  # @return [Monitoring::Event::CommandStarted] started_event The corresponding
  #   started event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#59
  def started_event; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#101
  def summary; end

  class << self
    # Create the event from a wire protocol message payload.
    #
    # @api private
    # @example Create the event.
    #   CommandSucceeded.generate(address, 1, command_payload, reply_payload, 0.5)
    # @param address [Server::Address] The server address.
    # @param operation_id [Integer] The operation id.
    # @param command_payload [Hash] The command message payload.
    # @param reply_payload [Hash] The reply message payload.
    # @param duration [Float] The duration of the command in seconds.
    # @param started_event [Monitoring::Event::CommandStarted] The corresponding
    #   started event.
    # @param service_id [Object] The service id, if any.
    # @return [CommandCompleted] The event.
    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#123
    def generate(address, operation_id, command_payload, reply_payload, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#143
    def generate_reply(command_payload, reply_payload); end

    # @since 2.1.0
    #
    # source://mongo//lib/mongo/monitoring/event/command_succeeded.rb#157
    def namespace(payload); end
  end
end

# Provides behavior to redact sensitive information from commands and
# replies.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/event/secure.rb#26
module Mongo::Monitoring::Event::Secure
  # Is compression allowed for a given command message.
  #
  # @example Determine if compression is allowed for a given command.
  #   secure.compression_allowed?(selector)
  # @param command_name [String, Symbol] The command name.
  # @return [true, false] Whether compression can be used.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/monitoring/event/secure.rb#106
  def compression_allowed?(command_name); end

  # Redact secure information from the document if:
  #   - its command is in the sensitive commands;
  #   - its command is a hello/legacy hello command, and
  #     speculative authentication is enabled;
  #   - corresponding started event is sensitive.
  #
  # @example Get the redacted document.
  #   secure.redacted(command_name, document)
  # @param command_name [String, Symbol] The command name.
  # @param document [BSON::Document] The document.
  # @return [BSON::Document] The redacted document.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/secure.rb#83
  def redacted(command_name, document); end

  # Check whether the command is sensitive in terms of command monitoring
  # spec. A command is detected as sensitive if it is in the
  # list or if it is a hello/legacy hello command, and
  # speculative authentication is enabled.
  #
  # @param command_name [String, Symbol] The command name.
  # @param document [BSON::Document] The document.
  # @return [true | false] Whether the command is sensitive.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/event/secure.rb#52
  def sensitive?(command_name:, document:); end
end

# The list of commands that has the data redacted for security.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/event/secure.rb#31
Mongo::Monitoring::Event::Secure::REDACTED_COMMANDS = T.let(T.unsafe(nil), Array)

# Event fired when the server is closed.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/server_closed.rb#25
class Mongo::Monitoring::Event::ServerClosed < ::Mongo::Event::Base
  # Create the event.
  #
  # @example Create the event.
  #   ServerClosed.new(address)
  # @param address [Address] The server address.
  # @param topology [Integer] The topology.
  # @return [ServerClosed] a new instance of ServerClosed
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_closed.rb#42
  def initialize(address, topology); end

  # @return [Address] address The server address.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_closed.rb#28
  def address; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_closed.rb#55
  def summary; end

  # @return [Topology] topology The topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_closed.rb#31
  def topology; end
end

# Event fired when a server's description changes.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#25
class Mongo::Monitoring::Event::ServerDescriptionChanged < ::Mongo::Event::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ServerDescriptionChanged.new(address, topology, previous, new)
  # @param address [Address] The server address.
  # @param topology [Integer] The topology.
  # @param previous_description [Server::Description] The previous description.
  # @param new_description [Server::Description] The new description.
  # @param awaited [true | false] Whether the server description was
  #   a result of processing an awaited hello response.
  # @return [ServerDescriptionChanged] a new instance of ServerDescriptionChanged
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#62
  def initialize(address, topology, previous_description, new_description, awaited: T.unsafe(nil)); end

  # @return [Address] address The server address.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#28
  def address; end

  # @api experimental
  # @return [true | false] Whether the heartbeat was awaited.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#44
  def awaited?; end

  # @return [Server::Description] new_description The new server
  #   description.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#39
  def new_description; end

  # @return [Server::Description] previous_description The previous server
  #   description.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#35
  def previous_description; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#80
  def summary; end

  # @return [Topology] topology The topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#31
  def topology; end

  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_description_changed.rb#89
  def awaited_indicator; end
end

# Event fired when a server heartbeat is dispatched.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#25
class Mongo::Monitoring::Event::ServerHeartbeatFailed < ::Mongo::Event::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ServerHeartbeatSucceeded.new(address, duration)
  # @param address [Address] The server address.
  # @param round_trip_time [Float] Duration of hello call in seconds.
  # @param awaited [true | false] Whether the heartbeat was awaited.
  # @param started_event [Monitoring::Event::ServerHeartbeatStarted] The corresponding started event.
  # @return [ServerHeartbeatFailed] a new instance of ServerHeartbeatFailed
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#40
  def initialize(address, round_trip_time, error, started_event:, awaited: T.unsafe(nil)); end

  # @return [Address] address The server address.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#51
  def address; end

  # @return [true | false] Whether the heartbeat was awaited.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#66
  def awaited?; end

  # Alias of round_trip_time.
  #
  # @return [Float] round_trip_time Duration of hello call in seconds.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#54
  def duration; end

  # @return [Exception] error The exception that occurred in hello call.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#60
  def error; end

  # Alias of error for SDAM spec compliance.
  #
  # @return [Exception] error The exception that occurred in hello call.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#60
  def failure; end

  # @return [Float] round_trip_time Duration of hello call in seconds.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#54
  def round_trip_time; end

  # @api experimental
  # @return [Monitoring::Event::ServerHeartbeatStarted] The corresponding started event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#74
  def started_event; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_failed.rb#84
  def summary; end
end

# Event fired when a server heartbeat is dispatched.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/monitoring/event/server_heartbeat_started.rb#25
class Mongo::Monitoring::Event::ServerHeartbeatStarted < ::Mongo::Event::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ServerHeartbeatStarted.new(address)
  # @param address [Address] The server address.
  # @param awaited [true | false] Whether the heartbeat was awaited.
  # @return [ServerHeartbeatStarted] a new instance of ServerHeartbeatStarted
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_started.rb#45
  def initialize(address, awaited: T.unsafe(nil)); end

  # @return [Address] address The server address.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_started.rb#28
  def address; end

  # @return [true | false] Whether the heartbeat was awaited.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_started.rb#31
  def awaited?; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_started.rb#58
  def summary; end
end

# Event fired when a server heartbeat is dispatched.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#25
class Mongo::Monitoring::Event::ServerHeartbeatSucceeded < ::Mongo::Event::Base
  # Create the event.
  #
  # @api private
  # @example Create the event.
  #   ServerHeartbeatSucceeded.new(address, duration)
  # @param address [Address] The server address.
  # @param round_trip_time [Float] Duration of hello call in seconds.
  # @param awaited [true | false] Whether the heartbeat was awaited.
  # @param started_event [Monitoring::Event::ServerHeartbeatStarted] The corresponding started event.
  # @return [ServerHeartbeatSucceeded] a new instance of ServerHeartbeatSucceeded
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#40
  def initialize(address, round_trip_time, started_event:, awaited: T.unsafe(nil)); end

  # @return [Address] address The server address.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#50
  def address; end

  # @return [true | false] Whether the heartbeat was awaited.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#59
  def awaited?; end

  # Alias of round_trip_time.
  #
  # @return [Float] round_trip_time Duration of hello call in seconds.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#53
  def duration; end

  # @return [Float] round_trip_time Duration of hello call in seconds.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#53
  def round_trip_time; end

  # @api experimental
  # @return [Monitoring::Event::ServerHeartbeatStarted] The corresponding started event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#67
  def started_event; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_heartbeat_succeeded.rb#77
  def summary; end
end

# Event fired when the server is opening.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/server_opening.rb#25
class Mongo::Monitoring::Event::ServerOpening < ::Mongo::Event::Base
  # Create the event.
  #
  # @example Create the event.
  #   ServerOpening.new(address)
  # @param address [Address] The server address.
  # @param topology [Integer] The topology.
  # @return [ServerOpening] a new instance of ServerOpening
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_opening.rb#42
  def initialize(address, topology); end

  # @return [Address] address The server address.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_opening.rb#28
  def address; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_opening.rb#55
  def summary; end

  # @return [Topology] topology The topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/server_opening.rb#31
  def topology; end
end

# Event fired when the topology changes.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/topology_changed.rb#25
class Mongo::Monitoring::Event::TopologyChanged < ::Mongo::Event::Base
  # Create the event.
  #
  # @example Create the event.
  #   TopologyChanged.new(previous, new)
  # @param previous_topology [Cluster::Topology] The previous topology.
  # @param new_topology [Cluster::Topology] The new topology.
  # @return [TopologyChanged] a new instance of TopologyChanged
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_changed.rb#42
  def initialize(previous_topology, new_topology); end

  # @return [Cluster::Topology] new_topology The new topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_changed.rb#31
  def new_topology; end

  # @return [Cluster::Topology] previous_topology The previous topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_changed.rb#28
  def previous_topology; end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_changed.rb#55
  def summary; end
end

# Event fired when the topology closes.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/topology_closed.rb#25
class Mongo::Monitoring::Event::TopologyClosed < ::Mongo::Event::Base
  # Create the event.
  #
  # @example Create the event.
  #   TopologyClosed.new(topology)
  # @param topology [Integer] The topology.
  # @return [TopologyClosed] a new instance of TopologyClosed
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_closed.rb#38
  def initialize(topology); end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_closed.rb#50
  def summary; end

  # @return [Topology] topology The topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_closed.rb#28
  def topology; end
end

# Event fired when the topology is opening.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/event/topology_opening.rb#25
class Mongo::Monitoring::Event::TopologyOpening < ::Mongo::Event::Base
  # Create the event.
  #
  # @example Create the event.
  #   TopologyOpening.new(topology)
  # @param topology [Integer] The topology.
  # @return [TopologyOpening] a new instance of TopologyOpening
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_opening.rb#38
  def initialize(topology); end

  # Returns a concise yet useful summary of the event.
  #
  # @api experimental
  # @note This method is experimental and subject to change.
  # @return [String] String summary of the event.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_opening.rb#50
  def summary; end

  # @return [Topology] topology The topology.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/event/topology_opening.rb#28
  def topology; end
end

# Allows subscribing to events for all Mongo clients.
#
# @note Global subscriptions must be established prior to creating
#   clients. When a client is constructed it copies subscribers from
#   the Global module; subsequent subscriptions or unsubscriptions
#   on the Global module have no effect on already created clients.
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring.rb#193
module Mongo::Monitoring::Global
  extend ::Mongo::Monitoring::Subscribable
end

# Defines behavior for an object that can publish monitoring events.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/monitoring/publishable.rb#24
module Mongo::Monitoring::Publishable
  include ::Mongo::Loggable

  # @return [Monitoring] monitoring The monitoring.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#28
  def monitoring; end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#41
  def publish_cmap_event(event); end

  # @deprecated
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#31
  def publish_event(topic, event); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#35
  def publish_sdam_event(topic, event); end

  private

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#66
  def command_completed(result, address, operation_id, payload, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#103
  def command_failed(failure, address, operation_id, payload, message, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#49
  def command_started(address, operation_id, payload, socket_object_id: T.unsafe(nil), connection_id: T.unsafe(nil), connection_generation: T.unsafe(nil), server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#85
  def command_succeeded(result, address, operation_id, payload, duration, started_event:, server_connection_id: T.unsafe(nil), service_id: T.unsafe(nil)); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#117
  def duration(start); end

  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring/publishable.rb#121
  def monitoring?; end
end

# Subscribes to SDAM events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/sdam_log_subscriber.rb#24
class Mongo::Monitoring::SDAMLogSubscriber
  include ::Mongo::Loggable

  # Create the new log subscriber.
  #
  # @example Create the log subscriber.
  #   SDAMLogSubscriber.new
  # @option options
  # @param options [Hash] The options.
  # @return [SDAMLogSubscriber] a new instance of SDAMLogSubscriber
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/sdam_log_subscriber.rb#40
  def initialize(options = T.unsafe(nil)); end

  # @return [Hash] options The options.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/sdam_log_subscriber.rb#28
  def options; end

  # Handle the SDAM succeeded event.
  #
  # @example Handle the event.
  #   subscriber.succeeded(event)
  # @param event [Event] The event.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/sdam_log_subscriber.rb#52
  def succeeded(event); end
end

# Server closed topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#39
Mongo::Monitoring::SERVER_CLOSED = T.let(T.unsafe(nil), String)

# Server description changed topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#44
Mongo::Monitoring::SERVER_DESCRIPTION_CHANGED = T.let(T.unsafe(nil), String)

# Server heartbeat started topic.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/monitoring.rb#69
Mongo::Monitoring::SERVER_HEARTBEAT = T.let(T.unsafe(nil), String)

# Server opening topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#49
Mongo::Monitoring::SERVER_OPENING = T.let(T.unsafe(nil), String)

# Subscribes to Server Closed events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/server_closed_log_subscriber.rb#24
class Mongo::Monitoring::ServerClosedLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/server_closed_log_subscriber.rb#28
  def log_event(event); end
end

# Subscribes to Server Description Changed events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/server_description_changed_log_subscriber.rb#24
class Mongo::Monitoring::ServerDescriptionChangedLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/server_description_changed_log_subscriber.rb#35
  def awaited_indicator(event); end

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/server_description_changed_log_subscriber.rb#28
  def log_event(event); end
end

# Subscribes to Server Opening events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/server_opening_log_subscriber.rb#24
class Mongo::Monitoring::ServerOpeningLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/server_opening_log_subscriber.rb#28
  def log_event(event); end
end

# Contains subscription methods common between monitoring and
# global event subscriptions.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/monitoring.rb#87
module Mongo::Monitoring::Subscribable
  # Subscribe a listener to an event topic.
  #
  # multiple times, in which case the listener will be invoked as many
  # times as it is subscribed and to unsubscribe it the same number
  # of unsubscribe calls will be needed.
  #
  # @example Subscribe to the topic.
  #   monitoring.subscribe(QUERY, subscriber)
  # @example Subscribe to the topic globally.
  #   Monitoring::Global.subscribe(QUERY, subscriber)
  # @note It is possible to subscribe the same listener to the same topic
  # @param topic [String] The event topic.
  # @param subscriber [Object] The subscriber to handle the event.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#105
  def subscribe(topic, subscriber); end

  # Get all the subscribers.
  #
  # @example Get all the subscribers.
  #   monitoring.subscribers
  # @example Get all the global subscribers.
  #   Mongo::Monitoring::Global.subscribers
  # @return [Hash<String, Object>] The subscribers.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#157
  def subscribers; end

  # Determine if there are any subscribers for a particular event.
  #
  # @example Are there subscribers?
  #   monitoring.subscribers?(COMMAND)
  # @example Are there global subscribers?
  #   Mongo::Monitoring::Global.subscribers?(COMMAND)
  # @param topic [String] The event topic.
  # @return [true, false] If there are subscribers for the topic.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/monitoring.rb#174
  def subscribers?(topic); end

  # Unsubscribe a listener from an event topic.
  #
  # If the listener was subscribed to the event topic multiple times,
  # this call removes a single subscription.
  #
  # If the listener was not subscribed to the topic, this operation
  # is a no-op and no exceptions are raised.
  #
  # @example Unsubscribe from the topic.
  #   monitoring.unsubscribe(QUERY, subscriber)
  # @example Unsubscribe from the topic globally.
  #   Mongo::Monitoring::Global.unsubscribe(QUERY, subscriber)
  # @note Global subscriber registry is separate from per-client
  #   subscriber registry. The same subscriber can be subscribed to
  #   events from a particular client as well as globally; unsubscribing
  #   globally will not unsubscribe that subscriber from the client
  #   it was explicitly subscribed to.
  # @note Currently the list of global subscribers is copied into
  #   a client whenever the client is created. Thus unsubscribing a
  #   subscriber globally has no effect for existing clients - they will
  #   continue sending events to the unsubscribed subscriber.
  # @param topic [String] The event topic.
  # @param subscriber [Object] The subscriber to be unsubscribed.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/monitoring.rb#138
  def unsubscribe(topic, subscriber); end

  private

  # @since 2.6.0
  #
  # source://mongo//lib/mongo/monitoring.rb#180
  def subscribers_for(topic); end
end

# Topology changed topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#54
Mongo::Monitoring::TOPOLOGY_CHANGED = T.let(T.unsafe(nil), String)

# Topology closed topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#59
Mongo::Monitoring::TOPOLOGY_CLOSED = T.let(T.unsafe(nil), String)

# Topology opening topic.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring.rb#64
Mongo::Monitoring::TOPOLOGY_OPENING = T.let(T.unsafe(nil), String)

# Subscribes to Topology Changed events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/topology_changed_log_subscriber.rb#24
class Mongo::Monitoring::TopologyChangedLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/topology_changed_log_subscriber.rb#28
  def log_event(event); end
end

# Subscribes to Topology Closed events and logs them.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/monitoring/topology_closed_log_subscriber.rb#24
class Mongo::Monitoring::TopologyClosedLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.7.0
  #
  # source://mongo//lib/mongo/monitoring/topology_closed_log_subscriber.rb#28
  def log_event(event); end
end

# Subscribes to Topology Opening events and logs them.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/monitoring/topology_opening_log_subscriber.rb#24
class Mongo::Monitoring::TopologyOpeningLogSubscriber < ::Mongo::Monitoring::SDAMLogSubscriber
  private

  # @since 2.4.0
  #
  # source://mongo//lib/mongo/monitoring/topology_opening_log_subscriber.rb#28
  def log_event(event); end
end

# Subscribes to SDAM events and logs them.
#
# @api experimental
# @since 2.11.0
#
# source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#25
class Mongo::Monitoring::UnifiedSdamLogSubscriber
  include ::Mongo::Loggable

  # Create the new log subscriber.
  #
  # @api experimental
  # @option options
  # @param options [Hash] The options.
  # @return [UnifiedSdamLogSubscriber] a new instance of UnifiedSdamLogSubscriber
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#40
  def initialize(options = T.unsafe(nil)); end

  # @api experimental
  # @return [Hash] options The options.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#31
  def options; end

  # Handle an event.
  #
  # @api experimental
  # @param event [Event] The event.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#49
  def published(event); end

  # @api experimental
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#55
  def subscribe(client); end

  # Handle an event.
  #
  # @api experimental
  # @param event [Event] The event.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/monitoring/unified_sdam_log_subscriber.rb#49
  def succeeded(event); end
end

# This module encapsulates all of the operation classes defined by the driver.
#
# The operation classes take Ruby options as constructor parameters.
# For example, :read contains read preference and :read_concern contains read
# concern, whereas server commands use readConcern field for the read
# concern and read preference is passed as $readPreference or secondaryOk
# wire protocol flag bit.
#
# @api private
#
# source://mongo//lib/mongo/operation/context.rb#19
module Mongo::Operation; end

# The array filters field constant.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation.rb#101
Mongo::Operation::ARRAY_FILTERS = T.let(T.unsafe(nil), String)

# A MongoDB aggregate operation.
#
# @api private
# @note An aggregate operation can behave like a read and return a
#   result set, or can behave like a write operation and
#   output results to a user-specified collection.
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/aggregate/op_msg.rb#20
class Mongo::Operation::Aggregate
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB aggregate operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/aggregate/op_msg.rb#27
class Mongo::Operation::Aggregate::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods
end

# Defines custom behavior of results in an aggregation context.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/aggregate/result.rb#26
class Mongo::Operation::Aggregate::Result < ::Mongo::Operation::Result
  # Get the cursor id for the result.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @note Even though the wire protocol has a cursor_id field for all
  #   messages of type reply, it is always zero when using the
  #   aggregation framework and must be retrieved from the cursor
  #   document itself. Wahnsinn!
  # @return [Integer] The cursor id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#54
  def cursor_id; end

  # Get the documents for the aggregation result. This is either the
  # first document's 'result' field, or if a cursor option was selected,
  # it is the 'firstBatch' field in the 'cursor' field of the first
  # document returned. Otherwise, it is an explain document.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#79
  def documents; end

  # Get the post batch resume token for the result
  #
  # @api private
  # @return [BSON::Document | nil] The post batch resume token
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#63
  def post_batch_resume_token; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#94
  def cursor_document; end

  # This should only be called on explain responses; it will never
  # return a nil result and will only be meaningful on explain responses
  #
  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#90
  def explain_document; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/aggregate/result.rb#98
  def first_document; end
end

# The field name for the aggregation explain information.
#
# @api private
# @since 2.0.5
#
# source://mongo//lib/mongo/operation/aggregate/result.rb#32
Mongo::Operation::Aggregate::Result::EXPLAIN = T.let(T.unsafe(nil), String)

# The legacy field name for the aggregation explain information.
#
# @api private
# @since 2.0.5
#
# source://mongo//lib/mongo/operation/aggregate/result.rb#38
Mongo::Operation::Aggregate::Result::EXPLAIN_LEGACY = T.let(T.unsafe(nil), String)

# Custom behavior for operations that support the bypassdocumentvalidation option.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/bypass_document_validation.rb#25
module Mongo::Operation::BypassDocumentValidation
  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/bypass_document_validation.rb#40
  def add_bypass_document_validation(sel); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/bypass_document_validation.rb#29
  def command(connection); end
end

# The cluster time field constant.
#
# @api private
# @deprecated
# @since 2.5.0
#
# source://mongo//lib/mongo/operation.rb#112
Mongo::Operation::CLUSTER_TIME = T.let(T.unsafe(nil), String)

# The collation field constant.
#
# @api private
# @since 2.4.0
#
# source://mongo//lib/mongo/operation.rb#96
Mongo::Operation::COLLATION = T.let(T.unsafe(nil), String)

# Custom behavior for operations that support causal consistency.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/causal_consistency_supported.rb#25
module Mongo::Operation::CausalConsistencySupported
  private

  # Adds causal consistency document to the selector, if one can be
  # constructed.
  #
  # This method overrides the causal consistency addition logic of
  # SessionsSupported and is meant to be used with operations classified
  # as "read operations accepting a read concern", as these are defined
  # in the causal consistency spec.
  #
  # In order for the override to work correctly the
  # CausalConsistencySupported module must be included after
  # SessionsSupported module in target classes.
  #
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/causal_consistency_supported.rb#40
  def apply_causal_consistency!(selector, connection); end
end

# A MongoDB operation to get info on all collections in a given database.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/collections_info/result.rb#20
class Mongo::Operation::CollectionsInfo
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/collections_info.rb#34
  def final_operation; end
end

# Defines custom behavior of results when query the system.namespaces
# collection.
#
# @api semiprivate
# @since 2.1.0
#
# source://mongo//lib/mongo/operation/collections_info/result.rb#27
class Mongo::Operation::CollectionsInfo::Result < ::Mongo::Operation::Result
  # Initialize a new result.
  #
  # @api private
  # @param replies [Array<Protocol::Message> | nil] The wire protocol replies, if any.
  # @param connection_description [Server::Description] Server description of the server that performed the operation that
  #   this result is for.
  # @param connection_global_id [Integer] Global id of the connection on which the operation that
  #   this result is for was performed.
  # @param database_name [String] The name of the database that the
  #   query was sent to.
  # @return [Result] a new instance of Result
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/collections_info/result.rb#42
  def initialize(replies, connection_description, connection_global_id, database_name); end

  # Get the namespace for the cursor.
  #
  # @api private
  # @example Get the namespace.
  #   result.namespace
  # @return [String] The namespace.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/collections_info/result.rb#56
  def namespace; end
end

# A MongoDB general command operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/command/op_msg.rb#20
class Mongo::Operation::Command
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB command operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/command/op_msg.rb#27
class Mongo::Operation::Command::OpMsg < ::Mongo::Operation::OpMsgBase
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/command/op_msg.rb#29
  def selector(connection); end
end

# Context for operations.
#
# Holds various objects needed to make decisions about operation execution
# in a single container, and provides facade methods for the contained
# objects.
#
# The context contains parameters for operations, and as such while an
# operation is being prepared nothing in the context should change.
# When the result of the operation is being processed, the data
# returned by the context may change (for example, because a transaction
# is aborted), but at that point the operation should no longer read
# anything from the context. Because context data may change during
# operation execution, context objects should not be reused for multiple
# operations.
#
# @api private
#
# source://mongo//lib/mongo/operation/context.rb#37
class Mongo::Operation::Context
  # @api private
  # @return [Context] a new instance of Context
  #
  # source://mongo//lib/mongo/operation/context.rb#38
  def initialize(client: T.unsafe(nil), session: T.unsafe(nil), connection_global_id: T.unsafe(nil), options: T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#79
  def aborting_transaction?; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#91
  def any_retry_writes?; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#59
  def client; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#75
  def committing_transaction?; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#63
  def connection_global_id; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#125
  def decrypt?; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#121
  def encrypt?; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#129
  def encrypter; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#67
  def in_transaction?; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#87
  def legacy_retry_writes?; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#83
  def modern_retry_writes?; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#61
  def options; end

  # Whether the operation is a retry (true) or an initial attempt (false).
  #
  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#104
  def retry?; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#95
  def server_api; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/context.rb#60
  def session; end

  # @api private
  # @return [Boolean]
  #
  # source://mongo//lib/mongo/operation/context.rb#71
  def starting_transaction?; end

  # Returns a new context with the parameters changed as per the
  # provided arguments.
  #
  # @api private
  # @option opts
  # @param opts [Hash] a customizable set of options
  #
  # source://mongo//lib/mongo/operation/context.rb#113
  def with(**opts); end
end

# A MongoDB count command operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/count/op_msg.rb#20
class Mongo::Operation::Count
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB count operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/count/op_msg.rb#27
class Mongo::Operation::Count::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/count/op_msg.rb#32
  def selector(connection); end
end

# A MongoDB create collection command operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/create/op_msg.rb#20
class Mongo::Operation::Create
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB create collection operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/create/op_msg.rb#27
class Mongo::Operation::Create::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/create/op_msg.rb#32
  def selector(connection); end
end

# A MongoDB create index command operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/create_index/op_msg.rb#20
class Mongo::Operation::CreateIndex
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB createindex operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/create_index/op_msg.rb#27
class Mongo::Operation::CreateIndex::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/create_index/op_msg.rb#32
  def selector(connection); end
end

# A MongoDB create user command operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/create_user/op_msg.rb#20
class Mongo::Operation::CreateUser
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB createuser operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/create_user/op_msg.rb#27
class Mongo::Operation::CreateUser::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/create_user/op_msg.rb#32
  def selector(connection); end
end

# A MongoDB delete operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/delete/op_msg.rb#20
class Mongo::Operation::Delete
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::ResponseHandling
  include ::Mongo::Operation::Write
end

# Defines custom behavior of results for a delete when part of a bulk write.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/delete/bulk_result.rb#26
class Mongo::Operation::Delete::BulkResult < ::Mongo::Operation::Result
  include ::Mongo::Operation::Result::Aggregatable

  # Gets the number of documents deleted.
  #
  # @api public
  # @example Get the deleted count.
  #   result.n_removed
  # @return [Integer] The number of documents deleted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/delete/bulk_result.rb#38
  def n_removed; end
end

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/delete.rb#36
Mongo::Operation::Delete::IDENTIFIER = T.let(T.unsafe(nil), String)

# A MongoDB delete operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/delete/op_msg.rb#27
class Mongo::Operation::Delete::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::BypassDocumentValidation
  include ::Mongo::Operation::ExecutableNoValidate
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  include ::Mongo::Operation::Validatable
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/delete/op_msg.rb#50
  def message(connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/delete/op_msg.rb#36
  def selector(connection); end
end

# Defines custom behavior of results for a delete.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/delete/result.rb#26
class Mongo::Operation::Delete::Result < ::Mongo::Operation::Result
  # @api public
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/delete/result.rb#42
  def bulk_result; end

  # Get the number of documents deleted.
  #
  # @api public
  # @example Get the deleted count.
  #   result.deleted_count
  # @return [Integer] The deleted count.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/delete/result.rb#37
  def deleted_count; end
end

# A MongoDB distinct command operation.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation/distinct/op_msg.rb#20
class Mongo::Operation::Distinct
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB distinct operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/distinct/op_msg.rb#27
class Mongo::Operation::Distinct::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/distinct/op_msg.rb#33
  def selector(connection); end
end

# A MongoDB drop collection operation.
#
# @api private
# @since 2.4.0
#
# source://mongo//lib/mongo/operation/drop/op_msg.rb#20
class Mongo::Operation::Drop
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB drop collection operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/drop/op_msg.rb#27
class Mongo::Operation::Drop::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
end

# A MongoDB drop database operation.
#
# @api private
# @since 2.4.0
#
# source://mongo//lib/mongo/operation/drop_database/op_msg.rb#20
class Mongo::Operation::DropDatabase
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB drop database operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/drop_database/op_msg.rb#27
class Mongo::Operation::DropDatabase::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
end

# A MongoDB drop index operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/drop_index/op_msg.rb#20
class Mongo::Operation::DropIndex
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB dropindex operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/drop_index/op_msg.rb#27
class Mongo::Operation::DropIndex::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/drop_index/op_msg.rb#32
  def selector(connection); end
end

# Shared executable behavior of operations.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/executable.rb#25
module Mongo::Operation::Executable
  include ::Mongo::Operation::ResponseHandling

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#29
  def do_execute(connection, context, options = T.unsafe(nil)); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#73
  def execute(connection, context:, options: T.unsafe(nil)); end

  private

  # @api private
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#106
  def build_message(connection, context); end

  # Returns a Protocol::Message or nil as reply.
  #
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#96
  def dispatch_message(connection, context, options = T.unsafe(nil)); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#91
  def get_result(connection, context, options = T.unsafe(nil)); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#114
  def process_result(result, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#126
  def process_result_for_sdam(result, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/executable.rb#87
  def result_class; end
end

# Shared executable behavior of operations for operations
# whose result should not be validated.
#
# @api private
#
# source://mongo//lib/mongo/operation/shared/executable_no_validate.rb#25
module Mongo::Operation::ExecutableNoValidate
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/executable_no_validate.rb#27
  def execute(connection, context:); end
end

# Shared behavior of applying transaction error label to execution result.
#
# @api private
# @note This module should be included after ExecutableNoValidate,
#   if both are included in a class.
#
# source://mongo//lib/mongo/operation/shared/executable_transaction_label.rb#27
module Mongo::Operation::ExecutableTransactionLabel; end

# A MongoDB explain operation.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation/explain/result.rb#20
class Mongo::Operation::Explain
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB explain operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/explain/op_msg.rb#27
class Mongo::Operation::Explain::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/explain/op_msg.rb#34
  def selector(connection); end
end

# Defines custom behavior of results in find command with explain.
#
# @api semiprivate
# @since 2.5.0
#
# source://mongo//lib/mongo/operation/explain/result.rb#26
class Mongo::Operation::Explain::Result < ::Mongo::Operation::Result
  # Get the cursor id.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @return [0] Always 0 because explain doesn't return a cursor.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/explain/result.rb#37
  def cursor_id; end

  # Get the documents in the result.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/explain/result.rb#50
  def documents; end
end

# A MongoDB find operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/find/op_msg.rb#20
class Mongo::Operation::Find
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# source://mongo//lib/mongo/operation/find/builder/command.rb#21
module Mongo::Operation::Find::Builder; end

# Builds a find command specification from options.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/command.rb#26
module Mongo::Operation::Find::Builder::Command
  private

  # Converts negative limit and batchSize parameters in the
  # find command to positive ones. Removes the parameters if their
  # values are zero.
  #
  # This is only used for find commmand, not for OP_QUERY path.
  #
  # The +command+ parameter is mutated by this method.
  #
  # @api private
  #
  # source://mongo//lib/mongo/operation/find/builder/command.rb#87
  def convert_limit_and_batch_size!(command); end

  # @api private
  #
  # source://mongo//lib/mongo/operation/find/builder/command.rb#58
  def selector(spec, connection); end

  class << self
    # Converts negative limit and batchSize parameters in the
    # find command to positive ones. Removes the parameters if their
    # values are zero.
    #
    # This is only used for find commmand, not for OP_QUERY path.
    #
    # The +command+ parameter is mutated by this method.
    #
    # @api private
    #
    # source://mongo//lib/mongo/operation/find/builder/command.rb#87
    def convert_limit_and_batch_size!(command); end

    # @api private
    #
    # source://mongo//lib/mongo/operation/find/builder/command.rb#58
    def selector(spec, connection); end
  end
end

# The mappings from ruby options to the find command.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/command.rb#29
Mongo::Operation::Find::Builder::Command::OPTION_MAPPINGS = T.let(T.unsafe(nil), BSON::Document)

# Provides behavior for converting Ruby options to wire protocol flags
# when sending find and related commands (e.g. explain).
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/flags.rb#27
module Mongo::Operation::Find::Builder::Flags
  private

  # Converts Ruby find options to an array of flags.
  #
  # Any keys in the input hash that are not options that map to flags
  # are ignored.
  #
  # @api private
  # @param options [Hash, BSON::Document] The options.
  # @return [Array<Symbol>] The flags.
  #
  # source://mongo//lib/mongo/operation/find/builder/flags.rb#48
  def map_flags(options); end

  class << self
    # Converts Ruby find options to an array of flags.
    #
    # Any keys in the input hash that are not options that map to flags
    # are ignored.
    #
    # @api private
    # @param options [Hash, BSON::Document] The options.
    # @return [Array<Symbol>] The flags.
    #
    # source://mongo//lib/mongo/operation/find/builder/flags.rb#48
    def map_flags(options); end
  end
end

# Options to cursor flags mapping.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/flags.rb#30
Mongo::Operation::Find::Builder::Flags::MAPPINGS = T.let(T.unsafe(nil), Hash)

# Provides behavior for mapping Ruby options to legacy OP_QUERY
# find modifiers.
#
# This module is used in two ways:
# 1. When Collection#find is invoked with the legacy OP_QUERY
#    syntax (:$query argument etc.), this module is used to map
#    the legacy parameters into the Ruby options that normally
#    are used by applications.
# 2. When sending a find operation using the OP_QUERY protocol,
#    this module is used to map the Ruby find options to the
#    modifiers in the wire protocol message.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/modifiers.rb#36
module Mongo::Operation::Find::Builder::Modifiers
  private

  # Transform the provided OP_QUERY modifiers to Ruby options.
  #
  # @api private
  # @example Transform to driver options.
  #   Modifiers.map_driver_options(modifiers)
  # @param modifiers [Hash] The modifiers.
  # @return [BSON::Document] The Ruby options.
  #
  # source://mongo//lib/mongo/operation/find/builder/modifiers.rb#64
  def map_driver_options(modifiers); end

  # Transform the provided Ruby options into a document of OP_QUERY
  # modifiers.
  #
  # Accepts both string and symbol keys.
  #
  # The input mapping may contain additional keys that do not map to
  # OP_QUERY modifiers, in which case the extra keys are ignored.
  #
  # @api private
  # @example Map the server modifiers.
  #   Modifiers.map_server_modifiers(options)
  # @param options [Hash, BSON::Document] The options.
  # @return [BSON::Document] The modifiers.
  #
  # source://mongo//lib/mongo/operation/find/builder/modifiers.rb#82
  def map_server_modifiers(options); end

  class << self
    # Transform the provided OP_QUERY modifiers to Ruby options.
    #
    # @api private
    # @example Transform to driver options.
    #   Modifiers.map_driver_options(modifiers)
    # @param modifiers [Hash] The modifiers.
    # @return [BSON::Document] The Ruby options.
    #
    # source://mongo//lib/mongo/operation/find/builder/modifiers.rb#64
    def map_driver_options(modifiers); end

    # Transform the provided Ruby options into a document of OP_QUERY
    # modifiers.
    #
    # Accepts both string and symbol keys.
    #
    # The input mapping may contain additional keys that do not map to
    # OP_QUERY modifiers, in which case the extra keys are ignored.
    #
    # @api private
    # @example Map the server modifiers.
    #   Modifiers.map_server_modifiers(options)
    # @param options [Hash, BSON::Document] The options.
    # @return [BSON::Document] The modifiers.
    #
    # source://mongo//lib/mongo/operation/find/builder/modifiers.rb#82
    def map_server_modifiers(options); end
  end
end

# Mappings from Ruby options to OP_QUERY modifiers.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/modifiers.rb#39
Mongo::Operation::Find::Builder::Modifiers::DRIVER_MAPPINGS = T.let(T.unsafe(nil), BSON::Document)

# Mappings from OP_QUERY modifiers to Ruby options.
#
# @api private
#
# source://mongo//lib/mongo/operation/find/builder/modifiers.rb#54
Mongo::Operation::Find::Builder::Modifiers::SERVER_MAPPINGS = T.let(T.unsafe(nil), BSON::Document)

# A MongoDB find operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/find/op_msg.rb#27
class Mongo::Operation::Find::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/find/op_msg.rb#34
  def selector(connection); end
end

# Defines custom behavior of results in find command.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/find/result.rb#26
class Mongo::Operation::Find::Result < ::Mongo::Operation::Result
  # Get the cursor id.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @return [Integer] The cursor id.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/find/result.rb#37
  def cursor_id; end

  # Get the documents in the result.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/find/result.rb#50
  def documents; end

  # The namespace in which this find command was performed.
  #
  # @api private
  # @return [String] The namespace, usually in the format
  #   "database.collection".
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/find/result.rb#60
  def namespace; end

  private

  # @api semiprivate
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/find/result.rb#66
  def cursor_document; end

  # @api semiprivate
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/find/result.rb#70
  def first_document; end
end

# A MongoDB getMore operation.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation/get_more/command_builder.rb#20
class Mongo::Operation::GetMore
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# @api private
#
# source://mongo//lib/mongo/operation/get_more/command_builder.rb#23
module Mongo::Operation::GetMore::CommandBuilder
  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/get_more/command_builder.rb#27
  def selector(connection); end
end

# A MongoDB getMore operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/get_more/op_msg.rb#27
class Mongo::Operation::GetMore::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  include ::Mongo::Operation::GetMore::CommandBuilder
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods
end

# Defines custom behavior of results for the get more command.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/get_more/result.rb#26
class Mongo::Operation::GetMore::Result < ::Mongo::Operation::Result
  # Get the cursor id.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @return [Integer] The cursor id.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/get_more/result.rb#37
  def cursor_id; end

  # Get the documents in the result.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/get_more/result.rb#59
  def documents; end

  # Get the post batch resume token for the result
  #
  # @api private
  # @return [BSON::Document | nil] The post batch resume token
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/get_more/result.rb#46
  def post_batch_resume_token; end

  private

  # @api semiprivate
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/get_more/result.rb#65
  def cursor_document; end

  # @api semiprivate
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/get_more/result.rb#69
  def first_document; end
end

# Shared behavior of operations that require its documents to each have an id.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/idable.rb#25
module Mongo::Operation::Idable
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/idable.rb#27
  def documents; end

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/idable.rb#58
  def ensure_ids(documents); end

  # @api private
  # @return [Boolean]
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/idable.rb#54
  def has_id?(doc); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/idable.rb#50
  def id(doc); end

  # Get the id generator.
  #
  # @api private
  # @example Get the id generator.
  #   idable.id_generator
  # @return [IdGenerator] The default or custom id generator.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/shared/idable.rb#46
  def id_generator; end
end

# The option for a custom id generator.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/shared/idable.rb#36
Mongo::Operation::Idable::ID_GENERATOR = T.let(T.unsafe(nil), Symbol)

# A MongoDB indexes operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/indexes/op_msg.rb#20
class Mongo::Operation::Indexes
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB indexes operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/indexes/op_msg.rb#27
class Mongo::Operation::Indexes::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::Limited
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods
end

# Defines custom behavior of results when using the
# listIndexes command.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/indexes/result.rb#27
class Mongo::Operation::Indexes::Result < ::Mongo::Operation::Result
  # Get the cursor id for the result.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @note Even though the wire protocol has a cursor_id field for all
  #   messages of type reply, it is always zero when using the
  #   listIndexes command and must be retrieved from the cursor
  #   document itself.
  # @return [Integer] The cursor id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#43
  def cursor_id; end

  # Get the documents for the listIndexes result. This is the 'firstBatch'
  # field in the 'cursor' field of the first document returned.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#70
  def documents; end

  # Get the namespace for the cursor.
  #
  # @api private
  # @example Get the namespace.
  #   result.namespace
  # @return [String] The namespace.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#56
  def namespace; end

  # Validate the result. In the case where the database or collection
  # does not exist on the server we will get an error, and it's better
  # to raise a meaningful exception here than the ambiguous one when
  # the error occurs.
  #
  # @api private
  # @example Validate the result.
  #   result.validate!
  # @raise [NoNamespace] If the ns doesn't exist.
  # @return [Result] Self if successful.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#88
  def validate!; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#94
  def cursor_document; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/indexes/result.rb#98
  def first_document; end
end

# A MongoDB insert operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/insert/op_msg.rb#20
class Mongo::Operation::Insert
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::ResponseHandling
  include ::Mongo::Operation::Write

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert.rb#38
  def validate!(connection); end
end

# Defines custom behavior of results for an insert when sent as part of a bulk write.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/insert/bulk_result.rb#26
class Mongo::Operation::Insert::BulkResult < ::Mongo::Operation::Result
  include ::Mongo::Operation::Result::Aggregatable

  # Initialize a new result.
  #
  # @api private
  # @example Instantiate the result.
  #   Result.new(replies, inserted_ids)
  # @param replies [Array<Protocol::Message> | nil] The wire protocol replies, if any.
  # @param connection_description [Server::Description] Server description of the server that performed the operation that
  #   this result is for.
  # @param connection_global_id [Integer] Global id of the connection on which the operation that
  #   this result is for was performed.
  # @param ids [Array<Object>] The ids of the inserted documents.
  # @return [BulkResult] a new instance of BulkResult
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/bulk_result.rb#51
  def initialize(replies, connection_description, connection_global_id, ids); end

  # Gets the id of the document inserted.
  #
  # @api public
  # @example Get id of the document inserted.
  #   result.inserted_id
  # @return [Object] The id of the document inserted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/bulk_result.rb#110
  def inserted_id; end

  # Get the ids of the inserted documents.
  #
  # @api public
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/bulk_result.rb#33
  def inserted_ids; end

  # Gets the number of documents inserted.
  #
  # @api public
  # @example Get the number of documents inserted.
  #   result.n_inserted
  # @return [Integer] The number of documents inserted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/bulk_result.rb#97
  def n_inserted; end
end

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/insert.rb#36
Mongo::Operation::Insert::IDENTIFIER = T.let(T.unsafe(nil), String)

# A MongoDB insert operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/insert/op_msg.rb#27
class Mongo::Operation::Insert::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::Idable
  include ::Mongo::Operation::BypassDocumentValidation
  include ::Mongo::Operation::ExecutableNoValidate
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/insert/op_msg.rb#36
  def get_result(connection, context, options = T.unsafe(nil)); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/insert/op_msg.rb#50
  def message(connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/insert/op_msg.rb#41
  def selector(connection); end
end

# Defines custom behavior of results for an insert.
#
# According to the CRUD spec, reporting the inserted ids
# is optional. It can be added to this class later, if needed.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/insert/result.rb#29
class Mongo::Operation::Insert::Result < ::Mongo::Operation::Result
  # Initialize a new result.
  #
  # @api private
  # @example Instantiate the result.
  #   Result.new(replies, inserted_ids)
  # @param replies [Array<Protocol::Message> | nil] The wire protocol replies, if any.
  # @param connection_description [Server::Description] Server description of the server that performed the operation that
  #   this result is for.
  # @param connection_global_id [Integer] Global id of the connection on which the operation that
  #   this result is for was performed.
  # @param ids [Array<Object>] The ids of the inserted documents.
  # @return [Result] a new instance of Result
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/result.rb#53
  def initialize(replies, connection_description, connection_global_id, ids); end

  # @api public
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/result.rb#72
  def bulk_result; end

  # Gets the id of the document inserted.
  #
  # @api public
  # @example Get id of the document inserted.
  #   result.inserted_id
  # @return [Object] The id of the document inserted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/result.rb#67
  def inserted_id; end

  # Get the ids of the inserted documents.
  #
  # @api public
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/insert/result.rb#35
  def inserted_ids; end
end

# A MongoDB killcursors operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/kill_cursors/command_builder.rb#20
class Mongo::Operation::KillCursors
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# @api private
#
# source://mongo//lib/mongo/operation/kill_cursors/command_builder.rb#23
module Mongo::Operation::KillCursors::CommandBuilder
  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/kill_cursors/command_builder.rb#27
  def int64_cursor_ids; end
end

# A MongoDB killcursors operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/kill_cursors/op_msg.rb#27
class Mongo::Operation::KillCursors::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::KillCursors::CommandBuilder

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/kill_cursors/op_msg.rb#33
  def selector(connection); end
end

# The limit field constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation.rb#81
Mongo::Operation::LIMIT = T.let(T.unsafe(nil), String)

# Shared behavior of operations that require its documents to each have an id.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/limited.rb#25
module Mongo::Operation::Limited
  private

  # Get the options for executing the operation on a particular connection.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash] The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/limited.rb#37
  def options(connection); end
end

# A MongoDB listcollections operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/list_collections/op_msg.rb#20
class Mongo::Operation::ListCollections
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB listcollections operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/list_collections/op_msg.rb#27
class Mongo::Operation::ListCollections::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/list_collections/op_msg.rb#33
  def selector(connection); end
end

# Defines custom behavior of results when using the
# listCollections command.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/list_collections/result.rb#27
class Mongo::Operation::ListCollections::Result < ::Mongo::Operation::Result
  # Get the cursor id for the result.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @note Even though the wire protocol has a cursor_id field for all
  #   messages of type reply, it is always zero when using the
  #   listCollections command and must be retrieved from the cursor
  #   document itself.
  # @return [Integer] The cursor id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#43
  def cursor_id; end

  # Get the documents for the listCollections result. It is the 'firstBatch'
  #   field in the 'cursor' field of the first document returned.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#70
  def documents; end

  # Get the namespace for the cursor.
  #
  # @api private
  # @example Get the namespace.
  #   result.namespace
  # @return [String] The namespace.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#56
  def namespace; end

  # Validate the result. In the case where an unauthorized client tries
  # to run the command we need to generate the proper error.
  #
  # @api private
  # @example Validate the result.
  #   result.validate!
  # @return [Result] Self if successful.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#84
  def validate!; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#103
  def cursor_document; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/list_collections/result.rb#107
  def first_document; end
end

# The multi field constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation.rb#86
Mongo::Operation::MULTI = T.let(T.unsafe(nil), String)

# A MongoDB mapreduce operation.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation/map_reduce/op_msg.rb#20
class Mongo::Operation::MapReduce
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB map-reduce operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/map_reduce/op_msg.rb#27
class Mongo::Operation::MapReduce::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods
end

# Defines custom behavior of results for a map reduce operation.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/map_reduce/result.rb#26
class Mongo::Operation::MapReduce::Result < ::Mongo::Operation::Result
  # Gets the map/reduce counts from the reply.
  #
  # @api public
  # @example Get the counts.
  #   result.counts
  # @return [Hash] A hash of the result counts.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#55
  def counts; end

  # Get the cursor id.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @return [Integer] Always 0 because map reduce doesn't return a cursor.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#130
  def cursor_id; end

  # Get the documents from the map/reduce.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#68
  def documents; end

  # Get the number of documents returned by the server in this batch.
  #
  # Map/Reduce operation returns documents inline without using
  # cursors; as such, the standard Mongo::Reply#returned_count does
  # not work correctly for Map/Reduce.
  #
  # Note that the Map/Reduce operation is limited to max BSON document
  # size (16 MB) in its inline result set.
  #
  # @api public
  # @return [Integer] The number of documents returned.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#146
  def returned_count; end

  # If the result was a command then determine if it was considered a
  # success.
  #
  # @api public
  # @example Was the command successful?
  #   result.successful?
  # @note If the write was unacknowledged, then this will always return
  #   true.
  # @return [true, false] If the command was successful.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#85
  def successful?; end

  # Get the execution time of the map/reduce.
  #
  # @api public
  # @example Get the execution time.
  #   result.time
  # @return [Integer] The executing time in milliseconds.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#98
  def time; end

  # Validate the result by checking for any errors.
  #
  # @api private
  # @example Validate the result.
  #   result.validate!
  # @note This only checks for errors with writes since authentication is
  #   handled at the connection level and any authentication errors would
  #   be raised there, before a Result is ever created.
  # @raise [Error::OperationFailure] If an error is in the result.
  # @return [Result] The result if verification passed.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#117
  def validate!; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/map_reduce/result.rb#152
  def first_document; end
end

# The counts field for the map/reduce.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/map_reduce/result.rb#32
Mongo::Operation::MapReduce::Result::COUNTS = T.let(T.unsafe(nil), String)

# The field name for a result without a cursor.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/map_reduce/result.rb#38
Mongo::Operation::MapReduce::Result::RESULTS = T.let(T.unsafe(nil), String)

# The time the operation took constant.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/map_reduce/result.rb#44
Mongo::Operation::MapReduce::Result::TIME = T.let(T.unsafe(nil), String)

# The operation time field constant.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/operation.rb#106
Mongo::Operation::OPERATION_TIME = T.let(T.unsafe(nil), String)

# The default generator of ids for documents.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/shared/object_id_generator.rb#25
class Mongo::Operation::ObjectIdGenerator
  # Generate a new id.
  #
  # @api private
  # @example Generate the id.
  #   object_id_generator.generate
  # @return [BSON::ObjectId] The new id.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/shared/object_id_generator.rb#35
  def generate; end
end

# @api private
#
# source://mongo//lib/mongo/operation/op_msg_base.rb#21
class Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::ResponseHandling
  include ::Mongo::Operation::Executable
  include ::Mongo::Operation::SessionsSupported

  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/op_msg_base.rb#28
  def message(connection); end
end

# Shared behavior of executing the operation as an OpMsg.
#
# @api private
#
# source://mongo//lib/mongo/operation/shared/op_msg_executable.rb#24
module Mongo::Operation::OpMsgExecutable
  include ::Mongo::Operation::PolymorphicLookup

  # Execute the operation.
  #
  # @api private
  # @param server [Mongo::Server] The server to send the operation to.
  # @param context [Operation::Context] The operation context.
  # @param options [Hash] Operation execution options.
  # @return [Mongo::Operation::Result] The operation result.
  #
  # source://mongo//lib/mongo/operation/shared/op_msg_executable.rb#34
  def execute(server, context:, options: T.unsafe(nil)); end

  # Execute the operation.
  #
  # @api private
  # @param connection [Mongo::Server::Connection] The connection to send
  #   the operation through.
  # @param context [Operation::Context] The operation context.
  # @param options [Hash] Operation execution options.
  # @return [Mongo::Operation::Result] The operation result.
  #
  # source://mongo//lib/mongo/operation/shared/op_msg_executable.rb#48
  def execute_with_connection(connection, context:, options: T.unsafe(nil)); end

  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/op_msg_executable.rb#54
  def final_operation; end
end

# A MongoDB parallelscan operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/parallel_scan/op_msg.rb#20
class Mongo::Operation::ParallelScan
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB parallelscan operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/parallel_scan/op_msg.rb#27
class Mongo::Operation::ParallelScan::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::CausalConsistencySupported
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/parallel_scan/op_msg.rb#34
  def selector(connection); end
end

# Defines custom behavior of results in a parallel scan.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/parallel_scan/result.rb#26
class Mongo::Operation::ParallelScan::Result < ::Mongo::Operation::Result
  # Get all the cursor ids from the result.
  #
  # @api private
  # @example Get the cursor ids.
  #   result.cursor_ids
  # @return [Array<Integer>] The cursor ids.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/parallel_scan/result.rb#43
  def cursor_ids; end

  # Get the documents from parallel scan.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/parallel_scan/result.rb#56
  def documents; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/parallel_scan/result.rb#62
  def first; end
end

# The name of the cursors field in the result.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/parallel_scan/result.rb#32
Mongo::Operation::ParallelScan::Result::CURSORS = T.let(T.unsafe(nil), String)

# Shared behavior of looking up a class based on the name of
# the receiver's class.
#
# @api private
#
# source://mongo//lib/mongo/operation/shared/polymorphic_lookup.rb#25
module Mongo::Operation::PolymorphicLookup
  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/polymorphic_lookup.rb#28
  def polymorphic_class(base, name); end
end

# Shared behavior of instantiating a result class matching the
# operation class.
#
# This module must be included after Executable module because result_class
# is defined in both.
#
# @api private
#
# source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#28
module Mongo::Operation::PolymorphicResult
  include ::Mongo::Operation::PolymorphicLookup

  mixes_in_class_methods ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#41
  def result_class; end

  class << self
    # @api private
    # @private
    #
    # source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#33
    def included(base); end
  end
end

# @api private
#
# source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#37
module Mongo::Operation::PolymorphicResult::ClassMethods
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#38
  def result_class; end

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/polymorphic_result.rb#38
  def result_class=(_arg0); end
end

# The q field constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation.rb#71
Mongo::Operation::Q = T.let(T.unsafe(nil), String)

# Read preference handling for pre-OP_MSG operation implementations.
#
# This module is not used by OP_MSG operation classes (those deriving
# from OpMsgBase). Instead, read preference for those classes is handled
# in SessionsSupported module.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/read_preference_supported.rb#29
module Mongo::Operation::ReadPreferenceSupported
  private

  # Adds $readPreference field to the command document.
  #
  # $readPreference is only sent when the server is a mongos,
  # following the rules described in
  # https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst#passing-read-preference-to-mongos.
  # The topology does not matter for figuring out whether to send
  # $readPreference since the decision is always made based on
  # server type.
  #
  # $readPreference is not sent to pre-OP_MSG replica set members.
  #
  # @api private
  # @param sel [Hash] Existing command document.
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash] New command document to send to the server.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/read_preference_supported.rb#98
  def add_read_preference_legacy(sel, connection); end

  # Whether to add the :secondary_ok flag to the request based on the
  # read preference specified in the operation or implied by the topology
  # that the connection's server is a part of.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [true | false] Whether the :secondary_ok flag should be added.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/read_preference_supported.rb#59
  def add_secondary_ok_flag?(connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/read_preference_supported.rb#77
  def command(connection); end

  # Get the options for executing the operation on a particular connection.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash] The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/read_preference_supported.rb#41
  def options(connection); end
end

# A MongoDB removeuser operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/remove_user/op_msg.rb#20
class Mongo::Operation::RemoveUser
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB removeuser operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/remove_user/op_msg.rb#27
class Mongo::Operation::RemoveUser::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/remove_user/op_msg.rb#32
  def selector(connection); end
end

# Shared behavior of response handling for operations.
#
# @api private
#
# source://mongo//lib/mongo/operation/shared/response_handling.rb#24
module Mongo::Operation::ResponseHandling
  private

  # Adds error labels to exceptions raised in the yielded to block,
  # which should perform MongoDB operations and raise Mongo::Errors on
  # failure. This method handles network errors (Error::SocketError)
  # and server-side errors (Error::OperationFailure); it does not
  # handle server selection errors (Error::NoServerAvailable), for which
  # labels are added in the server selection code.
  #
  # @api private
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/operation/shared/response_handling.rb#52
  def add_error_labels(connection, context); end

  # Yields to the block and, if the block raises an exception, adds a note
  # to the exception with the address of the specified server.
  #
  # This method is intended to add server address information to exceptions
  # raised during execution of operations on servers.
  #
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/response_handling.rb#107
  def add_server_diagnostics(connection); end

  # A method that will add the RetryableWriteError label to an error if
  # any of the following conditions are true:
  #
  # The error meets the criteria for a retryable error (i.e. has one
  #   of the retryable error codes or error messages)
  #
  # AND the server does not support adding the RetryableWriteError label OR
  #   the error is a network error (i.e. the driver must add the label)
  #
  # AND the error occured during a commitTransaction or abortTransaction
  #   OR the error occured during a write outside of a transaction on a
  #   client that has retry writes enabled.
  #
  # If these conditions are met, the original error will be mutated.
  # If they're not met, the error will not be changed.
  #
  # @api private
  # @note The client argument is optional because some operations, such as
  #   end_session, do not pass the client as an argument to the execute
  #   method.
  # @param error [Mongo::Error] The error to which to add the label.
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/operation/shared/response_handling.rb#146
  def maybe_add_retryable_write_error_label!(error, connection, context); end

  # Unpins the session and/or the connection if  the yielded to block
  # raises errors that are required to unpin the session and the connection.
  #
  # @api private
  # @note This method takes the session as an argument because this module
  #   is included in BulkWrite which does not store the session in the
  #   receiver (despite Specifiable doing so).
  # @param session [Session | nil] Session to consider.
  # @param connection [Connection | nil] Connection to unpin.
  #
  # source://mongo//lib/mongo/operation/shared/response_handling.rb#93
  def unpin_maybe(session, connection); end

  # @api private
  # @param result [Mongo::Operation::Result] The operation result.
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/operation/shared/response_handling.rb#32
  def validate_result(result, connection, context); end
end

# Result wrapper for wire protocol replies.
#
# An operation has zero or one replies. The only operations producing zero
# replies are unacknowledged writes; all other operations produce one reply.
# This class provides an object that can be operated on (for example, to
# check whether an operation succeeded) even when the operation did not
# produce a reply (in which case it is assumed to have succeeded).
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/result/aggregatable.rb#20
class Mongo::Operation::Result
  include ::Enumerable
  extend ::Forwardable

  # Initialize a new result.
  #
  # For an unkacknowledged write, pass nil in replies.
  #
  # For all other operations, replies must be a Protocol::Message instance
  # or an array containing a single Protocol::Message instance.
  #
  # @api private
  # @param replies [Protocol::Message | Array<Protocol::Message> | nil] The wire protocol replies.
  # @param connection_description [Server::Description | nil] Server description of the server that performed the operation that
  #   this result is for. This parameter is allowed to be nil for
  #   compatibility with existing mongo_kerberos library, but should
  #   always be not nil in the driver proper.
  # @param connection_global_id [Integer] Global id of the connection on which the operation that
  #   this result is for was performed.
  # @return [Result] a new instance of Result
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#105
  def initialize(replies, connection_description = T.unsafe(nil), connection_global_id = T.unsafe(nil)); end

  # Is the result acknowledged?
  #
  # @api public
  # @note On MongoDB 2.6 and higher all writes are acknowledged since the
  #   driver uses write commands for all write operations. On 2.4 and
  #   lower, the result is acknowledged if the GLE has been executed after
  #   the command. If not, no replies will be specified. Reads will always
  #   return true here since a replies is always provided.
  # @return [true, false] If the result is acknowledged.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#157
  def acknowledged?; end

  # Get the cluster time reported in the server response.
  #
  # Changed in version 2.9.0: This attribute became an instance of
  # ClusterTime, which is a subclass of BSON::Document.
  # Previously it was an instance of BSON::Document.
  #
  # @api public
  # @example Get the cluster time.
  #   result.cluster_time
  # @return [ClusterTime | nil] The cluster time document.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/result.rb#424
  def cluster_time; end

  # @api private
  # @return [Server::Description] Server description of the server that
  #   the operation was performed on that this result is for.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#133
  def connection_description; end

  # @api private
  # @return [Object] Global is of the connection that
  #   the operation was performed on that this result is for.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#139
  def connection_global_id; end

  # Get the cursor id if the response is acknowledged.
  #
  # @api private
  # @example Get the cursor id.
  #   result.cursor_id
  # @note Cursor ids of 0 indicate there is no cursor on the server.
  # @return [Integer] The cursor id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#181
  def cursor_id; end

  # Get the documents in the result.
  #
  # @api public
  # @example Get the documents.
  #   result.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#205
  def documents; end

  # Iterate over the documents in the replies.
  #
  # @api public
  # @example Iterate over the documents.
  #   result.each do |doc|
  #   p doc
  #   end
  # @return [Enumerator] The enumerator.
  # @since 2.0.0
  # @yieldparam Each [BSON::Document] document in the result.
  #
  # source://mongo//lib/mongo/operation/result.rb#226
  def each(&block); end

  # The exception instance (of the Error::OperationFailure class)
  # that would be raised during processing of this result.
  #
  # This method should only be called when result is not successful.
  #
  # @api private
  # @return [Error::OperationFailure] The exception.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#341
  def error; end

  # Whether the result contains cursor_id
  #
  # @api private
  # @return [true, false] If the result contains cursor_id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#166
  def has_cursor_id?; end

  # Get the pretty formatted inspection of the result.
  #
  # @api public
  # @example Inspect the result.
  #   result.inspect
  # @return [String] The inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#239
  def inspect; end

  # Gets the set of error labels associated with the result.
  #
  # @api private
  # @example Get the labels.
  #   result.labels
  # @return [Array] labels The set of labels.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/operation/result.rb#437
  def labels; end

  # Get the number of documents written by the server.
  #
  # @api public
  # @api public
  # @example Get the number of documents written.
  #   result.written_count
  # @return [Integer] The number of documents written.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#387
  def n; end

  # Get the namespace of the cursor. The method should be defined in
  # result classes where 'ns' is in the server response.
  #
  # @api private
  # @return [Nil]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#192
  def namespace; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def node_recovering?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def node_shutting_down?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def not_master?(*args, **_arg1, &block); end

  # Check the first document's ok field.
  #
  # @api public
  # @example Check the ok field.
  #   result.ok?
  # @return [true, false] If the command returned ok.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/result.rb#305
  def ok?; end

  # Get the operation time reported in the server response.
  #
  # @api public
  # @example Get the operation time.
  #   result.operation_time
  # @return [Object | nil] The operation time value.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/result.rb#407
  def operation_time; end

  # @api private
  # @return [Array<Protocol::Message>] replies The wrapped wire protocol replies.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#127
  def replies; end

  # Get the reply from the result.
  #
  # Returns nil if there is no reply (i.e. the operation was an
  # unacknowledged write).
  #
  # @api private
  # @return [Protocol::Message] The first reply.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#252
  def reply; end

  # Get the number of documents returned by the server in this batch.
  #
  # @api public
  # @return [Integer] The number of documents returned.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#266
  def returned_count; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#448
  def snapshot_timestamp; end

  # If the result was a command then determine if it was considered a
  # success.
  #
  # @api public
  # @example Was the command successful?
  #   result.successful?
  # @note If the write was unacknowledged, then this will always return
  #   true.
  # @return [true, false] If the command was successful.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#287
  def successful?; end

  # @api private
  # @return [TopologyVersion | nil] The topology version.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#370
  def topology_version; end

  # Validate the result by checking for any errors.
  #
  # @api private
  # @example Validate the result.
  #   result.validate!
  # @note This only checks for errors with writes since authentication is
  #   handled at the connection level and any authentication errors would
  #   be raised there, before a Result is ever created.
  # @raise [Error::OperationFailure] If an error is in the result.
  # @return [Result] The result if verification passed.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#329
  def validate!; end

  # Whether the operation failed with a write concern error.
  #
  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#444
  def write_concern_error?; end

  # Get the number of documents written by the server.
  #
  # @api public
  # @example Get the number of documents written.
  #   result.written_count
  # @return [Integer] The number of documents written.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#387
  def written_count; end

  private

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#456
  def aggregate_returned_count; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#463
  def aggregate_written_count; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#474
  def first_document; end

  # @api semiprivate
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#470
  def parser; end

  # @api semiprivate
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#478
  def query_failure?; end

  # Raises a Mongo::OperationFailure exception corresponding to the
  # error information in this result.
  #
  # @api semiprivate
  # @raise Error::OperationFailure
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/result.rb#363
  def raise_operation_failure; end
end

# Defines custom behavior of bulk write results
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/result/aggregatable.rb#26
module Mongo::Operation::Result::Aggregatable
  # Aggregate the write concern errors returned from this result.
  #
  # @api private
  # @example Aggregate the write concern errors.
  #   result.aggregate_write_concern_errors(100)
  # @param count [Integer] The number of documents already executed.
  # @return [Array] The aggregate write concern errors.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/result/aggregatable.rb#60
  def aggregate_write_concern_errors(count); end

  # Aggregate the write errors returned from this result.
  #
  # @api private
  # @example Aggregate the write errors.
  #   result.aggregate_write_errors(0)
  # @param count [Integer] The number of documents already executed.
  # @return [Array] The aggregate write errors.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/result/aggregatable.rb#38
  def aggregate_write_errors(count); end
end

# The field name for the cursor document in an aggregation.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#42
Mongo::Operation::Result::CURSOR = T.let(T.unsafe(nil), String)

# The cursor id field in the cursor document.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#48
Mongo::Operation::Result::CURSOR_ID = T.let(T.unsafe(nil), String)

# The field name for the first batch of a cursor.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#54
Mongo::Operation::Result::FIRST_BATCH = T.let(T.unsafe(nil), String)

# The number of documents updated in the write.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/result.rb#72
Mongo::Operation::Result::N = T.let(T.unsafe(nil), String)

# The namespace field in the cursor document.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#66
Mongo::Operation::Result::NAMESPACE = T.let(T.unsafe(nil), String)

# The field name for the next batch of a cursor.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#60
Mongo::Operation::Result::NEXT_BATCH = T.let(T.unsafe(nil), String)

# The ok status field in the result.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/result.rb#78
Mongo::Operation::Result::OK = T.let(T.unsafe(nil), String)

# The result field constant.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/result.rb#84
Mongo::Operation::Result::RESULT = T.let(T.unsafe(nil), String)

# This module creates the Parser instance in legacy mode.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/result/use_legacy_error_parser.rb#25
module Mongo::Operation::Result::UseLegacyErrorParser
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/result/use_legacy_error_parser.rb#26
  def parser; end
end

# Shared behavior of operations that support a session.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/sessions_supported.rb#25
module Mongo::Operation::SessionsSupported
  private

  # Adds $readPreference field to the command document.
  #
  # $readPreference is only sent when the server is a mongos,
  # following the rules described in
  # https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst#passing-read-preference-to-mongos.
  # The topology does not matter for figuring out whether to send
  # $readPreference since the decision is always made based on
  # server type.
  #
  # $readPreference is sent to OP_MSG-grokking replica set members.
  #
  # @api private
  # @param sel [Hash] Existing command document which will be mutated.
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#167
  def add_read_preference(sel, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#96
  def add_write_concern!(sel); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#100
  def apply_autocommit!(selector); end

  # Adds causal consistency document to the selector, if one can be
  # constructed and the selector is for a startTransaction command.
  #
  # When operations are performed in a transaction, only the first
  # operation (the one which starts the transaction via startTransaction)
  # is allowed to have a read concern, and with it the causal consistency
  # document, specified.
  #
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#51
  def apply_causal_consistency!(selector, connection); end

  # Adds causal consistency document to the selector, if one can be
  # constructed.
  #
  # In order for the causal consistency document to be constructed,
  # causal consistency must be enabled for the session and the session
  # must have the current operation time. Also, topology must be
  # replica set or sharded cluster.
  #
  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#64
  def apply_causal_consistency_if_possible(selector, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#79
  def apply_cluster_time!(selector, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#112
  def apply_read_pref!(selector); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#215
  def apply_session_options(sel, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#104
  def apply_start_transaction!(selector); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#108
  def apply_txn_num!(selector); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#116
  def apply_txn_opts!(selector); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#244
  def build_message(connection, context); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#128
  def command(connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#75
  def flags; end

  # @api private
  # @return [Boolean]
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#92
  def read_command?(sel); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#120
  def suppress_read_write_concern!(selector); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/sessions_supported.rb#124
  def validate_read_preference!(selector); end
end

# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/sessions_supported.rb#31
Mongo::Operation::SessionsSupported::READ_COMMANDS = T.let(T.unsafe(nil), Array)

# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/sessions_supported.rb#29
Mongo::Operation::SessionsSupported::ZERO_TIMESTAMP = T.let(T.unsafe(nil), BSON::Timestamp)

# This module contains common functionality for convenience methods getting
# various values from the spec.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#26
module Mongo::Operation::Specifiable
  # Create the new specifiable operation.
  #
  # @api private
  # @example Create the new specifiable operation.
  #   Specifiable.new(spec)
  # @param spec [Hash] The operation specification.
  # @see The individual operations for the values they require in their
  #   specs.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#298
  def initialize(spec); end

  # Check equality of two specifiable operations.
  #
  # @api private
  # @example Are the operations equal?
  #   operation == other
  # @param other [Object] The other operation.
  # @return [true, false] Whether the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#161
  def ==(other); end

  # Does the operation have an acknowledged write concern.
  #
  # @api private
  # @example Determine whether the operation has an acknowledged write.
  #   specifiable.array_filters
  # @return [Boolean] Whether or not the operation has an acknowledged write concern.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#552
  def acknowledged_write?; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#556
  def apply_collation(selector, connection, collation); end

  # The array filters.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash | nil] The array filters.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#539
  def array_filters(connection); end

  # Whether or not to bypass document level validation.
  #
  # @api private
  # @example Get the bypass_document_validation option.
  #   specifiable.bypass_documentation_validation.
  # @return [true, false] Whether to bypass document level validation.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#361
  def bypass_document_validation; end

  # The name of the collection to which the operation should be sent.
  #
  # @api private
  # @example Get the collection name.
  #   specifiable.coll_name
  # @return [String] Collection name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#235
  def coll_name; end

  # The collation to apply to the operation.
  #
  # @api private
  # @example Get the collation option.
  #   specifiable.collation.
  # @return [Hash] The collation document.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#373
  def collation; end

  # The command.
  #
  # @api private
  # @return [Hash] The command.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#527
  def command(connection); end

  # Get the cursor count from the spec.
  #
  # @api private
  # @example Get the cursor count.
  #   specifiable.cursor_count
  # @return [Integer] The cursor count.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#175
  def cursor_count; end

  # The id of the cursor created on the server.
  #
  # @api private
  # @example Get the cursor id.
  #   specifiable.cursor_id
  # @return [Integer] The cursor id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#247
  def cursor_id; end

  # The name of the database to which the operation should be sent.
  #
  # @api private
  # @example Get the database name.
  #   specifiable.db_name
  # @return [String] Database name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#187
  def db_name; end

  # Get the delete document from the specification.
  #
  # @api private
  # @example Get the delete document.
  #   specifiable.delete
  # @return [Hash] The delete document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#211
  def delete; end

  # Get the deletes from the specification.
  #
  # @api private
  # @example Get the deletes.
  #   specifiable.deletes
  # @return [Array<BSON::Document>] The deletes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#199
  def deletes; end

  # The documents to in the specification.
  #
  # @api private
  # @example Get the documents.
  #   specifiable.documents
  # @return [Array<BSON::Document>] The documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#223
  def documents; end

  # Check equality of two specifiable operations.
  #
  # @api private
  # @example Are the operations equal?
  #   operation == other
  # @param other [Object] The other operation.
  # @return [true, false] Whether the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#161
  def eql?(other); end

  # Get the index from the specification.
  #
  # @api private
  # @example Get the index specification.
  #   specifiable.index
  # @return [Hash] The index specification.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#259
  def index; end

  # Get the index name from the spec.
  #
  # @api private
  # @example Get the index name.
  #   specifiable.index_name
  # @return [String] The index name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#271
  def index_name; end

  # Get the indexes from the specification.
  #
  # @api private
  # @example Get the index specifications.
  #   specifiable.indexes
  # @return [Hash] The index specifications.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#283
  def indexes; end

  # Get the max time ms value from the spec.
  #
  # @api private
  # @example Get the max time ms.
  #   specifiable.max_time_ms
  # @return [Hash] The max time ms value.
  # @since 2.2.5
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#349
  def max_time_ms; end

  # The namespace, consisting of the db name and collection name.
  #
  # @api private
  # @example Get the namespace.
  #   specifiable.namespace
  # @return [String] The namespace.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#494
  def namespace; end

  # Get the operation id for the operation. Used for linking operations in
  # monitoring.
  #
  # @api private
  # @example Get the operation id.
  #   specifiable.operation_id
  # @return [Integer] The operation id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#311
  def operation_id; end

  # Get the options for executing the operation on a particular connection.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash] The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#323
  def options(connection); end

  # Whether the operation is ordered.
  #
  # @api private
  # @example Get the ordered value, true is the default.
  #   specifiable.ordered?
  # @return [true, false] Whether the operation is ordered.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#482
  def ordered?; end

  # The read preference for this operation.
  #
  # @api private
  # @example Get the read preference.
  #   specifiable.read
  # @return [Mongo::ServerSelector] The read preference.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#468
  def read; end

  # Get the read concern document from the spec.
  #
  # @api private
  # @example Get the read concern.
  #   specifiable.read_concern
  # @note The document may include afterClusterTime.
  # @return [Hash] The read concern document.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#337
  def read_concern; end

  # The selector from the specification for execution on a particular
  # connection.
  #
  # @api private
  # @param connection [Server::Connection] The connection that the
  #   operation will be executed on.
  # @return [Hash] The selector spec.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#386
  def selector(connection); end

  # The session to use for the operation.
  #
  # @api private
  # @example Get the session.
  #   specifiable.session
  # @return [Session] The session.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#506
  def session; end

  # @api private
  # @return [Hash] spec The specification for the operation.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#149
  def spec; end

  # The number of documents to request from the server.
  #
  # @api private
  # @example Get the to return value from the spec.
  #   specifiable.to_return
  # @return [Integer] The number of documents to return.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#398
  def to_return; end

  # The transaction number for the operation.
  #
  # @api private
  # @example Get the transaction number.
  #   specifiable.txn_num
  # @return [Integer] The transaction number.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#518
  def txn_num; end

  # The update document from the spec.
  #
  # @api private
  # @example Get the update document.
  # @return [Hash] The update document.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#420
  def update; end

  # The update documents from the spec.
  #
  # @api private
  # @example Get the update documents.
  # @return [Array<BSON::Document>] The update documents.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#409
  def updates; end

  # The user for user related operations.
  #
  # @api private
  # @example Get the user.
  #   specifiable.user
  # @return [Auth::User] The user.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#432
  def user; end

  # The user name from the specification.
  #
  # @api private
  # @example Get the user name.
  #   specifiable.user_name
  # @return [String] The user name.
  # @since 2.0.
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#444
  def user_name; end

  # The write concern to use for this operation.
  #
  # @api private
  # @example Get the write concern.
  #   specifiable.write_concern
  # @return [Mongo::WriteConcern] The write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/shared/specifiable.rb#456
  def write_concern; end
end

# Whether to bypass document level validation.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#141
Mongo::Operation::Specifiable::BYPASS_DOC_VALIDATION = T.let(T.unsafe(nil), Symbol)

# A collation to apply to the operation.
#
# @api private
# @since 2.4.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#146
Mongo::Operation::Specifiable::COLLATION = T.let(T.unsafe(nil), Symbol)

# The field for collection name.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#51
Mongo::Operation::Specifiable::COLL_NAME = T.let(T.unsafe(nil), Symbol)

# The field for cursor count.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#56
Mongo::Operation::Specifiable::CURSOR_COUNT = T.let(T.unsafe(nil), Symbol)

# The field for cursor id.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#61
Mongo::Operation::Specifiable::CURSOR_ID = T.let(T.unsafe(nil), Symbol)

# The field for database name.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#31
Mongo::Operation::Specifiable::DB_NAME = T.let(T.unsafe(nil), Symbol)

# The field for delete.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#41
Mongo::Operation::Specifiable::DELETE = T.let(T.unsafe(nil), Symbol)

# The field for deletes.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#36
Mongo::Operation::Specifiable::DELETES = T.let(T.unsafe(nil), Symbol)

# The field for documents.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#46
Mongo::Operation::Specifiable::DOCUMENTS = T.let(T.unsafe(nil), Symbol)

# The field for an index.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#66
Mongo::Operation::Specifiable::INDEX = T.let(T.unsafe(nil), Symbol)

# The field for multiple indexes.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#71
Mongo::Operation::Specifiable::INDEXES = T.let(T.unsafe(nil), Symbol)

# The field for index names.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#76
Mongo::Operation::Specifiable::INDEX_NAME = T.let(T.unsafe(nil), Symbol)

# The max time ms option.
#
# @api private
# @since 2.2.5
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#96
Mongo::Operation::Specifiable::MAX_TIME_MS = T.let(T.unsafe(nil), Symbol)

# The operation id constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#81
Mongo::Operation::Specifiable::OPERATION_ID = T.let(T.unsafe(nil), Symbol)

# The field for options.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#86
Mongo::Operation::Specifiable::OPTIONS = T.let(T.unsafe(nil), Symbol)

# The field name for the read preference.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#136
Mongo::Operation::Specifiable::READ = T.let(T.unsafe(nil), Symbol)

# The read concern option.
#
# @api private
# @since 2.2.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#91
Mongo::Operation::Specifiable::READ_CONCERN = T.let(T.unsafe(nil), Symbol)

# The field for a selector.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#101
Mongo::Operation::Specifiable::SELECTOR = T.let(T.unsafe(nil), Symbol)

# The field for number to return.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#106
Mongo::Operation::Specifiable::TO_RETURN = T.let(T.unsafe(nil), Symbol)

# The field for update.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#116
Mongo::Operation::Specifiable::UPDATE = T.let(T.unsafe(nil), Symbol)

# The field for updates.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#111
Mongo::Operation::Specifiable::UPDATES = T.let(T.unsafe(nil), Symbol)

# The field name for a user.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#121
Mongo::Operation::Specifiable::USER = T.let(T.unsafe(nil), Symbol)

# The field name for user name.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#126
Mongo::Operation::Specifiable::USER_NAME = T.let(T.unsafe(nil), Symbol)

# The field name for a write concern.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/shared/specifiable.rb#131
Mongo::Operation::Specifiable::WRITE_CONCERN = T.let(T.unsafe(nil), Symbol)

# The u field constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation.rb#76
Mongo::Operation::U = T.let(T.unsafe(nil), String)

# The upsert field constant.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation.rb#91
Mongo::Operation::UPSERT = T.let(T.unsafe(nil), String)

# A MongoDB update operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/op_msg.rb#20
class Mongo::Operation::Update
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::ResponseHandling
  include ::Mongo::Operation::Write
end

# Defines custom behavior of results for an udpate when sent as part of a bulk write.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/bulk_result.rb#25
class Mongo::Operation::Update::BulkResult < ::Mongo::Operation::Result
  include ::Mongo::Operation::Result::Aggregatable

  # Gets the number of documents matched.
  #
  # @example Get the matched count.
  #   result.n_matched
  # @return [Integer] The number of documents matched.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/bulk_result.rb#65
  def n_matched; end

  # Gets the number of documents modified.
  # Not that in a mixed sharded cluster a call to
  # update could return nModified (>= 2.6) or not (<= 2.4).
  # If any call does not return nModified we can't report
  # a valid final count so set the field to nil.
  #
  # @example Get the modified count.
  #   result.n_modified
  # @return [Integer] The number of documents modified.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/bulk_result.rb#92
  def n_modified; end

  # Gets the number of documents upserted.
  #
  # @example Get the upserted count.
  #   result.n_upserted
  # @return [Integer] The number of documents upserted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/bulk_result.rb#46
  def n_upserted; end

  # Get the upserted documents.
  #
  # @example Get upserted documents.
  #   result.upserted
  # @return [Array<BSON::Document>] The upserted document info
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/update/bulk_result.rb#111
  def upserted; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/bulk_result.rb#123
  def upsert?(reply); end
end

# The number of modified docs field in the result.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/bulk_result.rb#31
Mongo::Operation::Update::BulkResult::MODIFIED = T.let(T.unsafe(nil), String)

# The upserted docs field in the result.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/bulk_result.rb#36
Mongo::Operation::Update::BulkResult::UPSERTED = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update.rb#36
Mongo::Operation::Update::IDENTIFIER = T.let(T.unsafe(nil), String)

# A MongoDB update operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/update/op_msg.rb#27
class Mongo::Operation::Update::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::BypassDocumentValidation
  include ::Mongo::Operation::ExecutableNoValidate
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  include ::Mongo::Operation::Validatable
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/update/op_msg.rb#45
  def message(connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/update/op_msg.rb#36
  def selector(connection); end
end

# Defines custom behavior of results for an update.
#
# @api semiprivate
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/result.rb#26
class Mongo::Operation::Update::Result < ::Mongo::Operation::Result
  # @api public
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/result.rb#101
  def bulk_result; end

  # Get the number of documents matched.
  #
  # @api public
  # @example Get the matched count.
  #   result.matched_count
  # @return [Integer] The matched count.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/result.rb#49
  def matched_count; end

  # Get the number of documents modified.
  #
  # @api public
  # @example Get the modified count.
  #   result.modified_count
  # @return [Integer] The modified count.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/result.rb#67
  def modified_count; end

  # Returns the number of documents upserted.
  #
  # @api public
  # @example Get the number of upserted documents.
  #   result.upserted_count
  # @return [Integer] The number upserted.
  # @since 2.4.2
  #
  # source://mongo//lib/mongo/operation/update/result.rb#96
  def upserted_count; end

  # The identifier of the inserted document if an upsert
  #   took place.
  #
  # @api public
  # @example Get the upserted document's identifier.
  #   result.upserted_id
  # @return [Object] The upserted id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/result.rb#82
  def upserted_id; end

  private

  # @api semiprivate
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/operation/update/result.rb#107
  def upsert?; end
end

# The number of modified docs field in the result.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/result.rb#32
Mongo::Operation::Update::Result::MODIFIED = T.let(T.unsafe(nil), String)

# The upserted docs field in the result.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update/result.rb#38
Mongo::Operation::Update::Result::UPSERTED = T.let(T.unsafe(nil), String)

# A MongoDB updateuser operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/update_user/op_msg.rb#20
class Mongo::Operation::UpdateUser
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB updateuser operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/update_user/op_msg.rb#27
class Mongo::Operation::UpdateUser::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/update_user/op_msg.rb#32
  def selector(connection); end
end

# A MongoDB usersinfo operation.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/operation/users_info/op_msg.rb#20
class Mongo::Operation::UsersInfo
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB usersinfo operation sent as an op message.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/users_info/op_msg.rb#27
class Mongo::Operation::UsersInfo::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::ExecutableTransactionLabel
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::PolymorphicResult
  extend ::Mongo::Operation::PolymorphicResult::ClassMethods

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/users_info/op_msg.rb#33
  def selector(connection); end
end

# Defines custom behavior of results when using the
# usersInfo command.
#
# @api semiprivate
# @since 2.1.0
#
# source://mongo//lib/mongo/operation/users_info/result.rb#27
class Mongo::Operation::UsersInfo::Result < ::Mongo::Operation::Result
  # @api public
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/users_info/result.rb#36
  def documents; end

  private

  # @api semiprivate
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/operation/users_info/result.rb#42
  def first_document; end
end

# The field name for the users document in a usersInfo result.
#
# @api private
# @since 2.1.0
#
# source://mongo//lib/mongo/operation/users_info/result.rb#33
Mongo::Operation::UsersInfo::Result::USERS = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/operation/shared/validatable.rb#22
module Mongo::Operation::Validatable
  # selector_or_item here is either:
  # - The selector as used in a findAndModify command, or
  # - One of the array elements in the updates array in an update command.
  #
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/validatable.rb#58
  def validate_array_filters(connection, selector_or_item); end

  # selector_or_item here is either:
  # - The selector as used in a findAndModify command, or
  # - One of the array elements in the updates array in an update command.
  #
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/validatable.rb#69
  def validate_collation(connection, selector_or_item); end

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/validatable.rb#24
  def validate_find_options(connection, selector); end

  # selector_or_item here is either:
  # - The selector as used in a findAndModify command, or
  # - One of the array elements in the updates array in an update command.
  #
  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/validatable.rb#47
  def validate_hint_on_update(connection, selector_or_item); end

  # @api private
  #
  # source://mongo//lib/mongo/operation/shared/validatable.rb#77
  def validate_updates(connection, updates); end
end

# Shared behavior of operations that write (update, insert, delete).
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/write.rb#25
module Mongo::Operation::Write
  include ::Mongo::Operation::ResponseHandling

  # Execute the bulk write operation.
  #
  # @api private
  # @param connection [Mongo::Server::Connection] The connection over
  #   which to send the operation.
  # @param context [Operation::Context] The operation context.
  # @return [Mongo::Operation::Delete::BulkResult, Mongo::Operation::Insert::BulkResult, Mongo::Operation::Update::BulkResult] The bulk result.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write.rb#70
  def bulk_execute(connection, context:); end

  # Execute the operation.
  #
  # @api private
  # @param server [Mongo::Server] The server to send the operation to.
  # @param context [Operation::Context] The operation context.
  # @return [Mongo::Operation::Result] The operation result.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write.rb#37
  def execute(server, context:); end

  # Execute the operation.
  #
  # @api private
  # @param connection [Mongo::Server::Connection] The connection to send
  #   the operation through.
  # @param context [Operation::Context] The operation context.
  # @param options [Hash] Operation execution options.
  # @return [Mongo::Operation::Result] The operation result.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write.rb#51
  def execute_with_connection(connection, context:); end

  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write.rb#82
  def validate!(connection); end
end

# A MongoDB general command operation.
#
# @api private
#
# source://mongo//lib/mongo/operation/write_command/op_msg.rb#20
class Mongo::Operation::WriteCommand
  include ::Mongo::Operation::Specifiable
  include ::Mongo::Operation::PolymorphicLookup
  include ::Mongo::Operation::OpMsgExecutable
end

# A MongoDB write command operation sent as an op message.
#
# @api private
#
# source://mongo//lib/mongo/operation/write_command/op_msg.rb#25
class Mongo::Operation::WriteCommand::OpMsg < ::Mongo::Operation::OpMsgBase
  include ::Mongo::Operation::Validatable

  private

  # @api private
  #
  # source://mongo//lib/mongo/operation/write_command/op_msg.rb#30
  def selector(connection); end
end

# Custom behavior for operations that support write concern.
#
# @api private
# @since 2.5.2
#
# source://mongo//lib/mongo/operation/shared/write_concern_supported.rb#25
module Mongo::Operation::WriteConcernSupported
  private

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write_concern_supported.rb#35
  def add_write_concern!(sel, connection); end

  # @api private
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write_concern_supported.rb#31
  def command(connection); end

  # @api private
  # @return [Boolean]
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/operation/shared/write_concern_supported.rb#29
  def write_concern_supported?(connection); end
end

# source://mongo//lib/mongo/options/mapper.rb#19
module Mongo::Options; end

# Utility class for various options mapping behavior.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/options/mapper.rb#24
module Mongo::Options::Mapper
  extend ::Mongo::Options::Mapper

  # Transforms the provided options to a new set of options given the
  # provided mapping.
  #
  # Options which are not present in the provided mapping
  # are returned unmodified.
  #
  # @example Transform the options.
  #   Mapper.transform({ name: 1 }, { :name => :nombre })
  # @param options [Hash] The options to transform
  # @param mappings [Hash] The key mappings.
  # @return [Hash] The transformed options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/options/mapper.rb#42
  def transform(options, mappings); end

  # Transforms the provided options to a new set of options given the
  # provided mapping. Expects BSON::Documents in and out so no explicit
  # string conversion needs to happen.
  #
  # @example Transform the options.
  #   Mapper.transform_documents({ name: 1 }, { :name => :nombre })
  # @param options [BSON::Document] The options to transform
  # @param mappings [BSON::Document] The key mappings.
  # @param document [BSON::Document] The output document.
  # @return [BSON::Document] The transformed options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/options/mapper.rb#69
  def transform_documents(options, mappings, document = T.unsafe(nil)); end

  # Coverts all the keys of the options to strings.
  #
  # @example Convert all option keys to strings.
  #   Mapper.transform({ :name => 1 })
  # @param options [Hash] The options to transform.
  # @return [Hash] The transformed options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/options/mapper.rb#87
  def transform_keys_to_strings(options); end

  # Coverts all the keys of the options to symbols.
  #
  # @example Convert all option keys to symbols.
  #   Mapper.transform({ 'name' => 1 })
  # @param options [Hash] The options to transform.
  # @return [Hash] The transformed options.
  # @since 2.2.2
  #
  # source://mongo//lib/mongo/options/mapper.rb#104
  def transform_keys_to_symbols(options); end

  # Coverts all the symbol values to strings.
  #
  # @example Convert all option symbol values to strings.
  #   Mapper.transform({ :name => 1 })
  # @param options [Hash] The options to transform.
  # @return [Hash] The transformed options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/options/mapper.rb#121
  def transform_values_to_strings(options); end
end

# Class for wrapping options that could be sensitive.
# When printed, the sensitive values will be redacted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/options/redacted.rb#25
class Mongo::Options::Redacted < ::BSON::Document
  # Whether these options contain a given key.
  #
  # @example Determine if the options contain a given key.
  #   options.has_key?(:name)
  # @param key [String, Symbol] The key to check for existence.
  # @return [true, false] If the options contain the given key.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#66
  def has_key?(key); end

  # Get a string representation of the options.
  #
  # @return [String] The string representation of the options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#43
  def inspect; end

  # Whether these options contain a given key.
  #
  # @example Determine if the options contain a given key.
  #   options.has_key?(:name)
  # @param key [String, Symbol] The key to check for existence.
  # @return [true, false] If the options contain the given key.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#66
  def key?(key); end

  # Returns a new options object consisting of pairs for which the block returns false.
  #
  # @example Get a new options object with pairs for which the block returns false.
  #   new_options = options.reject { |k, v| k == 'database' }
  # @return [Options::Redacted] A new options object.
  # @since 2.1.0
  # @yieldparam The [String, Object] key as a string and its value.
  #
  # source://mongo//lib/mongo/options/redacted.rb#81
  def reject(&block); end

  # Only keeps pairs for which the block returns false.
  #
  # @example Remove pairs from this object for which the block returns true.
  #   options.reject! { |k, v| k == 'database' }
  # @return [Options::Redacted, nil] This object or nil if no changes were made.
  # @since 2.1.0
  # @yieldparam The [String, Object] key as a string and its value.
  #
  # source://mongo//lib/mongo/options/redacted.rb#96
  def reject!; end

  # Returns a new options object consisting of pairs for which the block returns true.
  #
  # @example Get a new options object with pairs for which the block returns true.
  #   ssl_options = options.select { |k, v| k =~ /ssl/ }
  # @return [Options::Redacted] A new options object.
  # @since 2.1.0
  # @yieldparam The [String, Object] key as a string and its value.
  #
  # source://mongo//lib/mongo/options/redacted.rb#118
  def select(&block); end

  # Only keeps pairs for which the block returns true.
  #
  # @example Remove pairs from this object for which the block does not return true.
  #   options.select! { |k, v| k =~ /ssl/ }
  # @return [Options::Redacted, nil] This object or nil if no changes were made.
  # @since 2.1.0
  # @yieldparam The [String, Object] key as a string and its value.
  #
  # source://mongo//lib/mongo/options/redacted.rb#133
  def select!; end

  # Get a string representation of the options.
  #
  # @return [String] The string representation of the options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#52
  def to_s; end

  private

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#153
  def redact(k, v, method); end

  # @since 2.1.0
  #
  # source://mongo//lib/mongo/options/redacted.rb#147
  def redacted_string(method); end
end

# The options whose values will be redacted.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/options/redacted.rb#30
Mongo::Options::Redacted::SENSITIVE_OPTIONS = T.let(T.unsafe(nil), Array)

# The replacement string used in place of the value for sensitive keys.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/options/redacted.rb#36
Mongo::Options::Redacted::STRING_REPLACEMENT = T.let(T.unsafe(nil), String)

# source://mongo//lib/mongo/protocol/serializers.rb#19
module Mongo::Protocol; end

# A Hash that caches the results of #to_bson.
#
# @api private
#
# source://mongo//lib/mongo/protocol/caching_hash.rb#24
class Mongo::Protocol::CachingHash
  # @api private
  # @return [CachingHash] a new instance of CachingHash
  #
  # source://mongo//lib/mongo/protocol/caching_hash.rb#26
  def initialize(hash); end

  # @api private
  #
  # source://mongo//lib/mongo/protocol/caching_hash.rb#30
  def bson_type; end

  # Caches the result of to_bson and writes it to the given buffer on subsequent
  # calls to this method. If this method is originally called without validation,
  # and then is subsequently called with validation, we will want to recalculate
  # the to_bson to trigger the validations.
  #
  # @api private
  # @param buffer [BSON::ByteBuffer] The encoded BSON buffer to append to.
  # @param validating_keys [true, false] Whether keys should be validated when serializing.
  #   This option is deprecated and will not be used. It will removed in version 3.0.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  #
  # source://mongo//lib/mongo/protocol/caching_hash.rb#44
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# MongoDB Wire protocol Compressed message.
#
# This is a bi-directional message that compresses another opcode.
# See https://github.com/mongodb/specifications/blob/master/source/compression/OP_COMPRESSED.rst
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#29
class Mongo::Protocol::Compressed < ::Mongo::Protocol::Message
  # Creates a new OP_COMPRESSED message.
  #
  # @api semipublic
  # @example Create an OP_COMPRESSED message.
  #   Compressed.new(original_message, 'zlib')
  # @param message [Mongo::Protocol::Message] The original message.
  # @param compressor [String, Symbol] The compression algorithm to use.
  # @param zlib_compression_level [Integer] The zlib compression level to use.
  #   -1 and nil imply default.
  # @return [Compressed] a new instance of Compressed
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#79
  def initialize(message, compressor, zlib_compression_level = T.unsafe(nil)); end

  # @return [String] The actual compressed message bytes.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def compressed_message; end

  # @return [String] The id of the compressor as a single byte.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def compressor_id; end

  # Inflates an OP_COMRESSED message and returns the original message.
  #
  # @api private
  # @return [Protocol::Message] The inflated message.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#95
  def maybe_inflate; end

  def op_code; end

  # Field representing the original message's op code as an Int32.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def original_op_code; end

  # Whether the message expects a reply from the database.
  #
  # @api semipublic
  # @example Does the message require a reply?
  #   message.replyable?
  # @return [true, false] If the message expects a reply.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#120
  def replyable?; end

  # @return [Fixnum] The size of the original message, excluding header as an Int32.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def uncompressed_size; end

  private

  # @api semipublic
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#156
  def compress(buffer); end

  # @api semipublic
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#169
  def decompress(compressed_message); end

  # @api semipublic
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/compressed.rb#148
  def serialize_fields(buffer, max_bson_size); end
end

# The compressor identifier to byte map.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#62
Mongo::Protocol::Compressed::COMPRESSOR_ID_MAP = T.let(T.unsafe(nil), Hash)

# The noop compressor identifier.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#32
Mongo::Protocol::Compressed::NOOP = T.let(T.unsafe(nil), String)

# The byte signaling that the message has not been compressed (test mode).
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#35
Mongo::Protocol::Compressed::NOOP_BYTE = T.let(T.unsafe(nil), String)

# The operation code for a +Compressed+ message.
#
# @api semipublic
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#130
Mongo::Protocol::Compressed::OP_CODE = T.let(T.unsafe(nil), Integer)

# The snappy compressor identifier.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#38
Mongo::Protocol::Compressed::SNAPPY = T.let(T.unsafe(nil), String)

# The byte signaling that the message has been compressed with snappy.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#41
Mongo::Protocol::Compressed::SNAPPY_BYTE = T.let(T.unsafe(nil), String)

# The Zlib compressor identifier.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#51
Mongo::Protocol::Compressed::ZLIB = T.let(T.unsafe(nil), String)

# The byte signaling that the message has been compressed with Zlib.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#46
Mongo::Protocol::Compressed::ZLIB_BYTE = T.let(T.unsafe(nil), String)

# The zstd compressor identifier.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#54
Mongo::Protocol::Compressed::ZSTD = T.let(T.unsafe(nil), String)

# The byte signaling that the message has been compressed with zstd.
#
# @api semipublic
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/compressed.rb#57
Mongo::Protocol::Compressed::ZSTD_BYTE = T.let(T.unsafe(nil), String)

# MongoDB Wire protocol getMore message.
#
# This is a client request message that is sent to the server in order
# to retrieve additional documents from a cursor that has already been
# instantiated.
#
# The operation requires that you specify the database and collection
# name as well as the cursor id because cursors are scoped to a namespace.
#
# @api semipublic
#
# source://mongo//lib/mongo/protocol/get_more.rb#31
class Mongo::Protocol::GetMore < ::Mongo::Protocol::Message
  # Creates a new getMore message
  #
  # @api semipublic
  # @example Get 15 additional documents from cursor 123 in 'xgen.users'.
  #   GetMore.new('xgen', 'users', 15, 123)
  # @param database [String, Symbol] The database to query.
  # @param collection [String, Symbol] The collection to query.
  # @param number_to_return [Integer] The number of documents to return.
  # @param cursor_id [Integer] The cursor id returned in a reply.
  # @return [GetMore] a new instance of GetMore
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#42
  def initialize(database, collection, number_to_return, cursor_id); end

  # @return [Fixnum] The cursor id to get more documents from.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def cursor_id; end

  # @return [String] The namespace for this getMore message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def namespace; end

  # @return [Fixnum] The number to return for this getMore message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def number_to_return; end

  def op_code; end

  # Return the event payload for monitoring.
  #
  # @api semipublic
  # @example Return the event payload.
  #   message.payload
  # @return [BSON::Document] The event payload.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#59
  def payload; end

  # Get more messages require replies from the database.
  #
  # @api semipublic
  # @example Does the message require a reply?
  #   message.replyable?
  # @return [true] Always true for get more.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#76
  def replyable?; end

  # source://mongo//lib/mongo/protocol/message.rb#417
  def zero; end

  protected

  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#82
  def upconverter; end
end

# The operation code required to specify a getMore message.
#
# @api semipublic
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/get_more.rb#90
Mongo::Protocol::GetMore::OP_CODE = T.let(T.unsafe(nil), Integer)

# Converts legacy getMore messages to the appropriare OP_COMMAND style
# message.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/get_more.rb#111
class Mongo::Protocol::GetMore::Upconverter
  # Instantiate the upconverter.
  #
  # @api semipublic
  # @example Instantiate the upconverter.
  #   Upconverter.new('users', 1, 1)
  # @param collection [String] The name of the collection.
  # @param cursor_id [Integer] The cursor id.
  # @param number_to_return [Integer] The number of documents to
  #   return.
  # @return [Upconverter] a new instance of Upconverter
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#139
  def initialize(collection, cursor_id, number_to_return); end

  # @api semipublic
  # @return [String] collection The name of the collection.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#120
  def collection; end

  # Get the upconverted command.
  #
  # @api semipublic
  # @example Get the command.
  #   upconverter.command
  # @return [BSON::Document] The upconverted command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#153
  def command; end

  # @api semipublic
  # @return [Integer] cursor_id The cursor id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#123
  def cursor_id; end

  # @api semipublic
  # @return [Integer] number_to_return The number of docs to return.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/get_more.rb#126
  def number_to_return; end
end

# The get more constant.
#
# @api semipublic
# @deprecated
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/get_more.rb#117
Mongo::Protocol::GetMore::Upconverter::GET_MORE = T.let(T.unsafe(nil), String)

# MongoDB Wire protocol KillCursors message.
#
# This is a client request message that is sent to the server in order
# to kill a number of cursors.
#
# @api semipublic
#
# source://mongo//lib/mongo/protocol/kill_cursors.rb#27
class Mongo::Protocol::KillCursors < ::Mongo::Protocol::Message
  # Creates a new KillCursors message
  #
  # @api semipublic
  # @example Kill the cursor on the server with id 1.
  #   KillCursors.new([1])
  # @param collection [Mongo::Database] The collection.
  # @param database [Mongo::Database] The database.
  # @param cursor_ids [Array<Fixnum>] The cursor ids to kill.
  # @return [KillCursors] a new instance of KillCursors
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#37
  def initialize(collection, database, cursor_ids); end

  # @return [Array<Fixnum>] Cursors to kill.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def cursor_ids; end

  # @return [Fixnum] Count of the number of cursor ids.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def id_count; end

  def op_code; end

  # Return the event payload for monitoring.
  #
  # @api semipublic
  # @example Return the event payload.
  #   message.payload
  # @return [BSON::Document] The event payload.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#53
  def payload; end

  # source://mongo//lib/mongo/protocol/message.rb#417
  def zero; end

  protected

  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#64
  def upconverter; end
end

# The operation code required to specify +KillCursors+ message.
#
# @api semipublic
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/kill_cursors.rb#72
Mongo::Protocol::KillCursors::OP_CODE = T.let(T.unsafe(nil), Integer)

# Converts legacy insert messages to the appropriare OP_COMMAND style
# message.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/kill_cursors.rb#89
class Mongo::Protocol::KillCursors::Upconverter
  # Instantiate the upconverter.
  #
  # @api semipublic
  # @example Instantiate the upconverter.
  #   Upconverter.new('users', [ 1, 2, 3 ])
  # @param collection [String] The name of the collection.
  # @param cursor_ids [Array<Integer>] The cursor ids.
  # @return [Upconverter] a new instance of Upconverter
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#106
  def initialize(collection, cursor_ids); end

  # @api semipublic
  # @return [String] collection The name of the collection.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#92
  def collection; end

  # Get the upconverted command.
  #
  # @api semipublic
  # @example Get the command.
  #   upconverter.command
  # @return [BSON::Document] The upconverted command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#119
  def command; end

  # @api semipublic
  # @return [Array<Integer>] cursor_ids The cursor ids.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/kill_cursors.rb#95
  def cursor_ids; end
end

# A base class providing functionality required by all messages in
# the MongoDB wire protocol. It provides a minimal DSL for defining typed
# fields to enable serialization and deserialization over the wire.
#
# @abstract
# @api semiprivate
# @example
#   class WireProtocolMessage < Message
#
#   private
#
#   def op_code
#   1234
#   end
#
#   FLAGS = [:first_bit, :bit_two]
#
#   # payload
#   field :flags, BitVector.new(FLAGS)
#   field :namespace, CString
#   field :document, Document
#   field :documents, Document, true
#   end
#
# source://mongo//lib/mongo/protocol/message.rb#45
class Mongo::Protocol::Message
  include ::Mongo::Id
  include ::Mongo::Protocol::Serializers

  # @api semiprivate
  # @return [Message] a new instance of Message
  #
  # source://mongo//lib/mongo/protocol/message.rb#79
  def initialize(*args); end

  # Tests for equality between two wire protocol messages
  # by comparing class and field values.
  #
  # @api semiprivate
  # @param other [Mongo::Protocol::Message] The wire protocol message.
  # @return [true, false] The equality of the messages.
  #
  # source://mongo//lib/mongo/protocol/message.rb#298
  def ==(other); end

  # Tests for equality between two wire protocol messages
  # by comparing class and field values.
  #
  # @api semiprivate
  # @param other [Mongo::Protocol::Message] The wire protocol message.
  # @return [true, false] The equality of the messages.
  #
  # source://mongo//lib/mongo/protocol/message.rb#298
  def eql?(other); end

  # Creates a hash from the values of the fields of a message.
  #
  # @api semiprivate
  # @return [Fixnum] The hash code for the message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#311
  def hash; end

  # @api semiprivate
  # @raise [Error::ServerApiNotSupported]
  #
  # source://mongo//lib/mongo/protocol/message.rb#173
  def maybe_add_server_api(server_api); end

  # Compress the message, if supported by the wire protocol used and if
  # the command being sent permits compression. Otherwise returns self.
  #
  # @api private
  # @param compressor [String, Symbol] The compressor to use.
  # @param zlib_compression_level [Integer] The zlib compression level to use.
  # @return [self] Always returns self. Other message types should
  #   override this method.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#112
  def maybe_compress(compressor, zlib_compression_level = T.unsafe(nil)); end

  # Possibly decrypt this message with libmongocrypt.
  #
  # @api semiprivate
  # @param context [Mongo::Operation::Context] The operation context.
  # @return [Mongo::Protocol::Msg] The decrypted message, or the original
  #   message if decryption was not possible or necessary.
  #
  # source://mongo//lib/mongo/protocol/message.rb#152
  def maybe_decrypt(context); end

  # Possibly encrypt this message with libmongocrypt.
  #
  # @api semiprivate
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  # @return [Mongo::Protocol::Msg] The encrypted message, or the original
  #   message if encryption was not possible or necessary.
  #
  # source://mongo//lib/mongo/protocol/message.rb#168
  def maybe_encrypt(connection, context); end

  # Inflate a message if it is compressed.
  #
  # @api private
  # @return [Protocol::Message] Always returns self. Subclasses should
  #   override this method as necessary.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#142
  def maybe_inflate; end

  # Default number returned value for protocol messages.
  #
  # @api semiprivate
  # @return [0] This method must be overridden, otherwise, always returns 0.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#329
  def number_returned; end

  # The default for messages is not to require a reply after sending a
  # message to the server.
  #
  # @api semiprivate
  # @example Does the message require a reply?
  #   message.replyable?
  # @return [false] The default is to not require a reply.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#97
  def replyable?; end

  # Returns the request id for the message
  #
  # @api semiprivate
  # @return [Fixnum] The request id for this message
  #
  # source://mongo//lib/mongo/protocol/message.rb#86
  def request_id; end

  # Serializes message into bytes that can be sent on the wire
  #
  # @api semiprivate
  # @param buffer [String] buffer where the message should be inserted
  # @return [String] buffer containing the serialized message
  #
  # source://mongo//lib/mongo/protocol/message.rb#201
  def serialize(buffer = T.unsafe(nil), max_bson_size = T.unsafe(nil), bson_overhead = T.unsafe(nil)); end

  # Generates a request id for a message
  #
  # @api semiprivate
  # @return [Fixnum] a request id used for sending a message to the
  #   server. The server will put this id in the response_to field of
  #   a reply.
  #
  # source://mongo//lib/mongo/protocol/message.rb#320
  def set_request_id; end

  # Serializes message into bytes that can be sent on the wire
  #
  # @api semiprivate
  # @param buffer [String] buffer where the message should be inserted
  # @return [String] buffer containing the serialized message
  #
  # source://mongo//lib/mongo/protocol/message.rb#201
  def to_s(buffer = T.unsafe(nil), max_bson_size = T.unsafe(nil), bson_overhead = T.unsafe(nil)); end

  private

  # Compress the message, if the command being sent permits compression.
  # Otherwise returns self.
  #
  # @api semiprivate
  # @param command_name [String] Command name extracted from the message.
  # @param compressor [String | Symbol] The compressor to use.
  # @param zlib_compression_level [Integer] Zlib compression level to use.
  # @return [Message] A Protocol::Compressed message or self,
  #   depending on whether this message can be compressed.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#127
  def compress_if_possible(command_name, compressor, zlib_compression_level); end

  # A method for getting the fields for a message class
  #
  # @api semiprivate
  # @return [Integer] the fields for the message class
  #
  # source://mongo//lib/mongo/protocol/message.rb#336
  def fields; end

  # @api semiprivate
  #
  # source://mongo//lib/mongo/protocol/message.rb#177
  def merge_sections; end

  # Serializes message fields into a buffer
  #
  # @api semiprivate
  # @param buffer [String] buffer to receive the field
  # @return [String] buffer with serialized field
  #
  # source://mongo//lib/mongo/protocol/message.rb#351
  def serialize_fields(buffer, max_bson_size = T.unsafe(nil)); end

  # Serializes the header of the message consisting of 4 32bit integers
  #
  # The integers represent a message length placeholder (calculation of
  # the actual length is deferred) the request id, the response to id,
  # and the op code for the message
  #
  # Currently uses hardcoded 0 for request id and response to as their
  # values are irrelevent to the server
  #
  # @api semiprivate
  # @param buffer [String] Buffer to receive the header
  # @return [String] Serialized header
  #
  # source://mongo//lib/mongo/protocol/message.rb#383
  def serialize_header(buffer); end

  class << self
    # Deserializes messages from an IO stream.
    #
    # This method returns decompressed messages (i.e. if the message on the
    # wire was OP_COMPRESSED, this method would typically return the OP_MSG
    # message that is the result of decompression).
    #
    # @api private
    # @option options
    # @option options
    # @param max_message_size [Integer] The max message size.
    # @param io [IO] Stream containing a message
    # @param options [Hash]
    # @return [Message] Instance of a Message class
    #
    # source://mongo//lib/mongo/protocol/message.rb#238
    def deserialize(io, max_message_size = T.unsafe(nil), expected_response_to = T.unsafe(nil), options = T.unsafe(nil)); end

    # Deserializes an array of fields in a message
    #
    # The number of items in the array must be described by a previously
    # deserialized field specified in the class by the field dsl under
    # the key +:multi+
    #
    # @api semiprivate
    # @option options
    # @param message [Message] Message to contain the deserialized array.
    # @param io [IO] Stream containing the array to deserialize.
    # @param field [Hash] Hash representing a field.
    # @param options [Hash]
    # @return [Message] Message with deserialized array.
    #
    # source://mongo//lib/mongo/protocol/message.rb#435
    def deserialize_array(message, io, field, options = T.unsafe(nil)); end

    # Deserializes a single field in a message
    #
    # @api semiprivate
    # @option options
    # @param message [Message] Message to contain the deserialized field.
    # @param io [IO] Stream containing the field to deserialize.
    # @param field [Hash] Hash representing a field.
    # @param options [Hash]
    # @return [Message] Message with deserialized field.
    #
    # source://mongo//lib/mongo/protocol/message.rb#453
    def deserialize_field(message, io, field, options = T.unsafe(nil)); end

    # Deserializes the header of the message
    #
    # @api semiprivate
    # @param io [IO] Stream containing the header.
    # @return [Array<Fixnum>] Deserialized header.
    #
    # source://mongo//lib/mongo/protocol/message.rb#391
    def deserialize_header(io); end

    # A method for declaring a message field
    #
    # @api semiprivate
    # @param name [String] Name of the field
    # @param type [Module] Type specific serialization strategies
    # @param multi [true, false, Symbol] Specify as +true+ to
    #   serialize the field's value as an array of type +:type+ or as a
    #   symbol describing the field having the number of items in the
    #   array (used upon deserialization)
    #
    #   Note: In fields where multi is a symbol representing the field
    #   containing number items in the repetition, the field containing
    #   that information *must* be deserialized prior to deserializing
    #   fields that use the number.
    # @return [NilClass]
    #
    # source://mongo//lib/mongo/protocol/message.rb#410
    def field(name, type, multi = T.unsafe(nil)); end

    # A class method for getting the fields for a message class
    #
    # @api semiprivate
    # @return [Integer] the fields for the message class
    #
    # source://mongo//lib/mongo/protocol/message.rb#343
    def fields; end

    # source://mongo//lib/mongo/id.rb#60
    def next_id; end
  end
end

# The batch size constant.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/message.rb#52
Mongo::Protocol::Message::BATCH_SIZE = T.let(T.unsafe(nil), String)

# The collection constant.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/message.rb#57
Mongo::Protocol::Message::COLLECTION = T.let(T.unsafe(nil), String)

# The limit constant.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/message.rb#62
Mongo::Protocol::Message::LIMIT = T.let(T.unsafe(nil), String)

# Default max message size of 48MB.
#
# @api semiprivate
# @since 2.2.1
#
# source://mongo//lib/mongo/protocol/message.rb#77
Mongo::Protocol::Message::MAX_MESSAGE_SIZE = T.let(T.unsafe(nil), Integer)

# The ordered constant.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/message.rb#67
Mongo::Protocol::Message::ORDERED = T.let(T.unsafe(nil), String)

# The q constant.
#
# @api semiprivate
# @since 2.2.0
#
# source://mongo//lib/mongo/protocol/message.rb#72
Mongo::Protocol::Message::Q = T.let(T.unsafe(nil), String)

# MongoDB Wire protocol Msg message (OP_MSG), a bi-directional wire
# protocol opcode.
#
# OP_MSG is only available in MongoDB 3.6 (maxWireVersion >= 6) and later.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#29
class Mongo::Protocol::Msg < ::Mongo::Protocol::Message
  include ::Mongo::Monitoring::Event::Secure

  # Creates a new OP_MSG protocol message
  #
  # @api private
  # @example Create a OP_MSG wire protocol message
  #   Msg.new([:more_to_come], {}, { hello: 1 },
  #   { type: 1, payload: { identifier: 'documents', sequence: [..] } })
  # @option options
  # @param flags [Array<Symbol>] The flag bits. Currently supported
  #   values are :more_to_come and :checksum_present.
  # @param options [Hash] The options.
  # @param main_document [BSON::Document, Hash] The document that will
  #   become the payload type 0 section. Can contain global args as they
  #   are defined in the OP_MSG specification.
  # @param sequences [Protocol::Msg::Section1] Zero or more payload type 1
  #   sections.
  # @return [Msg] a new instance of Msg
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#66
  def initialize(flags, options, main_document, *sequences); end

  # Whether this message represents a bulk write. A bulk write is an insert,
  # update, or delete operation that encompasses multiple operations of
  # the same type.
  #
  # @api private
  # @note This method was written to support client-side encryption
  #   functionality. It is not recommended that this method be used in
  #   service of any other feature or behavior.
  # @return [Boolean] Whether this message represents a bulk write.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#272
  def bulk_write?; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#196
  def documents; end

  # Reverse-populates the instance variables after deserialization sets
  # the @sections instance variable to the list of documents.
  #
  # TODO fix deserialization so that this method is not needed.
  #
  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#184
  def fix_after_deserialization; end

  # @return [Array<Symbol>] The flags for this message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def flags; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#284
  def maybe_add_server_api(server_api); end

  # Compress the message, if the command being sent permits compression.
  # Otherwise returns self.
  #
  # @api private
  # @param compressor [String, Symbol] The compressor to use.
  # @param zlib_compression_level [Integer] The zlib compression level to use.
  # @return [Message] A Protocol::Compressed message or self,
  #   depending on whether this message can be compressed.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#174
  def maybe_compress(compressor, zlib_compression_level = T.unsafe(nil)); end

  # Possibly decrypt this message with libmongocrypt. Message will only be
  # decrypted if the specified client exists, that client has been given
  # auto-encryption options, and this message is eligible for decryption.
  # A message is eligible for decryption if it represents one of the command
  # types allow-listed by libmongocrypt and it contains data that is required
  # to be encrypted by a local or remote json schema.
  #
  # @api private
  # @param context [Mongo::Operation::Context] The operation context.
  # @return [Mongo::Protocol::Msg] The decrypted message, or the original
  #   message if decryption was not possible or necessary.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#251
  def maybe_decrypt(context); end

  # Possibly encrypt this message with libmongocrypt. Message will only be
  # encrypted if the specified client exists, that client has been given
  # auto-encryption options, the client has not been instructed to bypass
  # auto-encryption, and mongocryptd determines that this message is
  # eligible for encryption. A message is eligible for encryption if it
  # represents one of the command types allow-listed by libmongocrypt and it
  # contains data that is required to be encrypted by a local or remote json schema.
  #
  # @api private
  # @param connection [Mongo::Server::Connection] The connection on which
  #   the operation is performed.
  # @param context [Mongo::Operation::Context] The operation context.
  # @return [Mongo::Protocol::Msg] The encrypted message, or the original
  #   message if encryption was not possible or necessary.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#214
  def maybe_encrypt(connection, context); end

  # Returns the number of documents returned from the server.
  #
  # The Msg instance must be for a server reply and the reply must return
  # an active cursor (either a newly created one or one whose iteration is
  # continuing via getMore).
  #
  # @api private
  # @raise [NotImplementedError]
  # @return [Integer] Number of returned documents.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#311
  def number_returned; end

  def op_code; end

  # Return the event payload for monitoring.
  #
  # @api private
  # @example Return the event payload.
  #   message.payload
  # @return [BSON::Document] The event payload.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#120
  def payload; end

  # Whether the message expects a reply from the database.
  #
  # @api private
  # @example Does the message require a reply?
  #   message.replyable?
  # @return [true, false] If the message expects a reply.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#108
  def replyable?; end

  # The sections that will be serialized, or the documents have been
  # deserialized.
  #
  # Usually the sections contain OP_MSG-compliant sections derived
  # from @main_document and @sequences. The information in @main_document
  # and @sequences is duplicated in the sections.
  #
  # When deserializing Msg instances, sections temporarily is an array
  # of documents returned in the type 0 section of the OP_MSG wire
  # protocol message. #fix_after_deserialization method mutates this
  # object to have sections, @main_document and @sequences be what
  # they would have been had the Msg instance been constructed using
  # the constructor (rather than having been deserialized).
  #
  # @api private
  # @return [Array<Hash> | Array<BSON::Document>] The sections of
  #   payload type 1 or 0.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def sections; end

  # Serializes message into bytes that can be sent on the wire.
  #
  # @api private
  # @param buffer [BSON::ByteBuffer] where the message should be inserted.
  # @param max_bson_size [Integer] The maximum bson object size.
  # @return [BSON::ByteBuffer] buffer containing the serialized message.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#155
  def serialize(buffer = T.unsafe(nil), max_bson_size = T.unsafe(nil), bson_overhead = T.unsafe(nil)); end

  private

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#354
  def add_check_sum(buffer); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#341
  def command; end

  # Validate that the documents in this message are all smaller than the
  # maxBsonObjectSize. If not, raise an exception.
  #
  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#326
  def validate_document_size!(max_bson_size); end
end

# The identifier for the database name to execute the command on.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#35
Mongo::Protocol::Msg::DATABASE_IDENTIFIER = T.let(T.unsafe(nil), String)

# Available flags for a OP_MSG message.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#393
Mongo::Protocol::Msg::FLAGS = T.let(T.unsafe(nil), Array)

# Keys that the driver adds to commands. These are going to be
# moved to the end of the hash for better logging.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#41
Mongo::Protocol::Msg::INTERNAL_KEYS = T.let(T.unsafe(nil), Set)

# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#386
Mongo::Protocol::Msg::KNOWN_FLAGS = T.let(T.unsafe(nil), Hash)

# The operation code required to specify a OP_MSG message.
#
# @api private
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#384
Mongo::Protocol::Msg::OP_CODE = T.let(T.unsafe(nil), Integer)

# Encapsulates a type 1 OP_MSG section.
#
# @api private
# @see https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst#sections
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/msg.rb#365
class Mongo::Protocol::Msg::Section1
  # @api private
  # @return [Section1] a new instance of Section1
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#366
  def initialize(identifier, documents); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#372
  def ==(other); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#370
  def documents; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#372
  def eql?(other); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/msg.rb#370
  def identifier; end
end

# MongoDB Wire protocol Query message.
#
# This is a client request message that is sent to the server in order
# to retrieve documents matching provided query.
#
# Users may also provide additional options such as a projection, to
# select a subset of the fields, a number to skip or a limit on the
# number of returned documents.
#
# There are a variety of flags that can be used to adjust cursor
# parameters or the desired consistency and integrity the results.
#
# @api semipublic
#
# source://mongo//lib/mongo/protocol/query.rb#34
class Mongo::Protocol::Query < ::Mongo::Protocol::Message
  include ::Mongo::Monitoring::Event::Secure

  # Creates a new Query message
  #
  # @api semipublic
  # @example Find all users named Tyler.
  #   Query.new('xgen', 'users', {:name => 'Tyler'})
  # @example Find all users named Tyler skipping 5 and returning 10.
  #   Query.new('xgen', 'users', {:name => 'Tyler'}, :skip => 5,
  #   :limit => 10)
  # @example Find all users with secondaryOk bit set
  #   Query.new('xgen', 'users', {:name => 'Tyler'}, :flags => [:secondary_ok])
  # @example Find all user ids.
  #   Query.new('xgen', 'users', {}, :fields => {:id => 1})
  # @option options
  # @option options
  # @option options
  # @option options
  # @param database [String, Symbol] The database to query.
  # @param collection [String, Symbol] The collection to query.
  # @param selector [Hash] The query selector.
  # @param options [Hash] The additional query options.
  # @return [Query] a new instance of Query
  #
  # source://mongo//lib/mongo/protocol/query.rb#64
  def initialize(database, collection, selector, options = T.unsafe(nil)); end

  # @return [Array<Symbol>] The flags for this query message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def flags; end

  # @return [Integer] The number of documents to return.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def limit; end

  # Compress the message, if the command being sent permits compression.
  # Otherwise returns self.
  #
  # @api private
  # @param compressor [String, Symbol] The compressor to use.
  # @param zlib_compression_level [Integer] The zlib compression level to use.
  # @return [Message] A Protocol::Compressed message or self,
  #   depending on whether this message can be compressed.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#125
  def maybe_compress(compressor, zlib_compression_level = T.unsafe(nil)); end

  # @return [String] The namespace for this query message.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def namespace; end

  def op_code; end

  # Return the event payload for monitoring.
  #
  # @api semipublic
  # @example Return the event payload.
  #   message.payload
  # @return [BSON::Document] The event payload.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#93
  def payload; end

  # @return [Hash] The projection.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def project; end

  # Query messages require replies from the database.
  #
  # @api semipublic
  # @example Does the message require a reply?
  #   message.replyable?
  # @return [true] Always true for queries.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#110
  def replyable?; end

  # @return [Hash] The query selector.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def selector; end

  # Serializes message into bytes that can be sent on the wire.
  #
  # @api semipublic
  # @param buffer [BSON::ByteBuffer] where the message should be inserted.
  # @param max_bson_size [Integer] The maximum bson object size.
  # @return [BSON::ByteBuffer] buffer containing the serialized message.
  #
  # source://mongo//lib/mongo/protocol/query.rb#135
  def serialize(buffer = T.unsafe(nil), max_bson_size = T.unsafe(nil), bson_overhead = T.unsafe(nil)); end

  # @return [Integer] The number of documents to skip.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def skip; end

  protected

  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/query.rb#143
  def upconverter; end

  private

  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/query.rb#177
  def determine_limit; end

  # Validate that the documents in this message are all smaller than the
  # maxBsonObjectSize. If not, raise an exception.
  #
  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/query.rb#149
  def validate_document_size!(max_bson_size); end
end

# Available flags for a Query message.
#
# @api private
#
# source://mongo//lib/mongo/protocol/query.rb#183
Mongo::Protocol::Query::FLAGS = T.let(T.unsafe(nil), Array)

# The operation code required to specify a Query message.
#
# @api semipublic
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/query.rb#175
Mongo::Protocol::Query::OP_CODE = T.let(T.unsafe(nil), Integer)

# Converts legacy query messages to the appropriare OP_COMMAND style
# message.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/query.rb#222
class Mongo::Protocol::Query::Upconverter
  # Instantiate the upconverter.
  #
  # @api semipublic
  # @example Instantiate the upconverter.
  #   Upconverter.new('users', { name: 'test' }, { skip: 10 })
  # @param collection [String] The name of the collection.
  # @param filter [BSON::Document, Hash] The filter or command.
  # @param options [BSON::Document, Hash] The options.
  # @param flags [Array<Symbol>] The flags.
  # @return [Upconverter] a new instance of Upconverter
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#283
  def initialize(collection, filter, options, flags); end

  # @api semipublic
  # @return [String] collection The name of the collection.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#261
  def collection; end

  # Get the upconverted command.
  #
  # @api semipublic
  # @example Get the command.
  #   upconverter.command
  # @return [BSON::Document] The upconverted command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#307
  def command; end

  # Get the name of the command. If the collection is $cmd then it's the
  # first key in the filter, otherwise it's a find.
  #
  # @api semipublic
  # @example Get the command name.
  #   upconverter.command_name
  # @return [String] The command name.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#320
  def command_name; end

  # @api semipublic
  # @return [BSON::Document, Hash] filter The query filter or command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#264
  def filter; end

  # @api semipublic
  # @return [Array<Symbol>] flags The flags.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#270
  def flags; end

  # @api semipublic
  # @return [BSON::Document, Hash] options The options.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#267
  def options; end

  private

  # @api semipublic
  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#326
  def command?; end

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#342
  def find_command; end

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#334
  def op_command; end

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/query.rb#330
  def query_filter; end
end

# Mapping of flags to find command options.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/query.rb#252
Mongo::Protocol::Query::Upconverter::FLAG_MAPPINGS = T.let(T.unsafe(nil), Hash)

# Mappings of the options to the find command options.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/query.rb#227
Mongo::Protocol::Query::Upconverter::OPTION_MAPPINGS = T.let(T.unsafe(nil), Hash)

# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/query.rb#234
Mongo::Protocol::Query::Upconverter::SPECIAL_FIELD_MAPPINGS = T.let(T.unsafe(nil), Hash)

# Provides a registry for looking up a message class based on op code.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/registry.rb#25
module Mongo::Protocol::Registry
  extend ::Mongo::Protocol::Registry

  # Get the class for the given op code and raise an error if it's not found.
  #
  # @example Get the type for the op code.
  #   Mongo::Protocol::Registry.get(1)
  # @return [Class] The corresponding Ruby class for the message type.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/registry.rb#41
  def get(op_code, message = T.unsafe(nil)); end

  # Register the Ruby type for the corresponding op code.
  #
  # @example Register the op code.
  #   Mongo::Protocol::Registry.register(1, Reply)
  # @param op_code [Fixnum] The op code.
  # @param type [Class] The class the op code maps to.
  # @return [Class] The class.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/registry.rb#60
  def register(op_code, type); end

  private

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/registry.rb#67
  def define_type_reader(type); end

  # @raise [Error::UnsupportedMessageType]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/protocol/registry.rb#73
  def handle_unsupported_op_code!(op_code); end
end

# A Mapping of all the op codes to their corresponding Ruby classes.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/registry.rb#31
Mongo::Protocol::Registry::MAPPINGS = T.let(T.unsafe(nil), Hash)

# The MongoDB wire protocol message representing a reply
#
# @api semipublic
# @example
#   socket = TCPSocket.new('localhost', 27017)
#   query = Protocol::Query.new('xgen', 'users', {:name => 'Tyler'})
#   socket.write(query)
#   reply = Protocol::Reply::deserialize(socket)
#
# source://mongo//lib/mongo/protocol/reply.rb#30
class Mongo::Protocol::Reply < ::Mongo::Protocol::Message
  # @return [Fixnum] The cursor id for this response. Will be zero
  #   if there are no additional results.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def cursor_id; end

  # Determine if the reply had a cursor not found flag.
  #
  # @api semipublic
  # @example Did the reply have a cursor not found flag.
  #   reply.cursor_not_found?
  # @return [true, false] If the query cursor was not found.
  # @since 2.2.3
  #
  # source://mongo//lib/mongo/protocol/reply.rb#52
  def cursor_not_found?; end

  # @return [Array<Hash>] The documents in this Reply.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def documents; end

  # @return [Array<Symbol>] The flags for this reply.
  #
  #   Supported flags: +:cursor_not_found+, +:query_failure+,
  #   +:shard_config_stale+, +:await_capable+
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def flags; end

  # @return [Fixnum] Number of documents in this Reply.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def number_returned; end

  def op_code; end

  # Return the event payload for monitoring.
  #
  # @api semipublic
  # @example Return the event payload.
  #   message.payload
  # @return [BSON::Document] The event payload.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#64
  def payload; end

  # Determine if the reply had a query failure flag.
  #
  # @api semipublic
  # @example Did the reply have a query failure.
  #   reply.query_failure?
  # @return [true, false] If the query failed.
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/protocol/reply.rb#40
  def query_failure?; end

  # @return [Fixnum] The starting position of the cursor for this Reply.
  #
  # source://mongo//lib/mongo/protocol/message.rb#417
  def starting_from; end

  private

  # @api semipublic
  #
  # source://mongo//lib/mongo/protocol/reply.rb#73
  def upconverter; end
end

# Available flags for a Reply message.
#
# @api semipublic
#
# source://mongo//lib/mongo/protocol/reply.rb#84
Mongo::Protocol::Reply::FLAGS = T.let(T.unsafe(nil), Array)

# The operation code required to specify a Reply message.
#
# @api semipublic
# @return [Fixnum] the operation code.
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/reply.rb#81
Mongo::Protocol::Reply::OP_CODE = T.let(T.unsafe(nil), Integer)

# Upconverts legacy replies to new op command replies.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/reply.rb#120
class Mongo::Protocol::Reply::Upconverter
  # Initialize the new upconverter.
  #
  # @api semipublic
  # @example Create the upconverter.
  #   Upconverter.new(docs, 1, 3)
  # @param documents [Array<BSON::Document>] The documents.
  # @param cursor_id [Integer] The cursor id.
  # @param starting_from [Integer] The starting position.
  # @return [Upconverter] a new instance of Upconverter
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#152
  def initialize(documents, cursor_id, starting_from); end

  # Get the upconverted command.
  #
  # @api semipublic
  # @example Get the command.
  #   upconverter.command
  # @return [BSON::Document] The command.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#175
  def command; end

  # @api semipublic
  # @return [Integer] cursor_id The cursor id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#162
  def cursor_id; end

  # @api semipublic
  # @return [Array<BSON::Document>] documents The documents.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#159
  def documents; end

  # @api semipublic
  # @return [Integer] starting_from The starting point in the cursor.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#165
  def starting_from; end

  private

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#181
  def batch_field; end

  # @api semipublic
  # @return [Boolean]
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#185
  def command?; end

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#189
  def find_command; end

  # @api semipublic
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/protocol/reply.rb#199
  def op_command; end
end

# Cursor field constant.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/reply.rb#135
Mongo::Protocol::Reply::Upconverter::CURSOR = T.let(T.unsafe(nil), String)

# First batch constant.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/reply.rb#130
Mongo::Protocol::Reply::Upconverter::FIRST_BATCH = T.let(T.unsafe(nil), String)

# Id field constant.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/reply.rb#140
Mongo::Protocol::Reply::Upconverter::ID = T.let(T.unsafe(nil), String)

# Next batch constant.
#
# @api semipublic
# @since 2.1.0
#
# source://mongo//lib/mongo/protocol/reply.rb#125
Mongo::Protocol::Reply::Upconverter::NEXT_BATCH = T.let(T.unsafe(nil), String)

# Container for various serialization strategies
#
# Each strategy must have a serialization method named +serailize+
# and a deserialization method named +deserialize+
#
# Serialize methods must take buffer and value arguements and
# serialize the value into the buffer
#
# Deserialize methods must take an IO stream argument and
# deserialize the value from the stream of bytes
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#33
module Mongo::Protocol::Serializers; end

# Class used to define a bitvector for a MongoDB wire protocol message.
#
# Defines serialization strategy upon initialization.
#
# @api private
#
# source://mongo//lib/mongo/protocol/bit_vector.rb#26
class Mongo::Protocol::Serializers::BitVector
  # Initializes a BitVector with a layout
  #
  # @api private
  # @param layout [Array<Symbol>] the array of fields in the bit vector
  # @return [BitVector] a new instance of BitVector
  #
  # source://mongo//lib/mongo/protocol/bit_vector.rb#31
  def initialize(layout); end

  # Deserializes vector by decoding the symbol according to its mask
  #
  # @api private
  # @param buffer [String] Buffer containing the vector to be deserialized.
  # @param options [Hash] This method does not currently accept any options.
  # @return [Array<Symbol>] Flags contained in the vector
  #
  # source://mongo//lib/mongo/protocol/bit_vector.rb#58
  def deserialize(buffer, options = T.unsafe(nil)); end

  # Serializes vector by encoding each symbol according to its mask
  #
  # @api private
  # @param buffer [String] Buffer to receive the serialized vector
  # @param value [Array<Symbol>] Array of flags to encode
  # @param validating_keys [true, false] Whether keys should be validated when serializing.
  #   This option is deprecated and will not be used. It will removed in version 3.0.
  # @return [String] Buffer that received the serialized vector
  #
  # source://mongo//lib/mongo/protocol/bit_vector.rb#46
  def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
end

# MongoDB wire protocol serialization strategy for a single byte.
#
# Writes and fetches a single byte from the byte buffer.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#402
module Mongo::Protocol::Serializers::Byte
  class << self
    # Deserializes a byte from the byte buffer.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer containing the value to read.
    # @param options [Hash] This method currently accepts no options.
    # @return [String] The byte.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#426
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Writes a byte into the buffer.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer to receive the single byte.
    # @param value [String] The byte to write to the buffer.
    # @param validating_keys [true, false] Whether to validate keys.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [BSON::ByteBuffer] Buffer with serialized value.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#414
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# MongoDB wire protocol serialization strategy for n bytes.
#
# Writes and fetches bytes from the byte buffer.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#434
module Mongo::Protocol::Serializers::Bytes
  class << self
    # Deserializes bytes from the byte buffer.
    #
    # @api private
    # @option options
    # @param buffer [BSON::ByteBuffer] Buffer containing the value to read.
    # @param options [Hash] The method options.
    # @return [String] The bytes.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#460
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Writes bytes into the buffer.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer to receive the bytes.
    # @param value [String] The bytes to write to the buffer.
    # @param validating_keys [true, false] Whether to validate keys.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [BSON::ByteBuffer] Buffer with serialized value.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#446
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# MongoDB wire protocol serialization strategy for C style strings.
#
# Serializes and de-serializes C style strings (null terminated).
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#77
module Mongo::Protocol::Serializers::CString
  class << self
    # Serializes a C style string into the buffer
    #
    # @api private
    # @param buffer [String] Buffer to receive the serialized CString.
    # @param value [String] The string to be serialized.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#85
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# MongoDB wire protocol serialization strategy for a BSON Document.
#
# Serializes and de-serializes a single document.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#356
module Mongo::Protocol::Serializers::Document
  class << self
    # Deserializes a document from the IO stream
    #
    # @api private
    # @option options
    # @param buffer [String] Buffer containing the BSON encoded document.
    # @param options [Hash]
    # @return [Hash] The decoded BSON document.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#384
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes a document into the buffer
    #
    # @api private
    # @param buffer [String] Buffer to receive the BSON encoded document.
    # @param value [Hash] Document to serialize as BSON.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#364
    def serialize(buffer, value, max_bson_size = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

    # Whether there can be a size limit on this type after serialization.
    #
    # @api private
    # @return [true] Documents can be size limited upon serialization.
    # @since 2.0.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#394
    def size_limited?; end
  end
end

# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#41
Mongo::Protocol::Serializers::HEADER_PACK = T.let(T.unsafe(nil), String)

# MongoDB wire protocol serialization strategy for message headers.
#
# Serializes and de-serializes four 32-bit integers consisting
# of the length of the message, the request id, the response id,
# and the op code for the operation.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#48
module Mongo::Protocol::Serializers::Header
  class << self
    # Deserializes the header value from the IO stream
    #
    # @api private
    # @param buffer [String] Buffer containing the message header.
    # @param options [Hash] This method currently accepts no options.
    # @return [Array<Fixnum>] Array consisting of the deserialized
    #   length, request id, response id, and op code.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#69
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes the header value into the buffer
    #
    # @api private
    # @param buffer [String] Buffer to receive the serialized value.
    # @param value [String] Header value to be serialized.
    # @param validating_keys [true, false] Whether keys should be validated when serializing.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#58
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#39
Mongo::Protocol::Serializers::INT32_PACK = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#40
Mongo::Protocol::Serializers::INT64_PACK = T.let(T.unsafe(nil), String)

# MongoDB wire protocol serialization strategy for 32-bit integers.
#
# Serializes and de-serializes one 32-bit integer.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#109
module Mongo::Protocol::Serializers::Int32
  class << self
    # Deserializes a 32-bit Fixnum from the IO stream
    #
    # @api private
    # @param buffer [String] Buffer containing the 32-bit integer
    # @param options [Hash] This method currently accepts no options.
    # @return [Fixnum] Deserialized Int32
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#135
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes a number to a 32-bit integer
    #
    # @api private
    # @param buffer [String] Buffer to receive the serialized Int32.
    # @param value [Integer | BSON::Int32] 32-bit integer to be serialized.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#117
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# MongoDB wire protocol serialization strategy for 64-bit integers.
#
# Serializes and de-serializes one 64-bit integer.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#143
module Mongo::Protocol::Serializers::Int64
  class << self
    # Deserializes a 64-bit Fixnum from the IO stream
    #
    # @api private
    # @param buffer [String] Buffer containing the 64-bit integer.
    # @param options [Hash] This method currently accepts no options.
    # @return [Fixnum] Deserialized Int64.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#169
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes a number to a 64-bit integer
    #
    # @api private
    # @param buffer [String] Buffer to receive the serialized Int64.
    # @param value [Integer | BSON::Int64] 64-bit integer to be serialized.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#151
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#38
Mongo::Protocol::Serializers::NULL = T.let(T.unsafe(nil), String)

# MongoDB wire protocol serialization strategy for a Section of OP_MSG.
#
# Serializes and de-serializes a list of Sections.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#179
module Mongo::Protocol::Serializers::Sections
  class << self
    # Deserializes a section of an OP_MSG from the IO stream.
    #
    # @api private
    # @option options
    # @param buffer [BSON::ByteBuffer] Buffer containing the sections.
    # @param options [Hash]
    # @return [Array<BSON::Document>] Deserialized sections.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#219
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes the sections of an OP_MSG, payload type 0 or 1.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer to receive the serialized Sections.
    # @param value [Array<Hash, BSON::Document>] The sections to be serialized.
    # @param max_bson_size [Fixnum] The max bson size of documents in the sections.
    # @param validating_keys [true, false] Whether to validate document keys.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [BSON::ByteBuffer] Buffer with serialized value.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#192
    def serialize(buffer, value, max_bson_size = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

    # Whether there can be a size limit on this type after serialization.
    #
    # @api private
    # @return [true] Documents can be size limited upon serialization.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#240
    def size_limited?; end
  end
end

# MongoDB wire protocol serialization strategy for a payload 1 type Section of OP_MSG.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#296
module Mongo::Protocol::Serializers::Sections::PayloadOne
  class << self
    # Deserializes a section of payload type 1 of an OP_MSG from the IO stream.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer containing the sections.
    # @raise [NotImplementedError]
    # @return [Array<BSON::Document>] Deserialized section.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#337
    def deserialize(buffer); end

    # Serializes a section of an OP_MSG, payload type 1.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer to receive the serialized Sections.
    # @param value [BSON::Document, Hash] The object to serialize.
    # @param max_bson_size [Fixnum] The max bson size of documents in the section.
    # @param validating_keys [true, false] Whether to validate document keys.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [BSON::ByteBuffer] Buffer with serialized value.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#319
    def serialize(buffer, value, max_bson_size = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
  end
end

# The byte identifier for this payload type.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#301
Mongo::Protocol::Serializers::Sections::PayloadOne::TYPE = T.let(T.unsafe(nil), Integer)

# The byte corresponding to this payload type.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#306
Mongo::Protocol::Serializers::Sections::PayloadOne::TYPE_BYTE = T.let(T.unsafe(nil), String)

# MongoDB wire protocol serialization strategy for a payload 0 type Section of OP_MSG.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#247
module Mongo::Protocol::Serializers::Sections::PayloadZero
  class << self
    # Deserializes a section of payload type 0 of an OP_MSG from the IO stream.
    #
    # @api private
    # @option options
    # @param buffer [BSON::ByteBuffer] Buffer containing the sections.
    # @param options [Hash]
    # @return [Array<BSON::Document>] Deserialized section.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#287
    def deserialize(buffer, options = T.unsafe(nil)); end

    # Serializes a section of an OP_MSG, payload type 0.
    #
    # @api private
    # @param buffer [BSON::ByteBuffer] Buffer to receive the serialized Sections.
    # @param value [BSON::Document, Hash] The object to serialize.
    # @param max_bson_size [Fixnum] The max bson size of documents in the section.
    # @param validating_keys [true, false] Whether to validate document keys.
    #   This option is deprecated and will not be used. It will removed in version 3.0.
    # @return [BSON::ByteBuffer] Buffer with serialized value.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#270
    def serialize(buffer, value, max_bson_size = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
  end
end

# The byte identifier for this payload type.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#252
Mongo::Protocol::Serializers::Sections::PayloadZero::TYPE = T.let(T.unsafe(nil), Integer)

# The byte corresponding to this payload type.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/protocol/serializers.rb#257
Mongo::Protocol::Serializers::Sections::PayloadZero::TYPE_BYTE = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#37
Mongo::Protocol::Serializers::ZERO = T.let(T.unsafe(nil), Integer)

# MongoDB wire protocol serialization strategy for 32-bit Zero.
#
# Serializes and de-serializes one 32-bit Zero.
#
# @api private
#
# source://mongo//lib/mongo/protocol/serializers.rb#93
module Mongo::Protocol::Serializers::Zero
  class << self
    # Serializes a 32-bit Zero into the buffer
    #
    # @api private
    # @param buffer [String] Buffer to receive the serialized Zero.
    # @param value [Fixnum] Ignored value.
    # @return [String] Buffer with serialized value.
    #
    # source://mongo//lib/mongo/protocol/serializers.rb#101
    def serialize(buffer, value, validating_keys = T.unsafe(nil)); end
  end
end

# source://mongo//lib/mongo/query_cache.rb#19
module Mongo::QueryCache
  class << self
    # Execute the block while using the query cache.
    #
    # @example Execute with the cache.
    #   QueryCache.cache { collection.find }
    # @return [Object] The result of the block.
    #
    # source://mongo//lib/mongo/query_cache.rb#48
    def cache; end

    # Clear the query cache.
    #
    # @example Clear the cache.
    #   QueryCache.clear
    # @return [nil] Always nil.
    #
    # source://mongo//lib/mongo/query_cache.rb#90
    def clear; end

    # Clear the section of the query cache storing cursors with results
    # from this namespace.
    #
    # @api private
    # @param namespace [String] The namespace to be cleared, in the format
    #   "database.collection".
    # @return [nil] Always nil.
    #
    # source://mongo//lib/mongo/query_cache.rb#103
    def clear_namespace(namespace); end

    # Set whether the cache is enabled.
    #
    # @example Set if the cache is enabled.
    #   QueryCache.enabled = true
    # @param value [true, false] The enabled value.
    #
    # source://mongo//lib/mongo/query_cache.rb#28
    def enabled=(value); end

    # Is the query cache enabled on the current thread?
    #
    # @example Is the query cache enabled?
    #   QueryCache.enabled?
    # @return [true, false] If the cache is enabled.
    #
    # source://mongo//lib/mongo/query_cache.rb#38
    def enabled?; end

    # For the given query options, retrieve a cached cursor that can be used
    # to obtain the correct query results, if one exists in the cache.
    #
    # @api private
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param opts [Hash] a customizable set of options
    # @return [Mongo::CachingCursor | nil] Returns a CachingCursor if one
    #   exists in the query cache, otherwise returns nil.
    #
    # source://mongo//lib/mongo/query_cache.rb#181
    def get(**opts); end

    # source://mongo//lib/mongo/query_cache.rb#213
    def normalized_limit(limit); end

    # Store a CachingCursor instance in the query cache associated with the
    # specified query options.
    #
    # @api private
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param cursor [Mongo::CachingCursor] The CachingCursor instance to store.
    # @param opts [Hash] a customizable set of options
    # @return [true] Always true.
    #
    # source://mongo//lib/mongo/query_cache.rb#142
    def set(cursor, **opts); end

    # Execute the block with the query cache disabled.
    #
    # @example Execute without the cache.
    #   QueryCache.uncached { collection.find }
    # @return [Object] The result of the block.
    #
    # source://mongo//lib/mongo/query_cache.rb#64
    def uncached; end

    private

    # source://mongo//lib/mongo/query_cache.rb#223
    def cache_key(**opts); end

    # source://mongo//lib/mongo/query_cache.rb#80
    def cache_table; end

    # If the cached results can come from multiple collections, store this
    # cursor under the nil namespace to be cleared on every write operation.
    # Otherwise, store it under the specified namespace.
    #
    # source://mongo//lib/mongo/query_cache.rb#246
    def namespace_key(**opts); end
  end
end

# Rack middleware that activates the query cache for each request.
#
# source://mongo//lib/mongo/query_cache.rb#256
class Mongo::QueryCache::Middleware
  # Instantiate the middleware.
  #
  # @example Create the new middleware.
  #   Middleware.new(app)
  # @param app [Object] The rack application stack.
  # @return [Middleware] a new instance of Middleware
  #
  # source://mongo//lib/mongo/query_cache.rb#264
  def initialize(app); end

  # Enable query cache and execute the request.
  #
  # @example Execute the request.
  #   middleware.call(env)
  # @param env [Object] The environment.
  # @return [Object] The result of the call.
  #
  # source://mongo//lib/mongo/query_cache.rb#276
  def call(env); end
end

# ActiveJob middleware that activates the query cache for each job.
#
# source://mongo//lib/mongo/query_cache.rb#285
module Mongo::QueryCache::Middleware::ActiveJob
  class << self
    # @private
    #
    # source://mongo//lib/mongo/query_cache.rb#286
    def included(base); end
  end
end

# Defines basic behavior around retrying operations.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/retryable/base_worker.rb#19
module Mongo::Retryable
  extend ::Forwardable

  # source://forwardable/1.3.3/forwardable.rb#231
  def nro_write_with_retry(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_with_one_retry(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_with_retry(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_with_retry_cursor(*args, **_arg1, &block); end

  # Returns the read worker for handling retryable reads.
  #
  # @api private
  # @note this is only a public method so that tests can add expectations
  #   based on it.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/retryable.rb#59
  def read_worker; end

  # This is a separate method to make it possible for the test suite to
  # assert that server selection is performed during retry attempts.
  #
  # This is a public method so that it can be accessed via the read and
  # write worker delegates, as needed.
  #
  # @api private
  # @return [Mongo::Server] A server matching the server preference.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/retryable.rb#49
  def select_server(cluster, server_selector, session); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def write_with_retry(*args, **_arg1, &block); end

  # Returns the write worker for handling retryable writes.
  #
  # @api private
  # @note this is only a public method so that tests can add expectations
  #   based on it.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/retryable.rb#69
  def write_worker; end
end

# The abstract superclass for workers employed by Mongo::Retryable.
#
# @api private
#
# source://mongo//lib/mongo/retryable/base_worker.rb#24
class Mongo::Retryable::BaseWorker
  extend ::Forwardable

  # Constructs a new worker.
  #
  # @api private
  # @example Instantiating a new read worker
  #   worker = Mongo::Retryable::ReadWorker.new(self)
  # @example Instantiating a new write worker
  #   worker = Mongo::Retryable::WriteWorker.new(self)
  # @param retryable [Mongo::Retryable] The client object that is using
  #   this worker to perform a retryable operation
  # @return [BaseWorker] a new instance of BaseWorker
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#46
  def initialize(retryable); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster(*args, **_arg1, &block); end

  # @api private
  # @return [Mongo::Retryable] retryable A reference to the client object
  #   that instatiated this worker.
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#34
  def retryable; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def select_server(*args, **_arg1, &block); end

  private

  # Logs the given deprecation warning the first time it is called for a
  # given key; after that, it does nothing when given the same key.
  #
  # @api private
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#75
  def deprecation_warning(key, warning); end

  # Tests to see if the given exception instance is of a type that can
  # be retried.
  #
  # @api private
  # @return [true | false] true if the exception is retryable.
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#69
  def is_retryable_exception?(e); end

  # Log a warning so that any application slow down is immediately obvious.
  #
  # @api private
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#84
  def log_retry(e, options = T.unsafe(nil)); end

  # Indicate which exception classes that are generally retryable.
  #
  # @api private
  # @return [Array<Mongo:Error>] Array of exception classes that are
  #   considered retryable.
  #
  # source://mongo//lib/mongo/retryable/base_worker.rb#56
  def retryable_exceptions; end
end

# Implements the logic around retrying read operations.
#
# @api private
# @since 2.19.0
#
# source://mongo//lib/mongo/retryable/read_worker.rb#28
class Mongo::Retryable::ReadWorker < ::Mongo::Retryable::BaseWorker
  # Execute a read operation with a single retry on network errors.
  #
  # This method is used by the driver for some of the internal housekeeping
  # operations. Application-requested reads should use read_with_retry
  # rather than this method.
  #
  # @api private
  # @example Execute the read.
  #   read_with_one_retry do
  #   ...
  #   end
  # @note This only retries read operations on socket errors.
  # @option options
  # @param options [Hash | nil] Options.
  # @return [Result] The result of the operation.
  # @since 2.2.6
  # @yield Calls the provided block with no arguments
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#149
  def read_with_one_retry(options = T.unsafe(nil)); end

  # Execute a read operation with retrying.
  #
  # This method performs server selection for the specified server selector
  # and yields to the provided block, which should execute the initial
  # query operation and return its result. The block will be passed the
  # server selected for the operation. If the block raises an exception,
  # and this exception corresponds to a read retryable error, and read
  # retries are enabled for the client, this method will perform server
  # selection again and yield to the block again (with potentially a
  # different server). If the block returns successfully, the result
  # of the block is returned.
  #
  # If modern retry reads are on (which is the default), the initial read
  # operation will be retried once. If legacy retry reads are on, the
  # initial read operation will be retried zero or more times depending
  # on the :max_read_retries client setting, the default for which is 1.
  # To disable read retries, turn off modern read retries by setting
  # retry_reads: false and set :max_read_retries to 0 on the client.
  #
  # @api private
  # @example Execute the read.
  #   read_with_retry(session, server_selector) do |server|
  #   ...
  #   end
  # @param session [Mongo::Session | nil] The session that the operation
  #   is being run on.
  # @param server_selector [Mongo::ServerSelector::Selectable | nil] Server selector for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#113
  def read_with_retry(session = T.unsafe(nil), server_selector = T.unsafe(nil), &block); end

  # Execute a read operation returning a cursor with retrying.
  #
  # This method performs server selection for the specified server selector
  # and yields to the provided block, which should execute the initial
  # query operation and return its result. The block will be passed the
  # server selected for the operation. If the block raises an exception,
  # and this exception corresponds to a read retryable error, and read
  # retries are enabled for the client, this method will perform server
  # selection again and yield to the block again (with potentially a
  # different server). If the block returns successfully, the result
  # of the block (which should be a Mongo::Operation::Result) is used to
  # construct a Mongo::Cursor object for the result set. The cursor
  # is then returned.
  #
  # If modern retry reads are on (which is the default), the initial read
  # operation will be retried once. If legacy retry reads are on, the
  # initial read operation will be retried zero or more times depending
  # on the :max_read_retries client setting, the default for which is 1.
  # To disable read retries, turn off modern read retries by setting
  # retry_reads: false and set :max_read_retries to 0 on the client.
  #
  # @api private
  # @example Execute a read returning a cursor.
  #   cursor = read_with_retry_cursor(session, server_selector, view) do |server|
  #   # return a Mongo::Operation::Result
  #   ...
  #   end
  # @param session [Mongo::Session] The session that the operation is being
  #   run on.
  # @param server_selector [Mongo::ServerSelector::Selectable] Server
  #   selector for the operation.
  # @param view [CollectionView] The +CollectionView+ defining the query.
  # @param block [Proc] The block to execute.
  # @return [Cursor] The cursor for the result set.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#66
  def read_with_retry_cursor(session, server_selector, view, &block); end

  private

  # Attempts to do a legacy read_with_retry, without either a session or
  # server_selector. This is a deprecated use-case, and a warning will be
  # issued the first time this is invoked.
  #
  # @api private
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#168
  def deprecated_legacy_read_with_retry(&block); end

  # Attempts to do a "legacy" read with retry. The operation will be
  # attempted multiple times, up to the client's `max_read_retries`
  # setting.
  #
  # @api private
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param server_selector [Mongo::ServerSelector::Selectable] Server
  #   selector for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#212
  def legacy_read_with_retry(session, server_selector, &block); end

  # Attempts to do a "modern" read with retry. Only a single retry will
  # be attempted.
  #
  # @api private
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param server_selector [Mongo::ServerSelector::Selectable] Server
  #   selector for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#192
  def modern_read_with_retry(session, server_selector, &block); end

  # Attempts to do a read *without* a retry; for example, when retries have
  # been explicitly disabled.
  #
  # @api private
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param server_selector [Mongo::ServerSelector::Selectable] Server
  #   selector for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#241
  def read_without_retry(session, server_selector, &block); end

  # The retry logic of the "modern" read_with_retry implementation.
  #
  # @api private
  # @param original_error [Exception] The original error that triggered
  #   the retry.
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param server_selector [Mongo::ServerSelector::Selectable] Server
  #   selector for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/read_worker.rb#263
  def retry_read(original_error, session, server_selector, &block); end
end

# Implements the logic around retrying write operations.
#
# @api private
# @since 2.19.0
#
# source://mongo//lib/mongo/retryable/write_worker.rb#28
class Mongo::Retryable::WriteWorker < ::Mongo::Retryable::BaseWorker
  # Retryable writes wrapper for operations not supporting modern retryable
  # writes.
  #
  # If the driver is configured to use modern retryable writes, this method
  # yields to the passed block exactly once, thus not retrying any writes.
  #
  # If the driver is configured to use legacy retryable writes, this method
  # delegates to legacy_write_with_retry which performs write retries using
  # legacy logic.
  #
  # @api private
  # @param write_concern [nil | Hash | WriteConcern::Base] The write concern.
  # @param context [Context] The context for the operation.
  # @since 2.19.0
  # @yieldparam connection [Connection] The connection through which the
  #   write should be sent.
  # @yieldparam txn_num [nil] nil as transaction number.
  # @yieldparam context [Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#103
  def nro_write_with_retry(write_concern, context:, &block); end

  # Queries whether the session and write concern support retrying writes.
  #
  # @api private
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param write_concern [nil | Hash | WriteConcern::Base] The write
  #   concern.
  # @return [true | false] Whether write retries are allowed or not.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#129
  def retry_write_allowed?(session, write_concern); end

  # Implements write retrying functionality by yielding to the passed
  # block one or more times.
  #
  # If the session is provided (hence, the deployment supports sessions),
  # and modern retry writes are enabled on the client, the modern retry
  # logic is invoked. Otherwise the legacy retry logic is invoked.
  #
  # If ending_transaction parameter is true, indicating that a transaction
  # is being committed or aborted, the operation is executed exactly once.
  # Note that, since transactions require sessions, this method will raise
  # ArgumentError if ending_transaction is true and session is nil.
  #
  # @api private
  # @example Execute the write.
  #   write_with_retry do
  #   ...
  #   end
  # @note This only retries operations on not master failures, since it is
  #   the only case we can be sure a partial write did not already occur.
  # @param write_concern [nil | Hash | WriteConcern::Base] The write concern.
  # @param ending_transaction [true | false] True if the write operation is
  #   abortTransaction or commitTransaction, false otherwise.
  # @param context [Context] The context for the operation.
  # @param block [Proc] The block to execute.
  # @return [Result] The result of the operation.
  # @since 2.1.0
  # @yieldparam connection [Connection] The connection through which the
  #   write should be sent.
  # @yieldparam txn_num [Integer] Transaction number (NOT the ACID kind).
  # @yieldparam context [Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#65
  def write_with_retry(write_concern, context:, ending_transaction: T.unsafe(nil), &block); end

  private

  # Make sure the exception object is labeled 'RetryableWriteError'. If it
  # isn't, and should not be, re-raise the exception.
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#305
  def ensure_labeled_retryable!(e, connection_succeeded, session); end

  # Make sure the exception object supports retryable writes. If it does,
  # make sure it has been appropriately labeled. If either condition fails,
  # raise an exception.
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#322
  def ensure_retryable!(e); end

  # Makes sure the state of the arguments is consistent and valid.
  #
  # @api private
  # @param ending_transaction [true | false] True if the write operation
  #   is abortTransaction or commitTransaction, false otherwise.
  # @param session [nil | Mongo::Session] The session that the operation
  #   is being run on (if any).
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#147
  def ensure_valid_state!(ending_transaction, session); end

  # Raise either e, or original_error, depending on whether e is
  # appropriately labeled.
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#344
  def fail_on_operation_failure!(e, original_error); end

  # Raise the original error (after annotating).
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#356
  def fail_on_other_error!(e, original_error); end

  # Raise either e, or original_error, depending on whether e is
  # write_retryable.
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#332
  def fail_on_retryable!(e, original_error); end

  # Implements legacy write retrying functionality by yielding to the passed
  # block one or more times.
  #
  # This method is used for operations which are not supported by modern
  # retryable writes, such as delete_many and update_many.
  #
  # @api private
  # @param server [Server] The server which should be used for the
  #   operation. If not provided, the current primary will be retrieved from
  #   the cluster.
  # @param context [Context] The context for the operation.
  # @since 2.19.0
  # @yieldparam connection [Connection] The connection through which the
  #   write should be sent.
  # @yieldparam txn_num [nil] nil as transaction number.
  # @yieldparam context [Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#170
  def legacy_write_with_retry(server = T.unsafe(nil), context:); end

  # Implements modern write retrying functionality by yielding to the passed
  # block no more than twice.
  #
  # @api private
  # @param session [Mongo::Session] The session that the operation is
  #   being run on.
  # @param server [Server] The server which should be used for the
  #   operation.
  # @param context [Operation::Context] The context for the operation.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  # @yieldparam connection [Connection] The connection through which the
  #   write should be sent.
  # @yieldparam txn_num [Integer] Transaction number (NOT the ACID kind).
  # @yieldparam context [Operation::Context] The operation context.
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#218
  def modern_write_with_retry(session, server, context, &block); end

  # Retry writes on MMAPv1 should raise an actionable error; append actionable
  # information to the error message and preserve the backtrace.
  #
  # @api private
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#295
  def raise_unsupported_error(e); end

  # Called after a failed write, this will retry the write no more than
  # once.
  #
  # @api private
  # @param original_error [Exception] The exception that triggered the
  #   retry.
  # @param txn_num [Number] The transaction number.
  # @param context [Operation::Context] The context for the operation.
  # @return [Result] The result of the operation.
  # @since 2.19.0
  #
  # source://mongo//lib/mongo/retryable/write_worker.rb#255
  def retry_write(original_error, txn_num, context:, &block); end
end

# This is a semaphore implementation essentially encapsulating the
# sample code at https://ruby-doc.org/stdlib-2.0.0/libdoc/thread/rdoc/ConditionVariable.html.
#
# @api private
#
# source://mongo//lib/mongo/semaphore.rb#23
class Mongo::Semaphore
  # @api private
  # @return [Semaphore] a new instance of Semaphore
  #
  # source://mongo//lib/mongo/semaphore.rb#24
  def initialize; end

  # @api private
  #
  # source://mongo//lib/mongo/semaphore.rb#37
  def broadcast; end

  # @api private
  #
  # source://mongo//lib/mongo/semaphore.rb#43
  def signal; end

  # Waits for the semaphore to be signaled up to timeout seconds.
  # If semaphore is not signaled, returns after timeout seconds.
  #
  # @api private
  #
  # source://mongo//lib/mongo/semaphore.rb#31
  def wait(timeout = T.unsafe(nil)); end
end

# Represents a single server on the server side that can be standalone, part of
# a replica set, or a mongos.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server.rb#24
class Mongo::Server
  include ::Mongo::Loggable
  include ::Mongo::Monitoring::Publishable
  include ::Mongo::Event::Publisher
  extend ::Forwardable

  # Instantiate a new server object. Will start the background refresh and
  # subscribe to the appropriate events.
  #
  # @api private
  # @example Initialize the server.
  #   Mongo::Server.new('127.0.0.1:27017', cluster, monitoring, listeners)
  # @note Server must never be directly instantiated outside of a Cluster.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param address [Address] The host:port address to connect to.
  # @param cluster [Cluster] The cluster the server belongs to.
  # @param monitoring [Monitoring] The monitoring.
  # @param event_listeners [Event::Listeners] The event listeners.
  # @param options [Hash] The server options.
  # @return [Server] a new instance of Server
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#71
  def initialize(address, cluster, monitoring, event_listeners, options = T.unsafe(nil)); end

  # Is this server equal to another?
  #
  # @example Is the server equal to the other?
  #   server == other
  # @param other [Object] The object to compare to.
  # @return [true, false] If the servers are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#245
  def ==(other); end

  # @return [String] The configured address for the server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#106
  def address; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_metadata(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def arbiter?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def average_round_trip_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def check_driver_support!(*args, **_arg1, &block); end

  # @api private
  # @param :service_id [Object] Close connections with the specified
  #   service id only.
  # @param :interrupt_in_use_connections [true | false] Whether or not the
  #   cleared connections should be interrupted as well.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#667
  def clear_connection_pool(service_id: T.unsafe(nil), interrupt_in_use_connections: T.unsafe(nil)); end

  # Clear the servers description so that it is considered unknown and can be
  # safely disconnected.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#657
  def clear_description; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#294
  def close; end

  # @return [Cluster] cluster The server cluster.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#109
  def cluster; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster_time(*args, **_arg1, &block); end

  # The compressor negotiated by the server monitor, if any.
  #
  # This attribute is nil if no server check has not yet completed, and if
  # no compression was negatiated.
  #
  # @deprecated
  # @note Compression is negotiated for each connection separately.
  # @return [String | nil] The negotiated compressor.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#181
  def compressor; end

  # Determine if a connection to the server is able to be established and
  # messages can be sent to it.
  #
  # @deprecated No longer necessary with Server Selection specification.
  # @example Is the server connectable?
  #   server.connectable?
  # @return [true, false] If the server is connectable.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server.rb#261
  def connectable?; end

  # Whether the server is connected.
  #
  # @api private
  # @return [true|false] Whether the server is connected.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server.rb#320
  def connected?; end

  # @return [Server::Description] description The server
  #   description the monitor refreshes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#123
  def description; end

  # Disconnect the driver from this server.
  #
  # Disconnects all idle connections to this server in its connection pool,
  # if any exist. Stops the populator of the connection pool, if it is
  # running. Does not immediately close connections which are presently
  # checked out (i.e. in use) - such connections will be closed when they
  # are returned to their respective connection pools. Stop the server's
  # background monitor.
  #
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#275
  def disconnect!; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def features(*args, **_arg1, &block); end

  # Returns whether this server is forced to be a load balancer.
  #
  # @api private
  # @return [true | false] Whether this server is forced to be a load balancer.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#130
  def force_load_balancer?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ghost?(*args, **_arg1, &block); end

  # Handle authentication failure.
  #
  # @example Handle possible authentication failure.
  #   server.handle_auth_failure! do
  #   Auth.get(user).login(self)
  #   end
  # @raise [Auth::Unauthorized] If the authentication failed.
  # @return [Object] The result of the block execution.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/server.rb#524
  def handle_auth_failure!; end

  # Handle handshake failure.
  #
  # @api private
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server.rb#501
  def handle_handshake_failure!; end

  # @deprecated
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#159
  def heartbeat_frequency; end

  # @deprecated
  # @deprecated
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#159
  def heartbeat_frequency_seconds; end

  # Get a pretty printed server inspection.
  #
  # @example Get the server inspection.
  #   server.inspect
  # @return [String] The nice inspection string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#355
  def inspect; end

  # @return [Time | nil] last_scan The time when the last server scan
  #   completed, or nil if the server has not been scanned yet.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/server.rb#138
  def last_scan; end

  # @api private
  # @return [Float | nil] last_scan_monotime The monotonic time when the last server scan
  #   completed, or nil if the server has not been scanned yet.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#149
  def last_scan_monotime; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last_write_date(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def load_balancer?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logical_session_timeout(*args, **_arg1, &block); end

  # Determine if the provided tags are a subset of the server's tags.
  #
  # @example Are the provided tags a subset of the server's tags.
  #   server.matches_tag_set?({ 'rack' => 'a', 'dc' => 'nyc' })
  # @param tag_set [Hash] The tag set to compare to the server's tags.
  # @return [true, false] If the provided tags are a subset of the server's tags.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#461
  def matches_tag_set?(tag_set); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_bson_object_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_message_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_wire_version(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_write_batch_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def mongos?(*args, **_arg1, &block); end

  # @return [nil | Monitor] monitor The server monitor. nil if the servenr
  #   was created with monitoring_io: false option.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#113
  def monitor; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def monitor_app_metadata(*args, **_arg1, &block); end

  # @return [Monitoring] monitoring The monitoring.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#119
  def monitoring; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#680
  def next_connection_id; end

  # @return [Hash] The options hash.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#116
  def options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def other?(*args, **_arg1, &block); end

  # Get the connection pool for this server.
  #
  # @example Get the connection pool for the server.
  #   server.pool
  # @return [Mongo::Server::ConnectionPool] The connection pool.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#424
  def pool; end

  # Internal driver method to retrieve the connection pool for this server.
  #
  # Unlike +pool+, +pool_internal+ will not create a pool if one does not
  # already exist.
  #
  # @api private
  # @return [Server::ConnectionPool | nil] The connection pool, if one exists.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#445
  def pool_internal; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def primary?(*args, **_arg1, &block); end

  # Publishes the server opening event.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#340
  def publish_opening_event; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def push_monitor_app_metadata(*args, **_arg1, &block); end

  # Restart the server monitor.
  #
  # @example Restart the server monitor.
  #   server.reconnect!
  # @return [true] Always true.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server.rb#475
  def reconnect!; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def replica_set_name(*args, **_arg1, &block); end

  # Whether the server supports modern read retries.
  #
  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#543
  def retry_reads?; end

  # Will writes sent to this server be retried.
  #
  # @example Will writes be retried.
  #   server.retry_writes?
  # @note Retryable writes are only available on server versions 3.6+ and with
  #   sharded clusters or replica sets.
  # @note Some of the conditions in this method automatically return false for
  #   for load balanced topologies. The conditions in this method should
  #   always be true, since load-balanced topologies are only available on
  #   MongoDB 5.0+, and not for standalone topologies. Therefore, we can
  #   assume that retry writes are enabled.
  # @return [true, false] If writes will be retried.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server.rb#564
  def retry_writes?; end

  # @api private
  # @return [RoundTripTimeAverager] Round trip time averager object.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#233
  def round_trip_time_averager; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def scan!(*args, **_arg1, &block); end

  # @api private
  # @return [Semaphore] Semaphore to signal to request an immediate scan
  #   of this server by its monitor, if one is running.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#229
  def scan_semaphore; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def secondary?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def standalone?(*args, **_arg1, &block); end

  # Start monitoring the server.
  #
  # Used internally by the driver to add a server to a cluster
  # while delaying monitoring until the server is in the cluster.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#330
  def start_monitoring; end

  # @api private
  # @return [String] String representing server status (e.g. PRIMARY).
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#362
  def status; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server.rb#393
  def summary; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def tags(*args, **_arg1, &block); end

  # Marks server unknown and publishes the associated SDAM event
  # (server description changed).
  #
  # If the generation is passed in options, the server will only be marked
  # unknown if the passed generation is no older than the current generation
  # of the server's connection pool.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Options.
  # @since 2.4.0, SDAM events are sent as of version 2.7.0
  #
  # source://mongo//lib/mongo/server.rb#592
  def unknown!(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def unknown?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def update_cluster_time(*args, **_arg1, &block); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#645
  def update_description(description); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server.rb#685
  def update_last_scan; end

  # Execute a block of code with a connection, that is checked out of the
  # server's pool and then checked back in.
  #
  # @example Send a message with the connection.
  #   server.with_connection do |connection|
  #   connection.dispatch([ command ])
  #   end
  # @return [Object] The result of the block execution.
  # @since 2.3.0
  #
  # source://mongo//lib/mongo/server.rb#493
  def with_connection(connection_global_id: T.unsafe(nil), &block); end
end

# Application metadata that is sent to the server during a handshake,
#   when a new connection is established.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#19
class Mongo::Server::AppMetadata
  extend ::Forwardable

  # Instantiate the new AppMetadata object.
  #
  # @api private
  # @example Instantiate the app metadata.
  #   Mongo::Server::AppMetadata.new(options)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Metadata options.
  # @return [AppMetadata] a new instance of AppMetadata
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#74
  def initialize(options = T.unsafe(nil)); end

  # Get BSON::Document to be used as value for `client` key in
  # handshake document.
  #
  # @api private
  # @return [BSON::Document] Document describing client for handshake.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#128
  def client_document; end

  # @api private
  # @return [String] The platform information given when the object was
  #   instantiated.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#96
  def platform; end

  # @api private
  # @return [Symbol] The purpose of the connection for which this
  #   app metadata is created.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#92
  def purpose; end

  # @api private
  # @return [Hash | nil] The requested server API version.
  #
  #   Thes hash can have the following items:
  #   - *:version* -- string
  #   - *:strict* -- boolean
  #   - *:deprecation_errors* -- boolean
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#104
  def server_api; end

  # Get the metadata as BSON::Document to be sent to
  # as part of the handshake. The document should
  # be appended to a suitable handshake command.
  #
  # This method ensures that the metadata are valid.
  #
  # @api private
  # @raise [Error::InvalidApplicationName] When the metadata are invalid.
  # @return [BSON::Document] Valid document for connection's handshake.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#119
  def validated_document; end

  # @api private
  # @return [Array<Hash> | nil] Information about libraries wrapping
  #   the driver.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#108
  def wrapping_libraries; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#211
  def architecture; end

  # Verifies that the given purpose is either nil, or is one of the
  # allowed purposes.
  #
  # @api private
  # @param purpose [String | nil] The purpose to validate
  # @raise [ArgumentError] if the purpose is invalid
  # @return [String | nil] the {{purpose}} argument
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#227
  def check_purpose!(purpose); end

  # Get the metadata as BSON::Document to be sent to
  # as part of the handshake. The document should
  # be appended to a suitable handshake command.
  #
  # @api private
  # @return [BSON::Document] Document for connection's handshake.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#158
  def document; end

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#168
  def driver_doc; end

  # Returns the environment doc describing the current FaaS environment.
  #
  # @api private
  # @return [Hash | nil] the environment doc (or nil if not in a FaaS
  #   environment).
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#194
  def env_doc; end

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#207
  def name; end

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#182
  def os_doc; end

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#215
  def platform_string; end

  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#199
  def type; end

  # Check whether it is possible to build a valid app metadata document
  # with params provided on intialization.
  #
  # @api private
  # @raise [Error::InvalidApplicationName] When the metadata are invalid.
  #
  # source://mongo//lib/mongo/server/app_metadata.rb#145
  def validate!; end
end

# Option keys that affect auth mechanism negotiation.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata.rb#37
Mongo::Server::AppMetadata::AUTH_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# The driver name.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata.rb#34
Mongo::Server::AppMetadata::DRIVER_NAME = T.let(T.unsafe(nil), String)

# Implements the logic from the handshake spec, for deducing and
# reporting the current FaaS environment in which the program is
# executing.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#25
class Mongo::Server::AppMetadata::Environment
  # Create a new AppMetadata::Environment object, initializing it from
  # the current ENV variables. If no FaaS environment is detected, or
  # if the environment contains invalid or contradictory state, it will
  # be initialized with {{name}} set to {{nil}}.
  #
  # @api private
  # @return [Environment] a new instance of Environment
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#104
  def initialize; end

  # Queries whether the current environment is a valid AWS Lambda
  # environment.
  #
  # @api private
  # @return [true | false] whether the environment is a AWS Lambda
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#131
  def aws?; end

  # Queries whether the current environment is a valid Azure
  # environment.
  #
  # @api private
  # @return [true | false] whether the environment is a Azure
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#140
  def azure?; end

  # @api private
  # @note These error messagess are not to be propogated to the
  #   user; they are intended only for troubleshooting and debugging.)
  # @return [String | nil] the error message explaining why a valid
  #   FaaS environment was not detected, or nil if no error occurred.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#98
  def error; end

  # Queries whether the current environment is a valid FaaS environment.
  #
  # @api private
  # @return [true | false] whether the environment is a FaaS
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#122
  def faas?; end

  # @api private
  # @return [Hash | nil] the fields describing the detected FaaS
  #   environment.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#91
  def fields; end

  # Queries whether the current environment is a valid GCP
  # environment.
  #
  # @api private
  # @return [true | false] whether the environment is a GCP
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#149
  def gcp?; end

  # @api private
  # @return [String | nil] the name of the FaaS environment that was
  #   detected, or nil if no valid FaaS environment was detected.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#87
  def name; end

  # Compiles the detected environment information into a Hash. It will
  # always include a {{name}} key, but may include other keys as well,
  # depending on the detected FaaS environment. (See the handshake
  # spec for details.)
  #
  # @api private
  # @return [Hash] the detected environment information.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#168
  def to_h; end

  # Queries whether the current environment is a valid Vercel
  # environment.
  #
  # @api private
  # @return [true | false] whether the environment is a Vercel
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#158
  def vercel?; end

  private

  # Searches the DESCRIMINATORS list to see which (if any) apply to
  # the current environment.
  #
  # @api private
  # @raise [TooManyEnvironments] if the environment contains
  #   discriminating variables for more than one FaaS provider.
  # @return [String | nil] the name of the detected FaaS provider.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#181
  def detect_environment; end

  # Determines whether the named environment variable exists, and (if
  # a pattern has been declared for that descriminator) whether the
  # pattern matches the value of the variable.
  #
  # @api private
  # @param var [String] the name of the environment variable
  # @return [true | false] if the variable describes the current
  #   environment or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#203
  def discriminator_matches?(var); end

  # Sets the error message to the given value and sets the name to nil.
  #
  # @api private
  # @param msg [String] The error message to store.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#252
  def error=(msg); end

  # Extracts the named variable from the environment and validates it
  # against its declared definition.
  #
  # @api private
  # @param var [String] The name of the environment variable to look
  #   for.
  # @param definition [Hash] The definition of the field that applies
  #   to the named variable.
  # @raise [MissingVariable] if the environment does not include a
  #   variable required by the current FaaS provider.
  # @raise [ValueTooLong] if a required variable is too long.
  # @raise [TypeMismatch] if a required variable cannot be coerced to
  #   the expected type.
  # @return [Integer | String] the validated and coerced value of the
  #   given environment variable.
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#239
  def extract_field(var, definition); end

  # Extracts environment information from the current environment
  # variables, based on the detected FaaS environment. Populates the
  # {{@fields}} instance variable.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/environment.rb#215
  def populate_fields; end
end

# Describes how to coerce values of the specified type.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#58
Mongo::Server::AppMetadata::Environment::COERCIONS = T.let(T.unsafe(nil), Hash)

# The mapping that determines which FaaS environment is active, based
# on which environment variable(s) are present.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#48
Mongo::Server::AppMetadata::Environment::DISCRIMINATORS = T.let(T.unsafe(nil), Hash)

# Describes which fields are required for each FaaS environment,
# along with their expected types, and how they should be named in
# the handshake document.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#66
Mongo::Server::AppMetadata::Environment::FIELDS = T.let(T.unsafe(nil), Hash)

# This value is not explicitly specified in the spec, only implied to be
# less than 512.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#44
Mongo::Server::AppMetadata::Environment::MAXIMUM_VALUE_LENGTH = T.let(T.unsafe(nil), Integer)

# Error class for reporting that a required environment variable is
# missing.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#33
class Mongo::Server::AppMetadata::Environment::MissingVariable < ::Mongo::Error; end

# Error class for reporting that too many discriminators were found
# in the environment. (E.g. if the environment reports that it is
# running under both AWS and Azure.)
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#29
class Mongo::Server::AppMetadata::Environment::TooManyEnvironments < ::Mongo::Error; end

# Error class for reporting that the wrong type was given for a
# field.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#37
class Mongo::Server::AppMetadata::Environment::TypeMismatch < ::Mongo::Error; end

# Error class for reporting that the value for a field is too long.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/environment.rb#40
class Mongo::Server::AppMetadata::Environment::ValueTooLong < ::Mongo::Error; end

# The max application name byte size.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata.rb#31
Mongo::Server::AppMetadata::MAX_APP_NAME_SIZE = T.let(T.unsafe(nil), Integer)

# Possible connection purposes.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata.rb#40
Mongo::Server::AppMetadata::PURPOSES = T.let(T.unsafe(nil), Array)

# Implements the logic for building the platform string for the
# handshake.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/platform.rb#24
class Mongo::Server::AppMetadata::Platform
  # Create a new Platform object, referencing the given metadata object.
  #
  # @api private
  # @param metadata [Mongo::Server::AppMetadata] the metadata object
  #   the reference when building the platform string.
  # @return [Platform] a new instance of Platform
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#33
  def initialize(metadata); end

  # Builds and returns the default platform list, for use when building
  # the platform string.
  #
  # @api private
  # @return [Array<String>] the list of platform identifiers
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#78
  def default_platform_list; end

  # Returns the version of the current Java environment, or nil if not
  # invoked with JRuby.
  #
  # @api private
  # @return [String | nil] the current Java version
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#68
  def java_version; end

  # Queries whether the current runtime is JRuby or not.
  #
  # @api private
  # @return [true | false] whether the runtime is JRuby or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#40
  def jruby?; end

  # @api private
  # @return [Mongo::Server::AppMetadata] the metadata object to
  #   reference when building the platform string.
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#27
  def metadata; end

  # Returns the list of platform identifiers that identify this runtime.
  #
  # @api private
  # @return [Array<String>] the list of platform identifiers.
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#58
  def platforms; end

  # Returns a single letter representing the purpose reported to the
  # metadata, or nil if no purpose was specified.
  #
  # @api private
  # @return [String | nil] the code representing the purpose
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#91
  def purpose; end

  # Returns the list of Ruby versions that identify this runtime.
  #
  # @api private
  # @return [Array<String>] the list of ruby versions
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#47
  def ruby_versions; end

  # Builds and returns the platform string by concatenating relevant
  # values together.
  #
  # @api private
  # @return [String] the platform string
  #
  # source://mongo//lib/mongo/server/app_metadata/platform.rb#101
  def to_s; end
end

# Implements the metadata truncation logic described in the handshake
# spec.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/truncator.rb#24
class Mongo::Server::AppMetadata::Truncator
  # Creates a new Truncator instance and tries enforcing the maximum
  # document size on the given document.
  #
  # @api private
  # @note The document is modified in-place; if you wish to keep the
  #   original unchanged, you must deep-clone it prior to sending it to
  #   a truncator.
  # @param document [BSON::Document] The document to (potentially)
  #   truncate.
  # @return [Truncator] a new instance of Truncator
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#40
  def initialize(document); end

  # @api private
  # @return [BSON::Document] the document being truncated.
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#26
  def document; end

  # Whether the document fits within the required maximum document size.
  #
  # @api private
  # @return [true | false] if the document is okay or not.
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#56
  def ok?; end

  # The current size of the document, in bytes, as a serialized BSON
  # document.
  #
  # @api private
  # @return [Integer] the size of the document
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#49
  def size; end

  private

  # How many extra bytes must be trimmed before the document may be
  # considered #ok?.
  #
  # @api private
  # @return [Integer] how many bytes larger the document is than the
  #   maximum document size.
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#67
  def excess; end

  # Attempt to truncate the document using the documented metadata
  # priorities (see the handshake specification).
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#73
  def try_truncate!; end

  # Remove the {{:env}} key from the document.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#98
  def try_truncate_env!; end

  # Attempt to truncate the keys in the {{:env}} subdocument.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#88
  def try_truncate_env_fields!; end

  # A helper method for removing the keys of a Hash (in-place) until
  # the document is the necessary size. The keys are considered in order
  # (using the Hash's native key ordering), and each will be removed from
  # the hash in turn, until the document is the necessary size.
  #
  # Any keys in the {{reserved}} list will be ignored.
  #
  # @api private
  # @note the hash parameter is modified in-place.
  # @param hash [Hash | nil] the Hash instance to consider.
  # @param reserved [Array] the list of keys to ignore in the hash.
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#127
  def try_truncate_hash(hash, reserved: T.unsafe(nil)); end

  # Attempt to truncate the keys in the {{:os}} subdocument.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#93
  def try_truncate_os_fields!; end

  # Attempt to truncate or remove the {{:platform}} key from the
  # document.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#83
  def try_truncate_platform!; end

  # A helper method for truncating a string (in-place) by whatever
  # {{#excess}} is required.
  #
  # @api private
  # @note the parameter is modified in-place.
  # @param string [String] the string value to truncate.
  #
  # source://mongo//lib/mongo/server/app_metadata/truncator.rb#108
  def try_truncate_string(string); end
end

# The max application metadata document byte size.
#
# @api private
#
# source://mongo//lib/mongo/server/app_metadata/truncator.rb#29
Mongo::Server::AppMetadata::Truncator::MAX_DOCUMENT_SIZE = T.let(T.unsafe(nil), Integer)

# The default time in seconds to timeout a connection attempt.
#
# @since 2.4.3
#
# source://mongo//lib/mongo/server.rb#32
Mongo::Server::CONNECT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# This class models the socket connections for servers and their behavior.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/connection.rb#24
class Mongo::Server::Connection < ::Mongo::Server::ConnectionBase
  include ::Mongo::Retryable
  include ::Mongo::Id

  # Creates a new connection object to the specified target address
  # with the specified options.
  #
  # The constructor does not perform any I/O (and thus does not create
  # sockets, handshakes nor authenticates); call connect! method on the
  # connection object to create the network connection.
  #
  # @api private
  # @example Create the connection.
  #   Connection.new(server)
  # @note Connection must never be directly instantiated outside of a
  #   Server.
  # @option options
  # @option options
  # @option options
  # @param server [Mongo::Server] The server the connection is for.
  # @param options [Hash] The connection options.
  # @return [Connection] a new instance of Connection
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#106
  def initialize(server, options = T.unsafe(nil)); end

  # Whether the connection was closed.
  #
  # Closed connections should no longer be used. Instead obtain a new
  # connection from the connection pool.
  #
  # @return [true | false] Whether connection was closed.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection.rb#166
  def closed?; end

  # Establishes a network connection to the target address.
  #
  # If the connection is already established, this method does nothing.
  #
  # @example Connect to the host.
  #   connection.connect!
  # @note This method mutates the connection object by setting a socket if
  #   one previously did not exist.
  # @return [true] If the connection succeeded.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#229
  def connect!; end

  # Whether the connection was connected and was not interrupted, closed,
  # or had an error raised.
  #
  # @return [true | false] if the connection was connected.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#154
  def connected?; end

  # The connection pool from which this connection was created.
  # May be nil.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#146
  def connection_pool; end

  # Disconnect the connection.
  #
  # @note Once a connection is disconnected, it should no longer be used.
  #   A new connection should be obtained from the connection pool which
  #   will either return a ready connection or create a new connection.
  #   If linting is enabled, reusing a disconnected connection will raise
  #   Error::LintError. If linting is not enabled, a warning will be logged.
  # @note This method mutates the connection object by setting the socket
  #   to nil if the closing succeeded.
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [true] If the disconnect succeeded.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#305
  def disconnect!(options = T.unsafe(nil)); end

  # source://rack-mini-profiler/3.1.1/lib/patches/db/mongo.rb#5
  def dispatch(*args, &blk); end

  # source://rack-mini-profiler/3.1.1/lib/patches/db/mongo.rb#5
  def dispatch_with_timing(*args, &blk); end

  # source://mongo//lib/mongo/server/connection_base.rb#150
  def dispatch_without_timing(messages, context, options = T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#186
  def error?; end

  # across all connections.
  #
  # @return [Integer] The global ID for the connection. This will be unique
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#140
  def global_id; end

  # across connections to the same server object.
  #
  # @return [Integer] The ID for the connection. This will be unique
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection.rb#136
  def id; end

  # Mark the connection as interrupted.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#181
  def interrupted!; end

  # Whether the connection was interrupted.
  #
  # Interrupted connections were already removed from the pool and should
  # not be checked back into the pool.
  #
  # @return [true | false] Whether connection was interrupted.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#176
  def interrupted?; end

  # @return [Time] The last time the connection was checked back into a pool.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server/connection.rb#130
  def last_checkin; end

  # Mark the connection as pinned.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#205
  def pin; end

  # Ping the connection to see if the server is responding to commands.
  # This is non-blocking on the server side.
  #
  # @deprecated No longer necessary with Server Selection specification.
  # @example Ping the connection.
  #   connection.ping
  # @note This uses a pre-serialized ping message for optimization.
  # @return [true, false] If the server is accepting connections.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/connection.rb#350
  def ping; end

  # Whether the connection is used by a transaction or cursor operations.
  #
  # Pinned connections should not be disconnected and removed from a
  # connection pool if they are idle or stale.
  #
  # # @return [ true | false ] Whether connection is pinned.
  #
  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#198
  def pinned?; end

  # Record the last checkin time.
  #
  # @example Record the checkin time on this connection.
  #   connection.record_checkin!
  # @return [self]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server/connection.rb#380
  def record_checkin!; end

  # Get the timeout to execute an operation on a socket.
  #
  # @return [Float] The operation timeout in seconds.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#366
  def socket_timeout; end

  # Get the timeout to execute an operation on a socket.
  #
  # @deprecated Please use :socket_timeout instead. Will be removed in 3.0.0
  # @return [Float] The operation timeout in seconds.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#366
  def timeout; end

  # Mark the connection as not pinned.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#212
  def unpin; end

  private

  # Creates the socket. The method is separate from do_connect, so that
  # pending connections can be closed if they are interrupted during hello.
  #
  # @return [Socket] The created socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#259
  def create_socket; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#387
  def deliver(message, client, options = T.unsafe(nil)); end

  # Separate method to permit easier mocking in the test suite.
  #
  # @return [Array<Server::Description, String | Symbol>] A server
  #   description instance from the hello response of the returned socket
  #   and the compressor to use.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#271
  def do_connect; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#393
  def handle_errors; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection.rb#411
  def raise_if_closed!; end

  class << self
    # source://mongo//lib/mongo/id.rb#60
    def next_id; end
  end
end

# The ping command.
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.1.0
#
# source://mongo//lib/mongo/server/connection.rb#35
Mongo::Server::Connection::PING = T.let(T.unsafe(nil), Hash)

# The ping message as raw bytes.
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.1.0
#
# source://mongo//lib/mongo/server/connection.rb#63
Mongo::Server::Connection::PING_BYTES = T.let(T.unsafe(nil), String)

# Ping message.
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.1.0
#
# source://mongo//lib/mongo/server/connection.rb#49
Mongo::Server::Connection::PING_MESSAGE = T.let(T.unsafe(nil), Mongo::Protocol::Query)

# The ping command for an OP_MSG (server versions >= 3.6).
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.5.0
#
# source://mongo//lib/mongo/server/connection.rb#42
Mongo::Server::Connection::PING_OP_MSG = T.let(T.unsafe(nil), Hash)

# The ping OP_MSG message as raw bytes (server versions >= 3.6).
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.5.0
#
# source://mongo//lib/mongo/server/connection.rb#70
Mongo::Server::Connection::PING_OP_MSG_BYTES = T.let(T.unsafe(nil), String)

# Ping message as an OP_MSG (server versions >= 3.6).
#
# @deprecated No longer necessary with Server Selection specification.
# @since 2.5.0
#
# source://mongo//lib/mongo/server/connection.rb#56
Mongo::Server::Connection::PING_OP_MSG_MESSAGE = T.let(T.unsafe(nil), Mongo::Protocol::Msg)

# This class encapsulates common connection functionality.
#
# @api semipublic
# @note Although methods of this module are part of the public API,
#   the fact that these methods are defined on this module and not on
#   the classes which include this module is not part of the public API.
#
# source://mongo//lib/mongo/server/connection_base.rb#28
class Mongo::Server::ConnectionBase < ::Mongo::Server::ConnectionCommon
  include ::Mongo::Loggable
  include ::Mongo::Monitoring::Publishable
  extend ::Forwardable

  # source://forwardable/1.3.3/forwardable.rb#231
  def address(*args, **_arg1, &block); end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_base.rb#107
  def app_metadata; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cluster_time(*args, **_arg1, &block); end

  # Returns the server description for this connection, derived from
  # the hello response for the handshake performed on this connection.
  #
  # @api private
  # @note A connection object that hasn't yet connected (handshaken and
  #   authenticated, if authentication is required) does not have a
  #   description. While handshaking and authenticating the driver must
  #   be using global defaults, in particular not assuming that the
  #   properties of a particular connection are the same as properties
  #   of other connections made to the same address (since the server
  #   on the other end could have been shut down and a different server
  #   version could have been launched).
  # @return [Server::Description] Server description for this connection.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#82
  def description; end

  # Dispatch a single message to the connection. If the message
  # requires a response, a reply will be returned.
  #
  # @api semipublic
  # @example Dispatch the message.
  #   connection.dispatch([ insert ])
  # @note This method is named dispatch since 'send' is a core Ruby method on
  #   all objects.
  # @note For backwards compatibility, this method accepts the messages
  #   as an array. However, exactly one message must be given per invocation.
  # @option options
  # @param messages [Array<Message>] A one-element array containing
  #   the message to dispatch.
  # @param context [Operation::Context] The operation context.
  # @param options [Hash]
  # @raise [Error::SocketError | Error::SocketTimeoutError] When there is a network error.
  # @return [Protocol::Message | nil] The reply if needed.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection_base.rb#150
  def dispatch(messages, context, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def features(*args, **_arg1, &block); end

  # Connection pool generation from which this connection was created.
  # May be nil.
  #
  # @api semipublic
  # @return [Integer | nil] Connection pool generation.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#100
  def generation; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_bson_object_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_message_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def mongos?(*args, **_arg1, &block); end

  # @api semipublic
  # @return [Hash] options The passed in options.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#53
  def options; end

  # @api semipublic
  # @return [Mongo::Address] address The address to connect to.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#58
  def server; end

  # @api semipublic
  # @return [nil | Object] The service id, if any.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#92
  def service_id; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def update_cluster_time(*args, **_arg1, &block); end

  private

  # @api semipublic
  # @raise [Error::SocketError | Error::SocketTimeoutError] When there is a network error.
  #
  # source://mongo//lib/mongo/server/connection_base.rb#167
  def deliver(message, context, options = T.unsafe(nil)); end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_base.rb#216
  def serialize(message, context, buffer = T.unsafe(nil)); end
end

# The maximum allowed size in bytes that a user-supplied document may
# take up when serialized, if the server's hello response does not
# include maxBsonObjectSize field.
#
# The commands that are sent to the server may exceed this size by
# MAX_BSON_COMMAND_OVERHEAD.
#
# @api private
#
# source://mongo//lib/mongo/server/connection_base.rb#40
Mongo::Server::ConnectionBase::DEFAULT_MAX_BSON_OBJECT_SIZE = T.let(T.unsafe(nil), Integer)

# The additional overhead allowed for command data (i.e. fields added
# to the command document by the driver, as opposed to documents
# provided by the user) when serializing a complete command to BSON.
#
# @api private
#
# source://mongo//lib/mongo/server/connection_base.rb#47
Mongo::Server::ConnectionBase::MAX_BSON_COMMAND_OVERHEAD = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://mongo//lib/mongo/server/connection_base.rb#50
Mongo::Server::ConnectionBase::REDUCED_MAX_BSON_SIZE = T.let(T.unsafe(nil), Integer)

# Common methods used by both monitoring and non-monitoring connections.
#
# @api semipublic
# @note Although methods of this module are part of the public API,
#   the fact that these methods are defined on this module and not on
#   the classes which include this module is not part of the public API.
#
# source://mongo//lib/mongo/server/connection_common.rb#28
class Mongo::Server::ConnectionCommon
  # The compressor negotiated during the handshake for this connection,
  # if any.
  #
  # This attribute is nil for connections that haven't completed the
  # handshake yet, and for connections that negotiated no compression.
  #
  # @api semipublic
  # @return [String | nil] The compressor.
  #
  # source://mongo//lib/mongo/server/connection_common.rb#37
  def compressor; end

  # Determine if the connection is currently connected.
  #
  # @api semipublic
  # @deprecated
  # @example Is the connection connected?
  #   connection.connected?
  # @return [true, false] If connected.
  #
  # source://mongo//lib/mongo/server/connection_common.rb#47
  def connected?; end

  # Build a command that should be used for connection handshake.
  #
  # @api private
  # @param handshake_document [BSON::Document] Document that should be
  #   sent to a server for handshake purpose.
  # @return [Protocol::Message] Command that should be sent to a server
  #   for handshake purposes.
  #
  # source://mongo//lib/mongo/server/connection_common.rb#94
  def handshake_command(handshake_document); end

  # Build a document that should be used for connection handshake.
  #
  # @api private
  # @param app_metadata [Server::AppMetadata] Application metadata
  # @param speculative_auth_doc [BSON::Document] The speculative
  #   authentication document, if any.
  # @param load_balancer [true | false] Whether the connection is to
  #   a load balancer.
  # @param server_api [Hash | nil] server_api Server API version.
  # @return [BSON::Document] Document that should be sent to a server
  #   for handshake purposes.
  #
  # source://mongo//lib/mongo/server/connection_common.rb#68
  def handshake_document(app_metadata, speculative_auth_doc: T.unsafe(nil), load_balancer: T.unsafe(nil), server_api: T.unsafe(nil)); end

  # @api private
  # @return [Integer] pid The process id when the connection was created.
  #
  # source://mongo//lib/mongo/server/connection_common.rb#53
  def pid; end

  private

  # Yields to the block and, if the block raises an exception, adds a note
  # to the exception with the address of the specified server.
  #
  # This method is intended to add server address information to exceptions
  # raised during execution of operations on servers.
  #
  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_common.rb#145
  def add_server_diagnostics; end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_common.rb#189
  def ensure_connected; end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_common.rb#118
  def set_compressor!(reply); end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_common.rb#116
  def socket; end

  # @api semipublic
  #
  # source://mongo//lib/mongo/server/connection_common.rb#176
  def ssl_options; end
end

# @api semipublic
#
# source://mongo//lib/mongo/server/connection_common.rb#112
Mongo::Server::ConnectionCommon::HELLO_DOC = T.let(T.unsafe(nil), BSON::Document)

# @api semipublic
#
# source://mongo//lib/mongo/server/connection_common.rb#114
Mongo::Server::ConnectionCommon::LEGACY_HELLO_DOC = T.let(T.unsafe(nil), BSON::Document)

# Represents a connection pool for server connections.
#
# @since 2.0.0, largely rewritten in 2.9.0
#
# source://mongo//lib/mongo/server/connection_pool.rb#24
class Mongo::Server::ConnectionPool
  include ::Mongo::Loggable
  include ::Mongo::Monitoring::Publishable
  extend ::Forwardable

  # Create the new connection pool.
  #
  # Note: Additionally, options for connections created by this pool should
  #   be included in the options passed here, and they will be forwarded to
  #   any connections created by the pool.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param server [Server] The server which this connection pool is for.
  # @param options [Hash] The connection pool options.
  # @return [ConnectionPool] a new instance of ConnectionPool
  # @since 2.0.0, API changed in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#102
  def initialize(server, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def address(*args, **_arg1, &block); end

  # Number of available connections in the pool.
  #
  # @return [Integer] Number of available connections.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#284
  def available_count; end

  # Check a connection back into the pool.
  #
  # The connection must have been previously created by this pool.
  #
  # @param connection [Mongo::Server::Connection] The connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#389
  def check_in(connection); end

  # Checks a connection out of the pool.
  #
  # If there are active connections in the pool, the most recently used
  # connection is returned. Otherwise if the connection pool size is less
  # than the max size, creates a new connection and returns it. Otherwise
  # waits up to the wait timeout and raises Timeout::Error if there are
  # still no active connections and the pool is at max size.
  #
  # The returned connection counts toward the pool's max size. When the
  # caller is finished using the connection, the connection should be
  # checked back in via the check_in method.
  #
  # @raise [Error::PoolClosedError] If the pool has been closed.
  # @raise [Timeout::Error] If the connection pool is at maximum size
  #   and remains so for longer than the wait timeout.
  # @return [Mongo::Server::Connection] The checked out connection.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#355
  def check_out(connection_global_id: T.unsafe(nil)); end

  # Closes all idle connections in the pool and schedules currently checked
  # out connections to be closed when they are checked back into the pool.
  # The pool is paused, it will not create new connections in background
  # and it will fail checkout requests until marked ready.
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [true] true.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#507
  def clear(options = T.unsafe(nil)); end

  # Marks the pool closed, closes all idle connections in the pool and
  # schedules currently checked out connections to be closed when they are
  # checked back into the pool. If force option is true, checked out
  # connections are also closed. Attempts to use the pool after it is closed
  # will raise Error::PoolClosedError.
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [true] Always true.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#631
  def close(options = T.unsafe(nil)); end

  # Close sockets that have been open for longer than the max idle time,
  #   if the option is set.
  #
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#718
  def close_idle_sockets; end

  # Whether the pool has been closed.
  #
  # @return [true | false] Whether the pool is closed.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#297
  def closed?; end

  # Disconnects the pool.
  #
  # Does everything that +clear+ does, except if the pool is closed
  # this method does nothing but +clear+ would raise PoolClosedError.
  #
  # @api private
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#524
  def disconnect!(options = T.unsafe(nil)); end

  # Executes the check in after having already acquired the lock.
  #
  # @param connection [Mongo::Server::Connection] The connection.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#402
  def do_check_in(connection); end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#532
  def do_clear(options = T.unsafe(nil)); end

  # Mark the connection pool as paused without acquiring the lock.
  #
  # @api private
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#480
  def do_pause; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def generation(*args, **_arg1, &block); end

  # @api private
  # @return [Integer] generation Generation of connections currently
  #   being used by the queue.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#226
  def generation_manager; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def generation_unlocked(*args, **_arg1, &block); end

  # Get a pretty printed string inspection for the pool.
  #
  # @example Inspect the pool.
  #   pool.inspect
  # @return [String] The pool inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#678
  def inspect; end

  # @api private
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#335
  def max_connecting; end

  # The maximum seconds a socket can remain idle since it has been
  # checked in to the pool, if set.
  #
  # @return [Float | nil] The max socket idle time in seconds.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#221
  def max_idle_time; end

  # Get the maximum size of the connection pool.
  #
  # @return [Integer] The maximum size of the connection pool.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#193
  def max_size; end

  # Get the minimum size of the connection pool.
  #
  # @return [Integer] The minimum size of the connection pool.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#202
  def min_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def monitoring(*args, **_arg1, &block); end

  # @return [Hash] options The pool options.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#180
  def options; end

  # Mark the connection pool as paused.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#465
  def pause; end

  # A connection pool is paused if it is not closed and it is not ready.
  #
  # @raise [Error::PoolClosedError] If the pool has been closed.
  # @return [true | false] whether the connection pool is paused.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#239
  def paused?; end

  # This method does three things:
  # 1. Creates and adds a connection to the pool, if the pool's size is
  #    below min_size. Retries once if a socket-related error is
  #    encountered during this process and raises if a second error or a
  #    non socket-related error occurs.
  # 2. Removes stale connections from the connection pool.
  # 3. Interrupts connections marked for interruption.
  #
  # Used by the pool populator background thread.
  #
  # occured, or the non socket-related error
  #
  # @api private
  # @raise [Error::AuthError, Error] The second socket-related error raised if a retry
  # @return [true | false] Whether this method should be called again
  #   to create more connections.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#776
  def populate; end

  # Condition variable broadcast when the size of the pool changes
  # to wake up the populator
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#59
  def populate_semaphore; end

  # @api private
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#332
  def populator; end

  # Instructs the pool to create and return connections.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#580
  def ready; end

  # Whether the pool is ready.
  #
  # @return [true | false] Whether the pool is ready.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#304
  def ready?; end

  # @api private
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#183
  def server; end

  # Size of the connection pool.
  #
  # Includes available and checked out connections.
  #
  # @return [Integer] Size of the connection pool.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#254
  def size; end

  # Stop the background populator thread and clean up any connections created
  # which have not been connected yet.
  #
  # Used when closing the pool or when terminating the bg thread for testing
  # purposes. In the latter case, this method must be called before the pool
  # is used, to ensure no connections in pending_connections were created in-flow
  # by the check_out method.
  #
  # @api private
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#748
  def stop_populator; end

  # @api experimental
  # @note This method is experimental and subject to change.
  # @since 2.11.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#314
  def summary; end

  # @api private
  # @return [Integer] The number of unavailable connections in the pool.
  #   Used to calculate whether we have hit max_pool_size.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#275
  def unavailable_connections; end

  # The time to wait, in seconds, for a connection to become available.
  #
  # @return [Float] The queue wait timeout.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#211
  def wait_timeout; end

  # Yield the block to a connection, while handling check in/check out logic.
  #
  # @example Execute with a connection.
  #   pool.with_connection do |connection|
  #   connection.read
  #   end
  # @return [Object] The result of the block.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#701
  def with_connection(connection_global_id: T.unsafe(nil)); end

  private

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#994
  def check_invariants; end

  # Clear and disconnect the pending connections.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1058
  def clear_pending_connections; end

  # Close the available connections.
  #
  # @param connections [Array<Connection>] A list of connections.
  # @param service_id [Object] The service id.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1020
  def close_available_connections(service_id); end

  # Attempts to connect (handshake and auth) the connection. If an error is
  # encountered, closes the connection and raises the error.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#978
  def connect_connection(connection); end

  # Connects a connection and raises an exception if the connection
  # cannot be connected.
  # This method also publish corresponding event and ensures that counters
  # and condition variables are updated.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1330
  def connect_or_raise(connection); end

  # Checks whether a connection is stale.
  #
  # @param connection [Mongo::Server::Connection] The connection to check.
  # @return [true | false] Whether the connection is stale.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#941
  def connection_stale_unlocked?(connection); end

  # Create a connection, connect it, and add it to the pool. Also
  # check for stale and interruptable connections and deal with them.
  #
  # @raise [Mongo::Error] An error encountered during connection connect
  # @return [true | false] True if a connection was created and
  #   added to the pool, false otherwise
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#856
  def create_and_add_connection; end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#836
  def create_connection; end

  # Decrement connection requests counter and signal the condition
  # variables that the number of unavailable connections has decreased.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1354
  def decrement_connection_requests_and_signal; end

  # Retrieves a connection if one is available, otherwise we create a new
  # one. If no connection exists and the pool is at max size, wait until
  # a connection is checked back into the pool.
  #
  # @param pid [Integer] The current process id.
  # @param connection_global_id [Integer] The global id for the
  #   connection to check out.
  # @raise [Error::PoolClosedError] If the pool has been closed.
  # @raise [Timeout::Error] If the connection pool is at maximum size
  #   and remains so for longer than the wait timeout.
  # @return [Mongo::Server::Connection] The checked out connection.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1193
  def get_connection(pid, connection_global_id); end

  # If the connection was interrupted, raise a pool cleared error. If it
  # wasn't interrupted raise the original error.
  #
  # @param The [Connection] connection.
  # @param The [Mongo::Error] original error.
  # @raise [Mongo::Error | Mongo::Error::PoolClearedError] A PoolClearedError
  #   if the connection was interrupted, the original error if not.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#965
  def maybe_raise_pool_cleared!(connection, e); end

  # Returns the next available connection, optionally with given
  # global id. If no suitable connections are available,
  # returns nil.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#820
  def next_available_connection(connection_global_id); end

  # The lock should be acquired when calling this method.
  #
  # @raise [Error::ConnectionCheckOutTimeout]
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1067
  def raise_check_out_timeout!(connection_global_id); end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1093
  def raise_check_out_timeout_locked!(connection_global_id); end

  # Asserts that the pool has not been closed.
  #
  # @raise [Error::PoolClosedError] If the pool has been closed.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#951
  def raise_if_closed!; end

  # The lock should be acquired when calling this method.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1134
  def raise_if_not_ready!; end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1099
  def raise_if_pool_closed!; end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1111
  def raise_if_pool_paused!; end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1127
  def raise_if_pool_paused_locked!; end

  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1140
  def raise_unless_locked!; end

  # Interrupt connections scheduled for interruption.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#904
  def remove_interrupted_connections; end

  # Removes and disconnects all stale available connections.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#895
  def remove_stale_connection; end

  # Retrieves a connection and connects it.
  #
  # @param connection_global_id [Integer] The global id for the
  #   connection to check out.
  # @raise [Error::PoolClosedError] If the pool has been closed.
  # @raise [Timeout::Error] If the connection pool is at maximum size
  #   and remains so for longer than the wait timeout.
  # @return [Mongo::Server::Connection] The checked out connection.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1253
  def retrieve_and_connect_connection(connection_global_id); end

  # Schedule connections of previous generations for interruption.
  #
  # @param connections [Array<Connection>] A list of connections.
  # @param service_id [Object] The service id.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1050
  def schedule_for_interruption(connections, service_id); end

  # Returns the size of the connection pool without acquiring the lock.
  # This method should only be used by other pool methods when they are
  # already holding the lock as Ruby does not allow a thread holding a
  # lock to acquire this lock again.
  #
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#266
  def unsynchronized_size; end

  # @return [Boolean]
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1146
  def valid_available_connection?(connection, pid, connection_global_id); end

  # Waits for a connection to become available, or raises is no connection
  # becomes available before the timeout.
  #
  # @param connection_global_id [Integer] The global id for the
  #   connection to check out.
  # @param deadline [Float] The time at which to stop waiting.
  # @return [Mongo::Server::Connection] The checked out connection.
  # @since 2.0.0, largely rewritten in 2.9.0
  #
  # source://mongo//lib/mongo/server/connection_pool.rb#1292
  def wait_for_connection(connection_global_id, deadline); end

  class << self
    # Finalize the connection pool for garbage collection.
    #
    # @param available_connections [List<Mongo::Connection>] The available connections.
    # @param pending_connections [List<Mongo::Connection>] The pending connections.
    # @param populator [Populator] The populator.
    # @return [Proc] The Finalizer.
    # @since 2.0.0, largely rewritten in 2.9.0
    #
    # source://mongo//lib/mongo/server/connection_pool.rb#797
    def finalize(available_connections, pending_connections, populator); end
  end
end

# The default maximum number of connections that can be connecting at
# any given time.
#
# @since 2.0.0, largely rewritten in 2.9.0
#
# source://mongo//lib/mongo/server/connection_pool.rb#41
Mongo::Server::ConnectionPool::DEFAULT_MAX_CONNECTING = T.let(T.unsafe(nil), Integer)

# The default max size for the connection pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/server/connection_pool.rb#32
Mongo::Server::ConnectionPool::DEFAULT_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# The default min size for the connection pool.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/server/connection_pool.rb#37
Mongo::Server::ConnectionPool::DEFAULT_MIN_SIZE = T.let(T.unsafe(nil), Integer)

# The default timeout, in seconds, to wait for a connection.
#
# This timeout applies while in flow threads are waiting for background
# threads to establish connections (and hence they must connect, handshake
# and auth in the allotted time).
#
# It is currently set to 10 seconds. The default connect timeout is
# 10 seconds by itself, but setting large timeouts can get applications
# in trouble if their requests get timed out by the reverse proxy,
# thus anything over 15 seconds is potentially dangerous.
#
# @since 2.9.0
#
# source://mongo//lib/mongo/server/connection_pool.rb#55
Mongo::Server::ConnectionPool::DEFAULT_WAIT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#23
class Mongo::Server::ConnectionPool::GenerationManager
  # @api private
  # @return [GenerationManager] a new instance of GenerationManager
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#25
  def initialize(server:); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#66
  def bump(service_id: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#35
  def generation(service_id: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#43
  def generation_unlocked(service_id: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#49
  def pipe_fds(service_id: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#53
  def remove_pipe_fds(generation, service_id: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#33
  def server; end

  private

  # Close all fds scheduled for closing.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#107
  def close_all_scheduled; end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/generation_manager.rb#94
  def validate_service_id!(service_id); end
end

# A manager that maintains the invariant that the
# size of a connection pool is at least minPoolSize.
#
# @api private
#
# source://mongo//lib/mongo/server/connection_pool/populator.rb#25
class Mongo::Server::ConnectionPool::Populator
  include ::Mongo::Loggable
  include ::Mongo::BackgroundThread

  # @api private
  # @option options
  # @param pool [Server::ConnectionPool] The connection pool.
  # @param options [Hash] The options.
  # @return [Populator] a new instance of Populator
  #
  # source://mongo//lib/mongo/server/connection_pool/populator.rb#32
  def initialize(pool, options = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/populator.rb#38
  def options; end

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/populator.rb#40
  def pre_stop; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/server/connection_pool/populator.rb#46
  def do_work; end
end

# Represents a description of the server, populated by the result of the
# hello command.
#
# Note: Unknown servers do not have wire versions, but for legacy reasons
# we return 0 for min_wire_version and max_wire_version of any server that does
# not have them. Presently the driver sometimes constructs commands when the
# server is unknown, so references to min_wire_version and max_wire_version
# should not be nil. When driver behavior is changed
# (https://jira.mongodb.org/browse/RUBY-1805), this may no longer be necessary.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#32
class Mongo::Server::Description
  # Instantiate the new server description from the result of the hello
  # command or fabricate a placeholder description for Unknown and
  # LoadBalancer servers.
  #
  # @api private
  # @example Instantiate the new description.
  #   Description.new(address, { 'isWritablePrimary' => true }, 0.5)
  # @param address [Address] The server address.
  # @param config [Hash] The result of the hello command.
  # @param average_round_trip_time [Float] The moving average time (sec) the hello
  #   command took to complete.
  # @param average_round_trip_time [Float] The moving average time (sec)
  #   the ismaster call took to complete.
  # @param load_balancer [true | false] Whether the server is treated as
  #   a load balancer.
  # @param force_load_balancer [true | false] Whether the server is
  #   forced to be a load balancer.
  # @return [Description] a new instance of Description
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#220
  def initialize(address, config = T.unsafe(nil), average_round_trip_time: T.unsafe(nil), load_balancer: T.unsafe(nil), force_load_balancer: T.unsafe(nil)); end

  # Check equality of two descriptions.
  #
  # @example Check description equality.
  #   description == other
  # @param other [Object] The other description.
  # @return [true, false] Whether the objects are equal.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#859
  def ==(other); end

  # @return [Address] address The server's address.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#285
  def address; end

  # Returns whether this server is an arbiter, per the SDAM spec.
  #
  # @example Is the server an arbiter?
  #   description.arbiter?
  # @return [true, false] If the server is an arbiter.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#313
  def arbiter?; end

  # Get a list of all arbiters in the replica set.
  #
  # @example Get the arbiters in the replica set.
  #   description.arbiters
  # @return [Array<String>] The arbiters in the set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#327
  def arbiters; end

  # @return [Float] The moving average time the hello call took to complete.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#303
  def average_round_trip_time; end

  # @return [Hash] The actual result from the hello command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#288
  def config; end

  # Whether this description is from a data-bearing server
  # (standalone, mongos, primary or secondary).
  #
  # @return [true, false] Whether the description is from a data-bearing
  #   server.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server/description.rb#789
  def data_bearing?; end

  # Get the electionId from the config.
  #
  # @example Get the electionId.
  #   description.election_id
  # @return [BSON::ObjectId] The election id.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/description.rb#475
  def election_id; end

  # Check equality of two descriptions.
  #
  # @example Check description equality.
  #   description == other
  # @param other [Object] The other description.
  # @return [true, false] Whether the objects are equal.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#859
  def eql?(other); end

  # @return [Features] features The features for the server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#298
  def features; end

  # Whether this server is a ghost, per the SDAM spec.
  #
  # @example Is the server a ghost?
  #   description.ghost?
  # @return [true, false] If the server is a ghost.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#339
  def ghost?; end

  # Will return true if the server is hidden.
  #
  # @example Is the server hidden?
  #   description.hidden?
  # @return [true, false] If the server is hidden.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#352
  def hidden?; end

  # Get a list of all servers in the replica set.
  #
  # @example Get the servers in the replica set.
  #   description.hosts
  # @return [Array<String>] The servers in the set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#364
  def hosts; end

  # Inspect the server description.
  #
  # @example Inspect the server description
  #   description.inspect
  # @return [String] The inspection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#376
  def inspect; end

  # Is this description from the given server.
  #
  # @deprecated
  # @example Check if the description is from a given server.
  #   description.is_server?(server)
  # @return [true, false] If the description is from the server.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#751
  def is_server?(server); end

  # Time when this server description was created according to monotonic clock.
  #
  # @api private
  # @return [Float] Server description creation monotonic time.
  # @see Description::last_updated_time for more detail
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#835
  def last_update_monotime; end

  # Time when this server description was created.
  #
  # completed, because marking a server unknown updates its description
  # and last_update_time. Use Server#last_scan to find out when the server
  # was last successfully checked by its Monitor.
  #
  # @note This time does not indicate when a successful server check
  # @return [Time] Server description creation time.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server/description.rb#826
  def last_update_time; end

  # Get the lastWriteDate from the lastWrite subdocument in the config.
  #
  # @example Get the lastWriteDate value.
  #   description.last_write_date
  # @return [Time] The last write date.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/server/description.rb#540
  def last_write_date; end

  # Is a server included in this description's list of servers.
  #
  # @deprecated
  # @example Check if a server is in the description list of servers.
  #   description.lists_server?(server)
  # @return [true, false] If a server is in the description's list
  #   of servers.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#765
  def lists_server?(server); end

  # Returns whether this server is a load balancer.
  #
  # @return [true | false] Whether this server is a load balancer.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#293
  def load_balancer?; end

  # Get the logicalSessionTimeoutMinutes from the config.
  #
  # @example Get the logicalSessionTimeoutMinutes value in minutes.
  #   description.logical_session_timeout
  # @return [Integer, nil] The logical session timeout in minutes.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server/description.rb#552
  def logical_session_timeout; end

  # Get the max BSON object size for this server version.
  #
  # @example Get the max BSON object size.
  #   description.max_bson_object_size
  # @return [Integer] The maximum object size in bytes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#388
  def max_bson_object_size; end

  # Get the max message size for this server version.
  #
  # @example Get the max message size.
  #   description.max_message_size
  # @return [Integer] The maximum message size in bytes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#400
  def max_message_size; end

  # Get the maximum wire version. Defaults to zero.
  #
  # @example Get the max wire version.
  #   description.max_wire_version
  # @return [Integer] The max wire version supported.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#424
  def max_wire_version; end

  # Get the maximum batch size for writes.
  #
  # @example Get the max batch size.
  #   description.max_write_batch_size
  # @return [Integer] The max batch size.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#412
  def max_write_batch_size; end

  # Get the me field value.
  #
  # @note The value in me field may differ from the server description's
  #   address. This can happen, for example, in split horizon configurations.
  #   The SDAM spec only requires removing servers whose me does not match
  #   their address in some of the situations (e.g. when the server in
  #   question is an RS member but not a primary).
  # @return [String] The me field.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/description.rb#451
  def me; end

  # Check if there is a mismatch between the address host and the me field.
  #
  # @example Check if there is a mismatch.
  #   description.me_mismatch?
  # @return [true, false] If there is a mismatch between the me field and the address host.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#801
  def me_mismatch?; end

  # Get the minimum wire version. Defaults to zero.
  #
  # @example Get the min wire version.
  #   description.min_wire_version
  # @return [Integer] The min wire version supported.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#436
  def min_wire_version; end

  # Returns whether this server is a mongos, per the SDAM spec.
  #
  # @example Is the server a mongos?
  #   description.mongos?
  # @return [true, false] If the server is a mongos.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#564
  def mongos?; end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#725
  def ok?; end

  # opTime in lastWrite subdocument of the hello response.
  #
  # @return [BSON::Timestamp] The timestamp.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/server/description.rb#810
  def op_time; end

  # Returns whether the server is an other, per the SDAM spec.
  #
  # @example Is the description of type other.
  #   description.other?
  # @return [true, false] If the description is other.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#576
  def other?; end

  # Will return true if the server is passive.
  #
  # @example Is the server passive?
  #   description.passive?
  # @return [true, false] If the server is passive.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#595
  def passive?; end

  # Get a list of the passive servers in the cluster.
  #
  # @example Get the passives.
  #   description.passives
  # @return [Array<String>] The list of passives.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#607
  def passives; end

  # Returns whether this server is a primary, per the SDAM spec.
  #
  # @example Is the server a primary?
  #   description.primary?
  # @return [true, false] If the server is a primary.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#631
  def primary?; end

  # Get the address of the primary host.
  #
  # @example Get the address of the primary.
  #   description.primary_host
  # @return [String | nil] The address of the primary.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/server/description.rb#619
  def primary_host; end

  # Does this description correspond to a replica set member.
  #
  # @example Check if the description is from a replica set member.
  #   description.replica_set_member?
  # @return [true, false] If the description is from a replica set
  #   member.
  # @since 2.0.6
  #
  # source://mongo//lib/mongo/server/description.rb#778
  def replica_set_member?; end

  # Get the name of the replica set the server belongs to, returns nil if
  # none.
  #
  # @example Get the replica set name.
  #   description.replica_set_name
  # @return [String, nil] The name of the replica set.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#646
  def replica_set_name; end

  # Returns whether this server is a secondary, per the SDAM spec.
  #
  # @example Is the server a secondary?
  #   description.secondary?
  # @return [true, false] If the server is a secondary.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#670
  def secondary?; end

  # @api experimental
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#838
  def server_connection_id; end

  # Returns the server type as a symbol.
  #
  # @example Get the server type.
  #   description.server_type
  # @return [Symbol] The server type.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/server/description.rb#684
  def server_type; end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#870
  def server_version_gte?(version); end

  # Get a list of all servers known to the cluster.
  #
  # @example Get all servers.
  #   description.servers
  # @return [Array<String>] The list of all servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#658
  def servers; end

  # @api experimental
  # @return [nil | Object] The service id, if any.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#845
  def service_id; end

  # Get the setVersion from the config.
  #
  # @example Get the setVersion.
  #   description.set_version
  # @return [Integer] The set version.
  # @since 2.2.2
  #
  # source://mongo//lib/mongo/server/description.rb#487
  def set_version; end

  # Returns whether this server is a standalone, per the SDAM spec.
  #
  # @example Is the server standalone?
  #   description.standalone?
  # @return [true, false] If the server is standalone.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#704
  def standalone?; end

  # Get the tags configured for the server.
  #
  # @example Get the tags.
  #   description.tags
  # @return [Hash] The tags of the server.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#463
  def tags; end

  # @return [TopologyVersion | nil] The topology version.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#492
  def topology_version; end

  # Returns whether topology version in this description is potentially
  # newer than or equal to topology version in another description.
  #
  # @api private
  # @param other_desc [Server::Description] The other server description.
  # @return [true | false] Whether topology version in this description
  #   is potentially newer or equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#508
  def topology_version_gt?(other_desc); end

  # Returns whether topology version in this description is potentially
  # newer than topology version in another description.
  #
  # @api private
  # @param other_desc [Server::Description] The other server description.
  # @return [true | false] Whether topology version in this description
  #   is potentially newer.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#524
  def topology_version_gte?(other_desc); end

  # Returns whether this server is an unknown, per the SDAM spec.
  #
  # @example Is the server description unknown?
  #   description.unknown?
  # @return [true, false] If the server description is unknown.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#719
  def unknown?; end

  # Get the range of supported wire versions for the server.
  #
  # @example Get the wire version range.
  #   description.wire_versions
  # @return [Range] The wire version range.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description.rb#738
  def wire_versions; end
end

# Constant for reading arbiter info from config.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#38
Mongo::Server::Description::ARBITER = T.let(T.unsafe(nil), String)

# Constant for reading arbiters info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#43
Mongo::Server::Description::ARBITERS = T.let(T.unsafe(nil), String)

# Constant for reading connectionId info from config.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#189
Mongo::Server::Description::CONNECTION_ID = T.let(T.unsafe(nil), String)

# Default max write batch size.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#116
Mongo::Server::Description::DEFAULT_MAX_WRITE_BATCH_SIZE = T.let(T.unsafe(nil), Integer)

# Constant for reading electionId info from config.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/server/description.rb#164
Mongo::Server::Description::ELECTION_ID = T.let(T.unsafe(nil), String)

# Fields to exclude when comparing two descriptions.
#
# @since 2.0.6
#
# source://mongo//lib/mongo/server/description.rb#194
Mongo::Server::Description::EXCLUDE_FOR_COMPARISON = T.let(T.unsafe(nil), Array)

# Defines behavior around what features a specific server supports.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description/features.rb#25
class Mongo::Server::Description::Features
  # Initialize the features.
  #
  # @example Initialize the features.
  #   Features.new(0..3)
  # @param server_wire_versions [Range] The server supported wire
  #   versions.
  # @return [Features] a new instance of Features
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description/features.rb#117
  def initialize(server_wire_versions, address = T.unsafe(nil)); end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def array_filters_enabled?; end

  # Check that there is an overlap between the driver supported wire
  #   version range and the server wire version range.
  #
  # @example Verify the wire version overlap.
  #   features.check_driver_support!
  # @raise [Error::UnsupportedFeatures] If the wire version range is
  #   not covered by the driver.
  # @since 2.5.1
  #
  # source://mongo//lib/mongo/server/description/features.rb#142
  def check_driver_support!; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def collation_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def commit_quorum_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def find_and_modify_option_validation_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def find_command_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def get_more_comment_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def list_collections_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def list_indexes_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def max_staleness_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def merge_out_on_secondary_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def op_msg_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def retryable_write_error_label_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def scram_sha_1_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def scram_sha_256_enabled?; end

  # @return [Range] server_wire_versions The server's supported wire
  #   versions.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/description/features.rb#106
  def server_wire_versions; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def sessions_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def transactions_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def update_delete_option_validation_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def users_info_enabled?; end

  # source://mongo//lib/mongo/server/description/features.rb#99
  def write_command_enabled?; end
end

# Error message if the driver is too old for the version of the server.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server/description/features.rb#79
Mongo::Server::Description::Features::DRIVER_TOO_OLD = T.let(T.unsafe(nil), String)

# The wire protocol versions that this version of the driver supports.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description/features.rb#85
Mongo::Server::Description::Features::DRIVER_WIRE_VERSIONS = T.let(T.unsafe(nil), Range)

# List of features and the wire protocol version they appear in.
#
# Wire protocol versions map to server releases as follows:
# -  2 => 2.6
# -  3 => 3.0
# -  4 => 3.2
# -  5 => 3.4
# -  6 => 3.6
# -  7 => 4.0
# -  8 => 4.2
# -  9 => 4.4
# - 13 => 5.0
# - 14 => 5.1
# - 17 => 6.0
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description/features.rb#42
Mongo::Server::Description::Features::MAPPINGS = T.let(T.unsafe(nil), Hash)

# Error message if the server is too old for this version of the driver.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server/description/features.rb#73
Mongo::Server::Description::Features::SERVER_TOO_OLD = T.let(T.unsafe(nil), String)

# Constant for reading hidden info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#48
Mongo::Server::Description::HIDDEN = T.let(T.unsafe(nil), String)

# Constant for reading hosts info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#53
Mongo::Server::Description::HOSTS = T.let(T.unsafe(nil), String)

# Constant for the lastWrite subdocument.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/server/description.rb#101
Mongo::Server::Description::LAST_WRITE = T.let(T.unsafe(nil), String)

# Constant for the lastWriteDate field in the lastWrite subdocument.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/server/description.rb#106
Mongo::Server::Description::LAST_WRITE_DATE = T.let(T.unsafe(nil), String)

# The legacy wire protocol version.
#
# @deprecated Will be removed in 3.0.
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#122
Mongo::Server::Description::LEGACY_WIRE_VERSION = T.let(T.unsafe(nil), Integer)

# Constant for reading localTime info from config.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/server/description.rb#174
Mongo::Server::Description::LOCAL_TIME = T.let(T.unsafe(nil), String)

# Constant for reading logicalSessionTimeoutMinutes info from config.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server/description.rb#184
Mongo::Server::Description::LOGICAL_SESSION_TIMEOUT_MINUTES = T.let(T.unsafe(nil), String)

# Represents an assumed description of servers behind load balancers.
#
# source://mongo//lib/mongo/server/description/load_balancer.rb#23
class Mongo::Server::Description::LoadBalancer
  # @return [LoadBalancer] a new instance of LoadBalancer
  #
  # source://mongo//lib/mongo/server/description/load_balancer.rb#24
  def initialize(address); end

  # @return [Address] address The server's address.
  #
  # source://mongo//lib/mongo/server/description/load_balancer.rb#29
  def address; end
end

# Constant for reading max bson size info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#76
Mongo::Server::Description::MAX_BSON_OBJECT_SIZE = T.let(T.unsafe(nil), String)

# Constant for reading max message size info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#81
Mongo::Server::Description::MAX_MESSAGE_BYTES = T.let(T.unsafe(nil), String)

# Constant for the max wire version.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#86
Mongo::Server::Description::MAX_WIRE_VERSION = T.let(T.unsafe(nil), String)

# Constant for reading max write batch size.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#96
Mongo::Server::Description::MAX_WRITE_BATCH_SIZE = T.let(T.unsafe(nil), String)

# Constant for reading the me field.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/server/description.rb#111
Mongo::Server::Description::ME = T.let(T.unsafe(nil), String)

# Constant for the key for the message value.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#59
Mongo::Server::Description::MESSAGE = T.let(T.unsafe(nil), String)

# Constant for min wire version.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#91
Mongo::Server::Description::MIN_WIRE_VERSION = T.let(T.unsafe(nil), String)

# Constant for the message that indicates a sharded cluster.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#65
Mongo::Server::Description::MONGOS_MESSAGE = T.let(T.unsafe(nil), String)

# Constant for reading operationTime info from config.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server/description.rb#179
Mongo::Server::Description::OPERATION_TIME = T.let(T.unsafe(nil), String)

# Constant for reading passive info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#127
Mongo::Server::Description::PASSIVE = T.let(T.unsafe(nil), String)

# Constant for reading the passive server list.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#132
Mongo::Server::Description::PASSIVES = T.let(T.unsafe(nil), String)

# Constant for reading primary info from config.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#138
Mongo::Server::Description::PRIMARY = T.let(T.unsafe(nil), String)

# Constant for reading primary host field from config.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server/description.rb#143
Mongo::Server::Description::PRIMARY_HOST = T.let(T.unsafe(nil), String)

# Constant for determining ghost servers.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#71
Mongo::Server::Description::REPLICA_SET = T.let(T.unsafe(nil), String)

# Constant for reading secondary info from config.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#149
Mongo::Server::Description::SECONDARY = T.let(T.unsafe(nil), String)

# Constant for reading replica set name info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#154
Mongo::Server::Description::SET_NAME = T.let(T.unsafe(nil), String)

# Constant for reading setVersion info from config.
#
# @since 2.2.2
#
# source://mongo//lib/mongo/server/description.rb#169
Mongo::Server::Description::SET_VERSION = T.let(T.unsafe(nil), String)

# Constant for reading tags info from config.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server/description.rb#159
Mongo::Server::Description::TAGS = T.let(T.unsafe(nil), String)

# Responsible for periodically polling a server via hello commands to
# keep the server's status up to date.
#
# Does all work in a background thread so as to not interfere with other
# operations performed by the driver.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/server/monitor.rb#29
class Mongo::Server::Monitor
  include ::Mongo::Loggable
  include ::Mongo::Event::Publisher
  include ::Mongo::BackgroundThread
  extend ::Forwardable

  # Create the new server monitor.
  #
  # @api private
  # @example Create the server monitor.
  #   Mongo::Server::Monitor.new(address, listeners, monitoring)
  # @note Monitor must never be directly instantiated outside of a Server.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param server [Server] The server to monitor.
  # @param event_listeners [Event::Listeners] The event listeners.
  # @param monitoring [Monitoring] The monitoring..
  # @param options [Hash] The options.
  # @return [Monitor] a new instance of Monitor
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#78
  def initialize(server, event_listeners, monitoring, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def compressor(*args, **_arg1, &block); end

  # @api private
  # @return [Mongo::Server::Monitor::Connection] connection The connection to use.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#103
  def connection; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#173
  def create_push_monitor!(topology_version); end

  # Perform a check of the server.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#138
  def do_work; end

  # The interval between regular server checks.
  #
  # @api private
  # @return [Float] The heartbeat interval, in seconds.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#111
  def heartbeat_interval; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last_scan(*args, **_arg1, &block); end

  # @api private
  # @return [Monitoring] monitoring The monitoring.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#125
  def monitoring; end

  # @api private
  # @return [Hash] options The server options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#106
  def options; end

  # @api private
  # @return [Server::PushMonitor | nil] The push monitor, if one is being
  #   used.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#129
  def push_monitor; end

  # Restarts the server monitor unless the current thread is alive.
  #
  # @api private
  # @example Restart the monitor.
  #   monitor.restart!
  # @return [Thread] The thread the monitor runs on.
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#267
  def restart!; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#236
  def run_sdam_flow(result, awaited: T.unsafe(nil), scan_error: T.unsafe(nil)); end

  # Perform a check of the server with throttling, and update
  # the server's description and average round trip time.
  #
  # If the server was checked less than MIN_SCAN_INTERVAL seconds
  # ago, sleep until MIN_SCAN_INTERVAL seconds have passed since the last
  # check. Then perform the check which involves running hello
  # on the server being monitored and updating the server description
  # as a result.
  #
  # @api private
  # @note If the system clock moves backwards, this method can sleep
  #   for a very long time.
  # @note The return value of this method is deprecated. In version 3.0.0
  #   this method will not have a return value.
  # @return [Description] The updated description.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#219
  def scan!; end

  # @api private
  # @return [Server] server The server that this monitor is monitoring.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#100
  def server; end

  # Stop the background thread and wait for it to terminate for a
  # reasonable amount of time.
  #
  # @api public for backwards compatibility only
  # @return [true | false] Whether the thread was terminated.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#162
  def stop!; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#192
  def stop_push_monitor!; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#275
  def to_s; end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#301
  def check; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#285
  def do_scan; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#281
  def pre_stop; end

  # @api private
  # @note If the system clock is set to a time in the past, this method
  #   can sleep for a very long time.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor.rb#345
  def throttle_scan_frequency!; end
end

# App metadata for monitoring sockets.
#
# It is easiest to start with the normal app metadata and remove
# authentication-related bits.
#
# @api private
#
# source://mongo//lib/mongo/server/monitor/app_metadata.rb#27
class Mongo::Server::Monitor::AppMetadata < ::Mongo::Server::AppMetadata
  # @api private
  # @return [AppMetadata] a new instance of AppMetadata
  #
  # source://mongo//lib/mongo/server/monitor/app_metadata.rb#28
  def initialize(options = T.unsafe(nil)); end
end

# This class models the monitor connections and their behavior.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/server/monitor/connection.rb#26
class Mongo::Server::Monitor::Connection < ::Mongo::Server::ConnectionCommon
  include ::Mongo::Loggable

  # Creates a new connection object to the specified target address
  # with the specified options.
  #
  # The constructor does not perform any I/O (and thus does not create
  # sockets nor handshakes); call connect! method on the connection
  # object to create the network connection.
  #
  # @api private
  # @note Monitoring connections do not authenticate.
  # @option options
  # @option options
  # @option options
  # @param address [Mongo::Address] The address the connection is for.
  # @param options [Hash] The connection options.
  # @return [Connection] a new instance of Connection
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#58
  def initialize(address, options = T.unsafe(nil)); end

  # @api private
  # @return [Mongo::Address] address The address to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#74
  def address; end

  # Build a document that should be used for connection check.
  #
  # @api private
  # @return [BSON::Document] Document that should be sent to a server
  #   for connection check.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#229
  def check_document; end

  # Establishes a network connection to the target address.
  #
  # If the connection is already established, this method does nothing.
  #
  # @api private
  # @example Connect to the host.
  #   connection.connect!
  # @note This method mutates the connection class by setting a socket if
  #   one previously did not exist.
  # @return [true] If the connection succeeded.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#158
  def connect!; end

  # Disconnect the connection.
  #
  # @api private
  # @example Disconnect from the host.
  #   connection.disconnect!
  # @note This method mutates the connection by setting the socket to nil
  #   if the closing succeeded.
  # @note This method accepts an options argument for compatibility with
  #   Server::Connections. However, all options are ignored.
  # @return [true] If the disconnect succeeded.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#184
  def disconnect!(options = T.unsafe(nil)); end

  # Sends a message and returns the result.
  #
  # @api private
  # @param message [Protocol::Message] The message to send.
  # @return [Protocol::Message] The result.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#97
  def dispatch(message); end

  # Sends a preserialized message and returns the result.
  #
  # @api private
  # @option opts
  # @param bytes [String] The serialized message to send.
  # @param opts [Hash] a customizable set of options
  # @return [Protocol::Message] The result.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#109
  def dispatch_bytes(bytes, **opts); end

  # Send handshake command to connected host and validate the response.
  #
  # @api private
  # @raise [Mongo::Error] If handshake failed.
  # @return [BSON::Document] Handshake response from server
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#197
  def handshake!; end

  # @api private
  # @return [Hash] options The passed in options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#71
  def options; end

  # @api private
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#130
  def read_response(**opts); end

  # @api private
  # @return [Integer] server_connection_id The server connection id.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#90
  def server_connection_id; end

  # Returns the monitoring socket timeout.
  #
  # Note that monitoring connections use the connect timeout value as
  # the socket timeout value. See the Server Discovery and Monitoring
  # specification for details.
  #
  # @api private
  # @return [Float] The socket timeout in seconds.
  # @since 2.4.3
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#85
  def socket_timeout; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#116
  def write_bytes(bytes); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#250
  def add_server_connection_id; end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#269
  def hello_ok?; end

  # Update @hello_ok flag according to server reply to legacy hello
  # command. The flag will be set to true if connected server supports
  # hello command, otherwise the flag will be set to false.
  #
  # @api private
  # @param reply [BSON::Document] Server reply to legacy hello command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server/monitor/connection.rb#265
  def set_hello_ok!(reply); end
end

# The default interval between server status refreshes is 10 seconds.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/server/monitor.rb#38
Mongo::Server::Monitor::DEFAULT_HEARTBEAT_INTERVAL = T.let(T.unsafe(nil), Integer)

# The minimum time between forced server scans. Is
# minHeartbeatFrequencyMS in the SDAM spec.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/server/monitor.rb#44
Mongo::Server::Monitor::MIN_SCAN_INTERVAL = T.let(T.unsafe(nil), Float)

# The weighting factor (alpha) for calculating the average moving round trip time.
#
# @api private
# @deprecated Will be removed in version 3.0.
# @since 2.0.0
#
# source://mongo//lib/mongo/server/monitor.rb#50
Mongo::Server::Monitor::RTT_WEIGHT_FACTOR = T.let(T.unsafe(nil), Float)

# This class encapsulates connections during handshake and authentication.
#
# @api private
#
# source://mongo//lib/mongo/server/pending_connection.rb#24
class Mongo::Server::PendingConnection < ::Mongo::Server::ConnectionBase
  # @api private
  # @return [PendingConnection] a new instance of PendingConnection
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#27
  def initialize(socket, server, monitoring, options = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#40
  def handshake_and_authenticate!; end

  # @api private
  # @return [Integer] The ID for the connection. This is the same ID
  #   as that of the regular Connection object for which this
  #   PendingConnection instance was created.
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#38
  def id; end

  private

  # @api private
  # @param speculative_auth_client_nonce [String | nil] The client
  #   nonce used in speculative auth on this connection that
  #   produced the specified speculative auth result.
  # @param speculative_auth_mech [Symbol | nil] Auth mechanism used
  #   for speculative auth, if speculative auth succeeded. If speculative
  #   auth was not performed or it failed, this must be nil.
  # @param speculative_auth_result [BSON::Document | nil] The
  #   value of speculativeAuthenticate field of hello response of
  #   the handshake on this connection.
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#172
  def authenticate!(speculative_auth_client_nonce: T.unsafe(nil), speculative_auth_mech: T.unsafe(nil), speculative_auth_result: T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#271
  def default_mechanism; end

  # @api private
  # @yield [@socket]
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#200
  def ensure_connected; end

  # @api private
  # @param speculative_auth_doc [BSON::Document | nil] The document to
  #   provide in speculativeAuthenticate field of handshake command.
  # @return [BSON::Document] The document of the handshake response for
  #   this particular connection.
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#118
  def handshake!(speculative_auth_doc: T.unsafe(nil)); end

  # This is a separate method to keep the nesting level down.
  #
  # @api private
  # @return [Server::Description] The server description calculated from
  #   the handshake response for this particular connection.
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#208
  def post_handshake(response, average_rtt); end

  # The user as going to be used for authentication. This user has the
  # auth mechanism set and, if necessary, auth source.
  #
  # @api private
  # @param speculative_auth_mech [Symbol | nil] Auth mechanism used
  #   for speculative auth, if speculative auth succeeded. If speculative
  #   auth was not performed or it failed, this must be nil.
  # @return [Auth::User] The resolved user.
  #
  # source://mongo//lib/mongo/server/pending_connection.rb#242
  def resolved_user(speculative_auth_mech: T.unsafe(nil)); end
end

# A monitor utilizing server-pushed hello requests.
#
# When a Monitor handshakes with a 4.4+ server, it creates an instance
# of PushMonitor. PushMonitor subsequently executes server-pushed hello
# (i.e. awaited & exhausted hello) to receive topology changes from the
# server as quickly as possible. The Monitor still monitors the server
# for round-trip time calculations and to perform immediate checks as
# requested by the application.
#
# @api private
#
# source://mongo//lib/mongo/server/push_monitor.rb#31
class Mongo::Server::PushMonitor
  include ::Mongo::Loggable
  include ::Mongo::BackgroundThread
  extend ::Forwardable

  # @api private
  # @return [PushMonitor] a new instance of PushMonitor
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#35
  def initialize(monitor, topology_version, monitoring, **options); end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#137
  def check; end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#94
  def do_work; end

  # @api private
  # @return [Server] The server that is being monitored.
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#55
  def monitor; end

  # @api private
  # @return [Monitoring] monitoring The monitoring.
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#61
  def monitoring; end

  # @api private
  # @return [Hash] Push monitor options.
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#64
  def options; end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#184
  def read_response; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def server(*args, **_arg1, &block); end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#69
  def start!; end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#75
  def stop!; end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#199
  def to_s; end

  # @api private
  # @return [TopologyVersion] Most recently received topology version.
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#58
  def topology_version; end

  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor.rb#173
  def write_check_command; end
end

# @api private
#
# source://mongo//lib/mongo/server/push_monitor/connection.rb#23
class Mongo::Server::PushMonitor::Connection < ::Mongo::Server::Monitor::Connection
  # @api private
  #
  # source://mongo//lib/mongo/server/push_monitor/connection.rb#25
  def socket_timeout; end
end

# @api private
#
# source://mongo//lib/mongo/server/round_trip_time_averager.rb#21
class Mongo::Server::RoundTripTimeAverager
  # @api private
  # @return [RoundTripTimeAverager] a new instance of RoundTripTimeAverager
  #
  # source://mongo//lib/mongo/server/round_trip_time_averager.rb#28
  def initialize; end

  # @api private
  #
  # source://mongo//lib/mongo/server/round_trip_time_averager.rb#34
  def average_round_trip_time; end

  # @api private
  #
  # source://mongo//lib/mongo/server/round_trip_time_averager.rb#33
  def last_round_trip_time; end

  # @api private
  #
  # source://mongo//lib/mongo/server/round_trip_time_averager.rb#36
  def measure; end

  private

  # This method is separate for testing purposes.
  #
  # @api private
  #
  # source://mongo//lib/mongo/server/round_trip_time_averager.rb#67
  def update_average_round_trip_time; end
end

# The weighting factor (alpha) for calculating the average moving
# round trip time.
#
# @api private
#
# source://mongo//lib/mongo/server/round_trip_time_averager.rb#25
Mongo::Server::RoundTripTimeAverager::RTT_WEIGHT_FACTOR = T.let(T.unsafe(nil), Float)

# Functionality for getting an object able to select a server, given a preference.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/base.rb#20
module Mongo::ServerSelector
  extend ::Mongo::ServerSelector

  # Create a server selector object.
  #
  # @example Get a server selector object for selecting a secondary with
  #   specific tag sets.
  #   Mongo::ServerSelector.get(:mode => :secondary, :tag_sets => [{'dc' => 'nyc'}])
  # @param preference [Hash] The server preference.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector.rb#75
  def get(preference = T.unsafe(nil)); end

  # Returns the primary server selector.
  #
  # A call to this method is equivalent to `get(mode: :primary)`, except the
  # resulting server selector object is cached and not recreated each time.
  #
  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector.rb#87
  def primary; end
end

# source://mongo//lib/mongo/server_selector/base.rb#22
class Mongo::ServerSelector::Base
  # Initialize the server selector.
  #
  # @api private
  # @example Initialize the selector.
  #   Mongo::ServerSelector::Secondary.new(:tag_sets => [{'dc' => 'nyc'}])
  # @example Initialize the preference with no options.
  #   Mongo::ServerSelector::Secondary.new
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The server preference options.
  # @raise [Error::InvalidServerPreference] If tag sets are specified
  #   but not allowed.
  # @return [Base] a new instance of Base
  #
  # source://mongo//lib/mongo/server_selector/base.rb#49
  def initialize(options = T.unsafe(nil)); end

  # Check equality of two server selectors.
  #
  # @example Check server selector equality.
  #   preference == other
  # @param other [Object] The other preference.
  # @return [true, false] Whether the objects are equal.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#136
  def ==(other); end

  # Returns servers of acceptable types from the cluster.
  #
  # Does not perform staleness validation, staleness filtering or
  # latency filtering.
  #
  # @api private
  # @param cluster [Cluster] The cluster.
  # @return [Array<Server>] The candidate servers.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#379
  def candidates(cluster); end

  # @return [Hash | nil] hedge The document specifying whether to enable
  #   hedged reads.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#76
  def hedge; end

  # Inspect the server selector.
  #
  # @example Inspect the server selector.
  #   selector.inspect
  # @return [String] The inspection.
  # @since 2.2.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#122
  def inspect; end

  # Get the local threshold boundary for nearest selection in seconds.
  #
  # @deprecated This setting is now taken from the cluster options when
  #   a server is selected. Will be removed in version 3.0.
  # @example Get the local threshold.
  #   selector.local_threshold
  # @return [Float] The local threshold.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#105
  def local_threshold; end

  # @api private
  #
  # source://mongo//lib/mongo/server_selector/base.rb#110
  def local_threshold_with_cluster(cluster); end

  # @return [Integer] max_staleness The maximum replication lag, in
  #   seconds, that a secondary can suffer and still be eligible for a read.
  # @since 2.4.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#72
  def max_staleness; end

  # @return [Hash] options The options.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#63
  def options; end

  # Select a server from the specified cluster, taking into account
  # mongos pinning for the specified session.
  #
  # If the session is given and has a pinned server, this server is the
  # only server considered for selection. If the server is of type mongos,
  # it is returned immediately; otherwise monitoring checks on this
  # server are initiated to update its status, and if the server becomes
  # a mongos within the server selection timeout, it is returned.
  #
  # If no session is given or the session does not have a pinned server,
  # normal server selection process is performed among all servers in the
  # specified cluster matching the preference of this server selector
  # object. Monitoring checks are initiated on servers in the cluster until
  # a suitable server is found, up to the server selection timeout.
  #
  # If a suitable server is not found within the server selection timeout,
  # this method raises Error::NoServerAvailable.
  #
  # @param cluster [Mongo::Cluster] The cluster from which to select
  #   an eligible server.
  # @param ping [true, false] Whether to ping the server before selection.
  #   Deprecated and ignored.
  # @param session [Session | nil] Optional session to take into account
  #   for mongos pinning. Added in version 2.10.0.
  # @param write_aggregation [true | false] Whether we need a server that
  #   supports writing aggregations (e.g. with $merge/$out) on secondaries.
  # @raise [Error::NoServerAvailable] No server was found matching the
  #   specified preference / pinning requirement in the server selection
  #   timeout.
  # @raise [Error::LintError] An unexpected condition was detected, and
  #   lint mode is enabled.
  # @return [Mongo::Server] A server matching the server preference.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#177
  def select_server(cluster, ping = T.unsafe(nil), session = T.unsafe(nil), write_aggregation: T.unsafe(nil)); end

  # Get the timeout for server selection.
  #
  # @deprecated This setting is now taken from the cluster options when
  #   a server is selected. Will be removed in version 3.0.
  # @example Get the server selection timeout, in seconds.
  #   selector.server_selection_timeout
  # @return [Float] The timeout.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#89
  def server_selection_timeout; end

  # Returns servers satisfying the server selector from the cluster.
  #
  # @api private
  # @param cluster [Cluster] The cluster.
  # @return [Array<Server>] The suitable servers.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#403
  def suitable_servers(cluster); end

  # @return [Array] tag_sets The tag sets used to select servers.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#66
  def tag_sets; end

  # Tries to find a suitable server, returns the server if one is available
  # or nil if there isn't a suitable server.
  #
  # @api private
  # @param cluster [Mongo::Cluster] The cluster from which to select
  #   an eligible server.
  # @param write_aggregation [true | false] Whether we need a server that
  #   supports writing aggregations (e.g. with $merge/$out) on secondaries.
  # @return [Server | nil] A suitable server, if one exists.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#328
  def try_select_server(cluster, write_aggregation: T.unsafe(nil)); end

  private

  # source://mongo//lib/mongo/server_selector/base.rb#530
  def filter_stale_servers(candidates, primary = T.unsafe(nil)); end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#427
  def full_doc; end

  # Select the servers matching the defined tag sets.
  #
  # @param candidates [Array] List of candidate servers from which those
  #   matching the defined tag sets should be selected.
  # @return [Array] The servers matching the defined tag sets.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#521
  def match_tag_sets(candidates); end

  # Select the near servers from a list of provided candidates, taking the
  #   local threshold into account.
  #
  # @param candidates [Array] List of candidate servers to select the
  #   near servers from.
  # @param local_threshold [Integer] Local threshold. This parameter
  #   will be required in driver version 3.0.
  # @return [Array] The near servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#481
  def near_servers(candidates = T.unsafe(nil), local_threshold = T.unsafe(nil)); end

  # Select the primary from a list of provided candidates.
  #
  # @param candidates [Array] List of candidate servers to select the
  #   primary from.
  # @return [Array] The primary.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#445
  def primary(candidates); end

  # Select the secondaries from a list of provided candidates.
  #
  # @param candidates [Array] List of candidate servers to select the
  #   secondaries from.
  # @return [Array] The secondary servers.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/base.rb#459
  def secondaries(candidates); end

  # Parameters and return values are the same as for select_server.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#186
  def select_server_impl(cluster, ping, session, write_aggregation); end

  # Creates a diagnostic message when server selection fails.
  #
  # The diagnostic message includes the following information, as applicable:
  #
  # - Servers having dead monitor threads
  # - Cluster is disconnected
  #
  # If none of the conditions for diagnostic messages apply, an empty string
  # is returned.
  #
  # @param cluster [Cluster] The cluster on which server selection was
  #   performed.
  # @return [String] The diagnostic message.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#653
  def server_selection_diagnostic_message(cluster); end

  # source://mongo//lib/mongo/server_selector/base.rb#555
  def validate!; end

  # source://mongo//lib/mongo/server_selector/base.rb#577
  def validate_max_staleness_support!(server); end

  # source://mongo//lib/mongo/server_selector/base.rb#593
  def validate_max_staleness_value!(cluster); end

  # source://mongo//lib/mongo/server_selector/base.rb#583
  def validate_max_staleness_value_early!; end

  # Waits for server state changes in the specified cluster.
  #
  # If the cluster has a server selection semaphore, waits on that
  # semaphore up to the specified remaining time. Any change in server
  # state resulting from SDAM will immediately wake up this method and
  # cause it to return.
  #
  # If the cluster des not have a server selection semaphore, waits
  # the smaller of 0.25 seconds and the specified remaining time.
  # This functionality is provided for backwards compatibilty only for
  # applications directly invoking the server selection process.
  # If lint mode is enabled and the cluster does not have a server
  # selection semaphore, Error::LintError will be raised.
  #
  # @param cluster [Cluster] The cluster to wait for.
  # @param time_remaining [Numeric] Maximum time to wait, in seconds.
  #
  # source://mongo//lib/mongo/server_selector/base.rb#624
  def wait_for_server_selection(cluster, time_remaining); end
end

# The max latency in seconds between the closest server and other servers
# considered for selection.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector.rb#37
Mongo::ServerSelector::LOCAL_THRESHOLD = T.let(T.unsafe(nil), Float)

# Encapsulates specifications for selecting near servers given a list
#   of candidates.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/nearest.rb#25
class Mongo::ServerSelector::Nearest < ::Mongo::ServerSelector::Base
  # Whether the hedge option is allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#65
  def hedge_allowed?; end

  # Get the name of the server mode type.
  #
  # @example Get the name of the server mode for this preference.
  #   preference.name
  # @return [Symbol] :nearest
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#40
  def name; end

  # Whether the secondaryOk bit should be set on wire protocol messages.
  #   I.e. whether the operation can be performed on a secondary server.
  #
  # @api private
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#49
  def secondary_ok?; end

  # Whether tag sets are allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#58
  def tags_allowed?; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#75
  def to_doc; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  # Convert this server preference definition into a value appropriate
  #   for sending to a mongos.
  #
  # This method may return nil if the read preference should not be sent
  # to a mongos.
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @return [Hash | nil] The server preference converted to a mongos
  #   command field value.
  # @since 2.0.0
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#75
  def to_mongos; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#105
  def max_staleness_allowed?; end

  # Select the near servers taking into account any defined tag sets and
  #   local threshold between the nearest server and other servers.
  #
  # @return [Array] The nearest servers from the list of candidates.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/nearest.rb#99
  def select_in_replica_set(candidates); end
end

# Name of the this read preference in the server's format.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server_selector/nearest.rb#30
Mongo::ServerSelector::Nearest::SERVER_FORMATTED_NAME = T.let(T.unsafe(nil), String)

# Hash lookup for the selector classes based off the symbols
#   provided in configuration.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector.rb#58
Mongo::ServerSelector::PREFERENCES = T.let(T.unsafe(nil), Hash)

# Primary read preference.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/server_selector.rb#52
Mongo::ServerSelector::PRIMARY = T.let(T.unsafe(nil), Mongo::Options::Redacted)

# Encapsulates specifications for selecting the primary server given a list
#   of candidates.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/primary.rb#26
class Mongo::ServerSelector::Primary < ::Mongo::ServerSelector::Base
  # Whether the hedge option is allowed to be defined for this server preference.
  #
  # @return [false] false
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#66
  def hedge_allowed?; end

  # Get the name of the server mode type.
  #
  # @example Get the name of the server mode for this preference.
  #   preference.name
  # @return [Symbol] :primary
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#41
  def name; end

  # Whether the secondaryOk bit should be set on wire protocol messages.
  #   I.e. whether the operation can be performed on a secondary server.
  #
  # @api private
  # @return [false] false
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#50
  def secondary_ok?; end

  # Whether tag sets are allowed to be defined for this server preference.
  #
  # @return [false] false
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#59
  def tags_allowed?; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#76
  def to_doc; end

  # Convert this server preference definition into a value appropriate
  #   for sending to a mongos.
  #
  # This method may return nil if the read preference should not be sent
  # to a mongos.
  #
  # @return [Hash | nil] The server preference converted to a mongos
  #   command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#90
  def to_mongos; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#105
  def max_staleness_allowed?; end

  # Select the primary server from a list of candidates.
  #
  # @return [Array] The primary server from the list of candidates.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary.rb#101
  def select_in_replica_set(candidates); end
end

# Name of the this read preference in the server's format.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server_selector/primary.rb#31
Mongo::ServerSelector::Primary::SERVER_FORMATTED_NAME = T.let(T.unsafe(nil), String)

# Encapsulates specifications for selecting servers, with the
#   primary preferred, given a list of candidates.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/primary_preferred.rb#26
class Mongo::ServerSelector::PrimaryPreferred < ::Mongo::ServerSelector::Base
  # Whether the hedge option is allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#66
  def hedge_allowed?; end

  # Get the name of the server mode type.
  #
  # @example Get the name of the server mode for this preference.
  #   preference.name
  # @return [Symbol] :primary_preferred
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#41
  def name; end

  # Whether the secondaryOk bit should be set on wire protocol messages.
  #   I.e. whether the operation can be performed on a secondary server.
  #
  # @api private
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#50
  def secondary_ok?; end

  # Whether tag sets are allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#59
  def tags_allowed?; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#76
  def to_doc; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  # Convert this server preference definition into a value appropriate
  #   for sending to a mongos.
  #
  # This method may return nil if the read preference should not be sent
  # to a mongos.
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @return [Hash | nil] The server preference converted to a mongos
  #   command field value.
  # @since 2.0.0
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#76
  def to_mongos; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#110
  def max_staleness_allowed?; end

  # Select servers taking into account any defined tag sets and
  #   local threshold, with the primary preferred.
  #
  # @return [Array] A list of servers matching tag sets and acceptable
  #   latency with the primary preferred.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/primary_preferred.rb#101
  def select_in_replica_set(candidates); end
end

# Name of the this read preference in the server's format.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server_selector/primary_preferred.rb#31
Mongo::ServerSelector::PrimaryPreferred::SERVER_FORMATTED_NAME = T.let(T.unsafe(nil), String)

# How long to block for server selection before throwing an exception.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector.rb#42
Mongo::ServerSelector::SERVER_SELECTION_TIMEOUT = T.let(T.unsafe(nil), Integer)

# The smallest allowed max staleness value, in seconds.
#
# @since 2.4.0
#
# source://mongo//lib/mongo/server_selector.rb#47
Mongo::ServerSelector::SMALLEST_MAX_STALENESS_SECONDS = T.let(T.unsafe(nil), Integer)

# Encapsulates specifications for selecting secondary servers given a list
#   of candidates.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/secondary.rb#26
class Mongo::ServerSelector::Secondary < ::Mongo::ServerSelector::Base
  # Whether the hedge option is allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#66
  def hedge_allowed?; end

  # Get the name of the server mode type.
  #
  # @example Get the name of the server mode for this preference.
  #   preference.name
  # @return [Symbol] :secondary
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#41
  def name; end

  # Whether the secondaryOk bit should be set on wire protocol messages.
  #   I.e. whether the operation can be performed on a secondary server.
  #
  # @api private
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#50
  def secondary_ok?; end

  # Whether tag sets are allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#59
  def tags_allowed?; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#76
  def to_doc; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  # Convert this server preference definition into a value appropriate
  #   for sending to a mongos.
  #
  # This method may return nil if the read preference should not be sent
  # to a mongos.
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @return [Hash | nil] The server preference converted to a mongos
  #   command field value.
  # @since 2.0.0
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#76
  def to_mongos; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#104
  def max_staleness_allowed?; end

  # Select the secondary servers taking into account any defined tag sets and
  #   local threshold between the nearest secondary and other secondaries.
  #
  # @return [Array] The secondary servers from the list of candidates.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary.rb#100
  def select_in_replica_set(candidates); end
end

# Name of the this read preference in the server's format.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server_selector/secondary.rb#31
Mongo::ServerSelector::Secondary::SERVER_FORMATTED_NAME = T.let(T.unsafe(nil), String)

# Encapsulates specifications for selecting servers, with
#   secondaries preferred, given a list of candidates.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/server_selector/secondary_preferred.rb#26
class Mongo::ServerSelector::SecondaryPreferred < ::Mongo::ServerSelector::Base
  # Whether the hedge option is allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#66
  def hedge_allowed?; end

  # Get the name of the server mode type.
  #
  # @example Get the name of the server mode for this preference.
  #   preference.name
  # @return [Symbol] :secondary_preferred
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#41
  def name; end

  # Whether the secondaryOk bit should be set on wire protocol messages.
  #   I.e. whether the operation can be performed on a secondary server.
  #
  # @api private
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#50
  def secondary_ok?; end

  # Whether tag sets are allowed to be defined for this server preference.
  #
  # @return [true] true
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#59
  def tags_allowed?; end

  # Convert this server preference definition into a format appropriate
  #   for sending to a MongoDB server (i.e., as a command field).
  #
  # @return [Hash] The server preference formatted as a command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#76
  def to_doc; end

  # Convert this server preference definition into a value appropriate
  #   for sending to a mongos.
  #
  # This method may return nil if the read preference should not be sent
  # to a mongos.
  #
  # @return [Hash | nil] The server preference converted to a mongos
  #   command field value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#90
  def to_mongos; end

  private

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#108
  def max_staleness_allowed?; end

  # Select servers taking into account any defined tag sets and
  #   local threshold, with secondaries.
  #
  # @return [Array] A list of servers matching tag sets and acceptable
  #   latency with secondaries preferred.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/server_selector/secondary_preferred.rb#104
  def select_in_replica_set(candidates); end
end

# Name of the this read preference in the server's format.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/server_selector/secondary_preferred.rb#31
Mongo::ServerSelector::SecondaryPreferred::SERVER_FORMATTED_NAME = T.let(T.unsafe(nil), String)

# A logical session representing a set of sequential operations executed
# by an application that are related in some way.
#
# @note Session objects are not thread-safe. An application may use a session
#   from only one thread or process at a time.
# @since 2.5.0
#
# source://mongo//lib/mongo/session/session_pool.rb#20
class Mongo::Session
  include ::Mongo::Retryable
  include ::Mongo::Loggable
  include ::Mongo::ClusterTime::Consumer
  extend ::Forwardable

  # Initialize a Session.
  #
  # A session can be explicit or implicit. Lifetime of explicit sessions is
  # managed by the application - applications explicitry create such sessions
  # and explicitly end them. Implicit sessions are created automatically by
  # the driver when sending operations to servers that support sessions
  # (3.6+), and their lifetime is managed by the driver.
  #
  # When an implicit session is created, it cannot have a server session
  # associated with it. The server session will be checked out of the
  # session pool when an operation using this session is actually executed.
  # When an explicit session is created, it must reference a server session
  # that is already allocated.
  #
  # @api private
  # @note Applications should use Client#start_session to begin a session.
  #   This constructor is for internal driver use only.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param server_session [ServerSession | nil] The server session this session is associated with.
  #   If the :implicit option is true, this must be nil.
  # @param client [Client] The client through which this session is created.
  # @param options [Hash] The options for this session.
  # @return [Session] a new instance of Session
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#77
  def initialize(server_session, client, options = T.unsafe(nil)); end

  # Abort the currently active transaction without making any changes to the database.
  #
  # @example Abort the transaction.
  #   session.abort_transaction
  # @raise [Error::InvalidTransactionOperation] If there is no active transaction.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#672
  def abort_transaction; end

  # @api private
  # @return [true | false] Whether the session is currently aborting a
  #   transaction.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#755
  def aborting_transaction?; end

  # Add the autocommit field to a command document if applicable.
  #
  # @api private
  # @example
  #   session.add_autocommit!(cmd)
  # @return [Hash, BSON::Document] The command document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#835
  def add_autocommit!(command); end

  # Add the startTransaction field to a command document if applicable.
  #
  # @api private
  # @example
  #   session.add_start_transaction!(cmd)
  # @return [Hash, BSON::Document] The command document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#850
  def add_start_transaction!(command); end

  # Add the transaction number to a command document if applicable.
  #
  # @api private
  # @example
  #   session.add_txn_num!(cmd)
  # @return [Hash, BSON::Document] The command document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#867
  def add_txn_num!(command); end

  # Add the transactions options if applicable.
  #
  # @api private
  # @example
  #   session.add_txn_opts!(cmd)
  # @return [Hash, BSON::Document] The command document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#882
  def add_txn_opts!(command, read); end

  # Advance the cached operation time for this session.
  #
  # @example Advance the operation time.
  #   session.advance_operation_time(timestamp)
  # @param new_operation_time [BSON::Timestamp] The new operation time.
  # @return [BSON::Timestamp] The max operation time, considering the current and new times.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1051
  def advance_operation_time(new_operation_time); end

  # @return [Client] The client through which this session was created.
  # @since 2.5.1
  #
  # source://mongo//lib/mongo/session.rb#109
  def client; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#111
  def cluster; end

  # Commit the currently active transaction on the session.
  #
  # @example Commits the transaction.
  #   session.commit_transaction
  # @option options
  # @param options [Hash] a customizable set of options
  # @raise [Error::InvalidTransactionOperation] If there is no active transaction.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#599
  def commit_transaction(options = T.unsafe(nil)); end

  # @api private
  # @return [true | false] Whether the session is currently committing a
  #   transaction.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#747
  def committing_transaction?; end

  # End this session.
  #
  # If there is an in-progress transaction on this session, the transaction
  # is aborted. The server session associated with this session is returned
  # to the server session pool. Finally, this session is marked ended and
  # is no longer usable.
  #
  # If this session is already ended, this method does nothing.
  #
  # Note that this method does not directly issue an endSessions command
  # to this server, contrary to what its name might suggest.
  #
  # @example
  #   session.end_session
  # @return [nil] Always nil.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#353
  def end_session; end

  # Whether this session has ended.
  #
  # @example
  #   session.ended?
  # @return [true, false] Whether the session has ended.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#219
  def ended?; end

  # Is this session an explicit one (i.e. user-created).
  #
  # @example Is the session explicit?
  #   session.explicit?
  # @return [true, false] Whether this session is explicit.
  # @since 2.5.2
  #
  # source://mongo//lib/mongo/session.rb#154
  def explicit?; end

  # Is this session an implicit one (not user-created).
  #
  # @example Is the session implicit?
  #   session.implicit?
  # @return [true, false] Whether this session is implicit.
  # @since 2.5.1
  #
  # source://mongo//lib/mongo/session.rb#142
  def implicit?; end

  # Whether or not the session is currently in a transaction.
  #
  # @example Is the session in a transaction?
  #   session.in_transaction?
  # @return [true | false] Whether or not the session in a transaction.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#739
  def in_transaction?; end

  # Get a formatted string for use in inspection.
  #
  # @example Inspect the session object.
  #   session.inspect
  # @return [String] The session inspection.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#331
  def inspect; end

  # If not already set, populate a session objects's server_session by
  # checking out a session from the session pool.
  #
  # @api private
  # @return [Session] Self.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1065
  def materialize_if_needed; end

  # @api private
  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1078
  def materialized?; end

  # Increment and return the next transaction number.
  #
  # @api private
  # @example Get the next transaction number.
  #   session.next_txn_num
  # @return [Integer] The next transaction number.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1095
  def next_txn_num; end

  # @return [BSON::Timestamp] The latest seen operation time for this session.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#124
  def operation_time; end

  # @return [Hash] The options for this session.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#104
  def options; end

  # Pins this session to the specified connection.
  #
  # this session to.
  #
  # @api private
  # @param connection_global_id [Integer] The global id of connection to pin
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#782
  def pin_to_connection(connection_global_id); end

  # Pins this session to the specified server, which should be a mongos.
  #
  # @api private
  # @param server [Server] The server to pin this session to.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#764
  def pin_to_server(server); end

  # @api private
  # @return [Integer | nil] The connection global id that this session is pinned to,
  #   if any.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#260
  def pinned_connection_global_id; end

  # @api private
  # @return [Server | nil] The server (which should be a mongos) that this
  #   session is pinned to, if any.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#254
  def pinned_server; end

  # Process a response from the server that used this session.
  #
  # @api private
  # @example Process a response from the server.
  #   session.process(result)
  # @param result [Operation::Result] The result from the operation.
  # @return [Operation::Result] The result.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1023
  def process(result); end

  # @api private
  # @return [BSON::Document | nil] Recovery token for the sharded
  #   transaction being executed on this session, if any.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#266
  def recovery_token; end

  # @api private
  # @return [BSON::Document | nil] Recovery token for the sharded
  #   transaction being executed on this session, if any.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#266
  def recovery_token=(_arg0); end

  # Whether reads executed with this session can be retried according to
  # the modern retryable reads specification.
  #
  # If this method returns true, the modern retryable reads have been
  # requested by the application. If the server selected for a read operation
  # supports modern retryable reads, they will be used for that particular
  # operation. If the server selected for a read operation does not support
  # modern retryable reads, the read will not be retried.
  #
  # If this method returns false, legacy retryable reads have been requested
  # by the application. Legacy retryable read logic will be used regardless
  # of server version of the server(s) that the client is connected to.
  # The number of read retries is given by :max_read_retries client option,
  # which is 1 by default and can be set to 0 to disable legacy read retries.
  #
  # @api private
  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#174
  def retry_reads?; end

  # Will writes executed with this session be retried.
  #
  # @example Will writes be retried.
  #   session.retry_writes?
  # @note Retryable writes are only available on server versions at least 3.6
  #   and with sharded clusters, replica sets, or load-balanced topologies.
  # @return [true, false] If writes will be retried.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#189
  def retry_writes?; end

  # Get the server session id of this session, if the session has not been
  # ended. If the session had been ended, raises Error::SessionEnded.
  #
  # @raise [Error::SessionEnded] If the session had been ended.
  # @return [BSON::Document] The server session id.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#231
  def session_id; end

  # @return [true | false] Whether the session is configured for snapshot
  #   reads.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#117
  def snapshot?; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1120
  def snapshot_timestamp; end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1120
  def snapshot_timestamp=(_arg0); end

  # Places subsequent operations in this session into a new transaction.
  #
  # Note that the transaction will not be started on the server until an
  # operation is performed after start_transaction is called.
  #
  # @example Start a new transaction
  #   session.start_transaction(options)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options for the transaction being started.
  # @raise [Error::InvalidTransactionOperation] If a transaction is already in
  #   progress or if the write concern is unacknowledged.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#540
  def start_transaction(options = T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#727
  def starting_transaction?; end

  # Remove the read concern and/or write concern from the command if not applicable.
  #
  # @api private
  # @example
  #   session.suppress_read_write_concern!(cmd)
  # @return [Hash, BSON::Document] The command document.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#948
  def suppress_read_write_concern!(command); end

  # Get the current transaction number.
  #
  # @example Get the current transaction number.
  #   session.txn_num
  # @return [Integer] The current transaction number.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#1111
  def txn_num; end

  # on this session.
  #
  # @return [Hash] The options for the transaction currently being executed
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#130
  def txn_options; end

  # Get the read preference the session will use in the currently
  # active transaction.
  #
  # This is a driver style hash with underscore keys.
  #
  # @example Get the transaction's read preference
  #   session.txn_read_preference
  # @return [Hash] The read preference of the transaction.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#204
  def txn_read_preference; end

  # Unpins this session from the pinned server or connection,
  # if the session was pinned.
  #
  # @api private
  # @param connection [Connection | nil] Connection to unpin from.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#795
  def unpin(connection = T.unsafe(nil)); end

  # Unpins this session from the pinned server or connection, if the session was pinned
  # and the specified exception instance and the session's transaction state
  # require it to be unpinned.
  #
  # The exception instance should already have all of the labels set on it
  # (both client- and server-side generated ones).
  #
  # @api private
  # @param error [Error] The exception instance to process.
  # @param connection [Connection | nil] Connection to unpin from.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#812
  def unpin_maybe(error, connection = T.unsafe(nil)); end

  # Update the state of the session due to a (non-commit and non-abort) operation being run.
  #
  # @api private
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#984
  def update_state!; end

  # Validate the session for use by the specified client.
  #
  # The session must not be ended and must have been created by a client
  # with the same cluster as the client that the session is to be used with.
  #
  # @api private
  # @param client [Client] The client the session is to be used with.
  # @raise [Mongo::Error::InvalidSession] Exception raised if the session is not valid.
  # @return [Session] self, if the session is valid.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1006
  def validate!(client); end

  # Ensure that the read preference of a command primary.
  #
  # @api private
  # @example
  #   session.validate_read_preference!(command)
  # @raise [Mongo::Error::InvalidTransactionOperation] If the read preference of the command is
  #   not primary.
  # @since 2.6.0
  #
  # source://mongo//lib/mongo/session.rb#967
  def validate_read_preference!(command); end

  # Executes the provided block in a transaction, retrying as necessary.
  #
  # Returns the return value of the block.
  #
  # Exact number of retries and when they are performed are implementation
  # details of the driver; the provided block should be idempotent, and
  # should be prepared to be called more than once. The driver may retry
  # the commit command within an active transaction or it may repeat the
  # transaction and invoke the block again, depending on the error
  # encountered if any. Note also that the retries may be executed against
  # different servers.
  #
  # Transactions cannot be nested - InvalidTransactionOperation will be raised
  # if this method is called when the session already has an active transaction.
  #
  # Exceptions raised by the block which are not derived from Mongo::Error
  # stop processing, abort the transaction and are propagated out of
  # with_transaction. Exceptions derived from Mongo::Error may be
  # handled by with_transaction, resulting in retries of the process.
  #
  # Currently, with_transaction will retry commits and block invocations
  # until at least 120 seconds have passed since with_transaction started
  # executing. This timeout is not configurable and may change in a future
  # driver version.
  #
  # @example Execute a statement in a transaction
  #   session.with_transaction(write_concern: {w: :majority}) do
  #   collection.update_one({ id: 3 }, { '$set' => { status: 'Inactive'} },
  #   session: session)
  #
  #   end
  # @example Execute a statement in a transaction, limiting total time consumed
  #   Timeout.timeout(5) do
  #   session.with_transaction(write_concern: {w: :majority}) do
  #   collection.update_one({ id: 3 }, { '$set' => { status: 'Inactive'} },
  #   session: session)
  #
  #   end
  #   end
  # @note with_transaction contains a loop, therefore the if with_transaction
  #   itself is placed in a loop, its block should not call next or break to
  #   control the outer loop because this will instead affect the loop in
  #   with_transaction. The driver will warn and abort the transaction
  #   if it detects this situation.
  # @param options [Hash] The options for the transaction being started.
  #   These are the same options that start_transaction accepts.
  # @raise [Error::InvalidTransactionOperation] If a transaction is already in
  #   progress or if the write concern is unacknowledged.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/session.rb#424
  def with_transaction(options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1165
  def causal_consistency?; end

  # Returns causal consistency document if the last operation time is
  # known and causal consistency is enabled, otherwise returns nil.
  #
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1157
  def causal_consistency_doc; end

  # @raise [Mongo::Error::InvalidSession]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1179
  def check_if_ended!; end

  # @raise [Mongo::Error::InvalidTransactionOperation]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1143
  def check_if_no_transaction!; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1183
  def check_matching_cluster!(client); end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1173
  def set_operation_time(result); end

  # Get the read concern the session will use when starting a transaction.
  #
  # This is a driver style hash with underscore keys.
  #
  # @example Get the session's transaction read concern.
  #   session.txn_read_concern
  # @return [Hash] The read concern used for starting transactions.
  # @since 2.9.0
  #
  # source://mongo//lib/mongo/session.rb#1134
  def txn_read_concern; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1150
  def txn_write_concern; end

  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session.rb#1139
  def within_states?(*states); end
end

# Error message indicating that the session was retrieved from a client with a different cluster than that of the
# client through which it is currently being used.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/session.rb#272
Mongo::Session::MISMATCHED_CLUSTER_ERROR_MSG = T.let(T.unsafe(nil), String)

# The state of a session in which the last operation was not related to
# any transaction or no operations have yet occurred.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/session.rb#292
Mongo::Session::NO_TRANSACTION_STATE = T.let(T.unsafe(nil), Symbol)

# Error message describing that sessions are not supported by the server version.
#
# @deprecated
# @since 2.5.0
#
# source://mongo//lib/mongo/session.rb#285
Mongo::Session::SESSIONS_NOT_SUPPORTED = T.let(T.unsafe(nil), String)

# Error message describing that the session cannot be used because it has already been ended.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/session.rb#279
Mongo::Session::SESSION_ENDED_ERROR_MSG = T.let(T.unsafe(nil), String)

# The state of a session in which a user has initiated a transaction but
# no operations within the transactions have occurred yet.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/session.rb#298
Mongo::Session::STARTING_TRANSACTION_STATE = T.let(T.unsafe(nil), Symbol)

# An object representing the server-side session.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/session/server_session.rb#27
class Mongo::Session::ServerSession
  # Initialize a ServerSession.
  #
  # @api private
  # @example
  #   ServerSession.new
  # @return [ServerSession] a new instance of ServerSession
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#69
  def initialize; end

  # Get a formatted string for use in inspection.
  #
  # @api private
  # @example Inspect the session object.
  #   session.inspect
  # @return [String] The session inspection.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#117
  def inspect; end

  # The last time the server session was used.
  #
  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#42
  def last_use; end

  # Increment the current transaction number and return the new value.
  #
  # @api private
  # @return [Integer] The updated transaction number.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#105
  def next_txn_num; end

  # The session id of this server session.
  #
  # @api private
  # @example Get the session id.
  #   server_session.session_id
  # @return [BSON::Document] The session id.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#95
  def session_id; end

  # Update the last_use attribute of the server session to now.
  #
  # @api private
  # @example Set the last use field to now.
  #   server_session.set_last_use!
  # @return [Time] The last time the session was used.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#83
  def set_last_use!; end

  # The current transaction number.
  #
  # When a transaction is active, all operations in that transaction
  # use the same transaction number. If the entire transaction is restarted
  # (for example, by Session#with_transaction, in which case it would
  # also invoke the block provided to it again), each transaction attempt
  # has its own transaction number.
  #
  # Transaction number is also used outside of transactions for
  # retryable writes. In this case, each write operation has its own
  # transaction number, but retries of a write operation use the same
  # transaction number as the first write (which is how the server
  # knows that subsequent writes are retries and should be ignored if
  # the first write succeeded on the server but was not read by the
  # client, for example).
  #
  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/server_session.rb#61
  def txn_num; end
end

# Regex for removing dashes from the UUID string.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/session/server_session.rb#32
Mongo::Session::ServerSession::DASH_REGEX = T.let(T.unsafe(nil), Regexp)

# Pack directive for the UUID.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/session/server_session.rb#37
Mongo::Session::ServerSession::UUID_PACK = T.let(T.unsafe(nil), String)

# A pool of server sessions.
#
# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/session/session_pool.rb#27
class Mongo::Session::SessionPool
  # Initialize a SessionPool.
  #
  # @api private
  # @example
  #   SessionPool.new(cluster)
  # @param cluster [Mongo::Cluster] The cluster that will be associated with this
  #   session pool.
  # @return [SessionPool] a new instance of SessionPool
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#52
  def initialize(cluster); end

  # Checkin a server session to the pool.
  #
  # @api private
  # @example Checkin a session.
  #   pool.checkin(session)
  # @param session [Session::ServerSession] The session to checkin.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#101
  def checkin(session); end

  # Check out a server session from the pool.
  #
  # @api private
  # @example Check out a session.
  #   pool.checkout
  # @return [ServerSession] The server session.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#78
  def checkout; end

  # End all sessions in the pool by sending the endSessions command to the server.
  #
  # @api private
  # @example End all sessions.
  #   pool.end_sessions
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#120
  def end_sessions; end

  # Get a formatted string for use in inspection.
  #
  # @api private
  # @example Inspect the session pool object.
  #   session_pool.inspect
  # @return [String] The session pool inspection.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#66
  def inspect; end

  private

  # @api private
  # @return [Boolean]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#139
  def about_to_expire?(session); end

  # @api private
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/session/session_pool.rb#159
  def prune!; end

  class << self
    # Create a SessionPool.
    #
    # @api private
    # @example
    #   SessionPool.create(cluster)
    # @param cluster [Mongo::Cluster] The cluster that will be associated with this
    #   session pool.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/session/session_pool.rb#38
    def create(cluster); end
  end
end

# The state of a session in which the last operation executed was a transaction abort.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/session.rb#315
Mongo::Session::TRANSACTION_ABORTED_STATE = T.let(T.unsafe(nil), Symbol)

# The state of a session in which the last operation executed was a transaction commit.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/session.rb#310
Mongo::Session::TRANSACTION_COMMITTED_STATE = T.let(T.unsafe(nil), Symbol)

# The state of a session in which a transaction has been started and at
# least one operation has occurred, but the transaction has not yet been
# committed or aborted.
#
# @since 2.6.0
#
# source://mongo//lib/mongo/session.rb#305
Mongo::Session::TRANSACTION_IN_PROGRESS_STATE = T.let(T.unsafe(nil), Symbol)

# @api private
# @since 2.5.0
#
# source://mongo//lib/mongo/session.rb#318
Mongo::Session::UNLABELED_WRITE_CONCERN_CODES = T.let(T.unsafe(nil), Array)

# Provides additional data around sockets for the driver's use.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket/ssl.rb#19
class Mongo::Socket
  include ::Socket::Constants

  # Initializes common socket attributes.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @param timeout [Float] The socket timeout value.
  # @param options [Hash] The options.
  # @return [Socket] a new instance of Socket
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#69
  def initialize(timeout, options); end

  # Is the socket connection alive?
  #
  # @api private
  # @deprecated Use #connectable? on the connection instead.
  # @example Is the socket alive?
  #   socket.alive?
  # @return [true, false] If the socket is alive.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#134
  def alive?; end

  # Close the socket.
  #
  # @api private
  # @example Close the socket.
  #   socket.close
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#160
  def close; end

  # For backwards compatibilty only, do not use.
  #
  # @api private
  # @deprecated
  # @return [true] Always true.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#262
  def connectable?; end

  # @api private
  # @return [Address] Address of the connection that created this socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#89
  def connection_address; end

  # @api private
  # @return [Integer] Generation of the connection (for non-monitoring
  #   connections) that created this socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#97
  def connection_generation; end

  # Tests if this socket has reached EOF. Primarily used for liveness checks.
  #
  # @api private
  # @return [Boolean]
  # @since 2.0.5
  #
  # source://mongo//lib/mongo/socket.rb#251
  def eof?; end

  # @api private
  # @return [Integer] family The type of host family.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#75
  def family; end

  # Delegates gets to the underlying socket.
  #
  # @api private
  # @example Get the next line.
  #   socket.gets(10)
  # @param args [Array<Object>] The arguments to pass through.
  # @return [Object] The returned bytes.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#182
  def gets(*args); end

  # @api private
  # @return [true | false] Whether this socket was created by a monitoring
  #   connection.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#105
  def monitor?; end

  # @api private
  # @return [Hash] The options.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#81
  def options; end

  # Will read all data from the socket for the provided number of bytes.
  # If no data is returned, an exception will be raised.
  #
  # @api private
  # @example Read all the requested data from the socket.
  #   socket.read(4096)
  # @param length [Integer] The number of bytes to read.
  # @param timeout [Numeric] The timeout to use for each chunk read.
  # @raise [Mongo::SocketError] If not all data is returned.
  # @return [Object] The data from the socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#202
  def read(length, timeout: T.unsafe(nil)); end

  # Read a single byte from the socket.
  #
  # @api private
  # @example Read a single byte.
  #   socket.readbyte
  # @return [Object] The read byte.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#227
  def readbyte; end

  # @api private
  # @return [Socket] socket The wrapped socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#78
  def socket; end

  # @api private
  # @return [String] Human-readable summary of the socket for debugging.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#112
  def summary; end

  # @api private
  # @return [Float] timeout The socket timeout.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#84
  def timeout; end

  # Writes data to the socket instance.
  #
  # @api private
  # @param args [Array<Object>] The data to be written.
  # @raise [Error::SocketError | Error::SocketTimeoutError] When there is a network error during the write.
  # @return [Integer] The length of bytes written to the socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#242
  def write(*args); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#388
  def allocate_string(capacity); end

  # Writes data to the socket instance.
  #
  # This is a separate method from +write+ for ease of mocking in the tests.
  # This method should not perform any exception mapping, upstream code
  # sholud map exceptions.
  #
  # @api private
  # @param args [Array<Object>] The data to be written.
  # @return [Integer] The length of bytes written to the socket.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#407
  def do_write(*args); end

  # @api private
  # @raise [NotImplementedError]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#482
  def human_address; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#470
  def map_exceptions; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#392
  def read_buffer_size; end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#268
  def read_from_socket(length, timeout: T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#443
  def set_keepalive_opts(sock); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#456
  def set_option(sock, option, default); end

  # @api private
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#465
  def set_socket_options(sock); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket.rb#431
  def unix_socket?(sock); end
end

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#437
Mongo::Socket::DEFAULT_TCP_KEEPCNT = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#439
Mongo::Socket::DEFAULT_TCP_KEEPIDLE = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#435
Mongo::Socket::DEFAULT_TCP_KEEPINTVL = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#441
Mongo::Socket::DEFAULT_TCP_USER_TIMEOUT = T.let(T.unsafe(nil), Integer)

# This module caches OCSP responses for their indicated validity time.
#
# The key is the CertificateId used for the OCSP request.
# The value is the SingleResponse.
#
# @api private
#
# source://mongo//lib/mongo/socket/ocsp_cache.rb#27
module Mongo::Socket::OcspCache
  private

  # Clears the driver's OCSP response cache.
  #
  # @api private
  # @note Use Mongo.clear_ocsp_cache from applications instead of invoking
  #   this method directly.
  #
  # source://mongo//lib/mongo/socket/ocsp_cache.rb#84
  def clear; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_cache.rb#74
  def delete(cert_id); end

  # Retrieves a cached SingleResponse for the specified CertificateId.
  #
  # This method may return expired responses if they are revoked.
  # Such responses were valid when they were first received.
  #
  # This method may also return responses that are valid but that may
  # expire by the time caller uses them. The caller should not perform
  # update time checks on the returned response.
  #
  # @api private
  # @return [OpenSSL::OCSP::SingleResponse] The previously
  #   retrieved response.
  #
  # source://mongo//lib/mongo/socket/ocsp_cache.rb#44
  def get(cert_id); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_cache.rb#92
  def responses; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_cache.rb#28
  def set(cert_id, response); end

  class << self
    # Clears the driver's OCSP response cache.
    #
    # @api private
    # @note Use Mongo.clear_ocsp_cache from applications instead of invoking
    #   this method directly.
    #
    # source://mongo//lib/mongo/socket/ocsp_cache.rb#84
    def clear; end

    # @api private
    #
    # source://mongo//lib/mongo/socket/ocsp_cache.rb#74
    def delete(cert_id); end

    # Retrieves a cached SingleResponse for the specified CertificateId.
    #
    # This method may return expired responses if they are revoked.
    # Such responses were valid when they were first received.
    #
    # This method may also return responses that are valid but that may
    # expire by the time caller uses them. The caller should not perform
    # update time checks on the returned response.
    #
    # @api private
    # @return [OpenSSL::OCSP::SingleResponse] The previously
    #   retrieved response.
    #
    # source://mongo//lib/mongo/socket/ocsp_cache.rb#44
    def get(cert_id); end

    # @api private
    #
    # source://mongo//lib/mongo/socket/ocsp_cache.rb#92
    def responses; end

    # @api private
    #
    # source://mongo//lib/mongo/socket/ocsp_cache.rb#28
    def set(cert_id, response); end
  end
end

# @api private
#
# source://mongo//lib/mongo/socket/ocsp_cache.rb#90
Mongo::Socket::OcspCache::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# OCSP endpoint verifier.
#
# After a TLS connection is established, this verifier inspects the
# certificate presented by the server, and if the certificate contains
# an OCSP URI, performs the OCSP status request to the specified URI
# (following up to 5 redirects) to verify the certificate status.
#
# @api private
# @see https://ruby-doc.org/stdlib/libdoc/openssl/rdoc/OpenSSL/OCSP.html
#
# source://mongo//lib/mongo/socket/ocsp_verifier.rb#35
class Mongo::Socket::OcspVerifier
  include ::Mongo::Loggable

  # @api private
  # @param host_name [String] The host name being verified, for
  #   diagnostic output.
  # @param cert [OpenSSL::X509::Certificate] The certificate presented by
  #   the server at host_name.
  # @param ca_cert [OpenSSL::X509::Certificate] The CA certificate
  #   presented by the server or resolved locally from the server
  #   certificate.
  # @param cert_store [OpenSSL::X509::Store] The certificate store to
  #   use for verifying OCSP response. This should be the same store as
  #   used in SSLContext used with the SSLSocket that we are verifying the
  #   certificate for. This must NOT be the CA certificate provided by
  #   the server (i.e. anything taken out of peer_cert) - otherwise the
  #   server would dictate which CA authorities the client trusts.
  # @return [OcspVerifier] a new instance of OcspVerifier
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#51
  def initialize(host_name, cert, ca_cert, cert_store, **opts); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#61
  def ca_cert; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#60
  def cert; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#91
  def cert_id; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#62
  def cert_store; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#59
  def host_name; end

  # @api private
  # @return [Array<String>] OCSP URIs in the specified server certificate.
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#70
  def ocsp_uris; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#63
  def options; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#65
  def timeout; end

  # @api private
  # @raise [Error::ServerCertificateRevoked] If the certificate was
  #   definitively revoked.
  # @return [true | false] Whether the certificate was verified.
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#122
  def verify; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#99
  def verify_with_cache; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#133
  def do_verify; end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#304
  def handle_exceptions; end

  # @api private
  # @raise [Error::ServerCertificateRevoked]
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#318
  def raise_revoked_error(resp); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#335
  def report_response_body(body); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#327
  def report_uri(original_uri, uri); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#283
  def return_ocsp_response(resp, errors = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/socket/ocsp_verifier.rb#175
  def verify_one_responder(uri); end
end

# Wrapper for TLS sockets.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/socket/ssl.rb#24
class Mongo::Socket::SSL < ::Mongo::Socket
  include ::OpenSSL

  # Initializes a new TLS socket.
  #
  # @api private
  # @example Create the TLS socket.
  #   SSL.new('::1', 27017, 30)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param host [String] The hostname or IP address.
  # @param port [Integer] The port number.
  # @param timeout [Float] The socket timeout value.
  # @param family [Integer] The socket family.
  # @param options [Hash] The options.
  # @return [SSL] a new instance of SSL
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#103
  def initialize(host, port, host_name, timeout, family, options = T.unsafe(nil)); end

  # @return [SSLContext] context The TLS context.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#122
  def context; end

  # @return [String] host The host to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#125
  def host; end

  # @return [String] host_name The original host name.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#128
  def host_name; end

  # @return [Integer] port The port to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#131
  def port; end

  # Read a single byte from the socket.
  #
  # @example Read a single byte.
  #   socket.readbyte
  # @return [Object] The read byte.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#176
  def readbyte; end

  private

  # Establishes a socket connection.
  #
  # @example Connect the socket.
  #   sock.connect!
  # @note This method mutates the object by setting the socket
  #   internally.
  # @return [SSL] The connected socket instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#144
  def connect!; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#217
  def create_context(options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#384
  def human_address; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#320
  def load_private_key(text, passphrase); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#378
  def read_buffer_size; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#388
  def run_tls_context_hooks; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#261
  def set_cert(context, options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#341
  def set_cert_verification(context, options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#309
  def set_key(context, options); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#357
  def verify_certificate!(socket); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#185
  def verify_certificate?; end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#196
  def verify_hostname?; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#365
  def verify_ocsp_endpoint!(socket); end

  # @return [Boolean]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/ssl.rb#207
  def verify_ocsp_endpoint?; end
end

# Error message for TLS related exceptions.
#
# @api private
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#37
Mongo::Socket::SSL_ERROR = T.let(T.unsafe(nil), String)

# Wrapper for TCP sockets.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/socket/tcp.rb#24
class Mongo::Socket::TCP < ::Mongo::Socket
  # Initializes a new TCP socket.
  #
  # @api private
  # @example Create the TCP socket.
  #   TCP.new('::1', 27017, 30, Socket::PF_INET)
  #   TCP.new('127.0.0.1', 27017, 30, Socket::PF_INET)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param host [String] The hostname or IP address.
  # @param port [Integer] The port number.
  # @param timeout [Float] The socket timeout value.
  # @param family [Integer] The socket family.
  # @param options [Hash] The options.
  # @return [TCP] a new instance of TCP
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/tcp.rb#48
  def initialize(host, port, timeout, family, options = T.unsafe(nil)); end

  # @return [String] host The host to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/tcp.rb#66
  def host; end

  # @return [Integer] port The port to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/tcp.rb#69
  def port; end

  private

  # Establishes a socket connection.
  #
  # @example Connect the socket.
  #   sock.connect!
  # @note This method mutates the object by setting the socket
  #   internally.
  # @return [TCP] The connected socket instance.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/tcp.rb#82
  def connect!; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/tcp.rb#95
  def human_address; end
end

# Error message for timeouts on socket calls.
#
# @api private
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#43
Mongo::Socket::TIMEOUT_ERROR = T.let(T.unsafe(nil), String)

# The pack directive for timeouts.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#48
Mongo::Socket::TIMEOUT_PACK = T.let(T.unsafe(nil), String)

# Wrapper for Unix sockets.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/socket/unix.rb#24
class Mongo::Socket::Unix < ::Mongo::Socket
  # Initializes a new Unix socket.
  #
  # @api private
  # @example Create the Unix socket.
  #   Unix.new('/path/to.sock', 5)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param path [String] The path.
  # @param timeout [Float] The socket timeout value.
  # @param options [Hash] The options.
  # @return [Unix] a new instance of Unix
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/unix.rb#45
  def initialize(path, timeout, options = T.unsafe(nil)); end

  # @return [String] path The path to connect to.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/unix.rb#53
  def path; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/socket/unix.rb#57
  def human_address; end
end

# Write data to the socket in chunks of this size.
#
# @api private
# @since 2.0.0
#
# source://mongo//lib/mongo/socket.rb#53
Mongo::Socket::WRITE_CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# source://mongo//lib/mongo/srv/result.rb#19
module Mongo::Srv; end

# Periodically retrieves SRV records for the cluster's SRV URI, and
# sets the cluster's server list to the SRV lookup result.
#
# If an error is encountered during SRV lookup or an SRV record is invalid
# or disallowed for security reasons, a warning is logged and monitoring
# continues.
#
# @api private
#
# source://mongo//lib/mongo/srv/monitor.rb#29
class Mongo::Srv::Monitor
  include ::Mongo::Loggable
  include ::Mongo::BackgroundThread

  # Creates the SRV monitor.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param cluster [Cluster] The cluster.
  # @param opts [Hash] a customizable set of options
  # @return [Monitor] a new instance of Monitor
  #
  # source://mongo//lib/mongo/srv/monitor.rb#45
  def initialize(cluster, **opts); end

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#58
  def cluster; end

  # @api private
  # @return [Srv::Result] Last known SRV lookup result. Used for
  #   determining intervals between SRV lookups, which depend on SRV DNS
  #   records' TTL values.
  #
  # source://mongo//lib/mongo/srv/monitor.rb#63
  def last_result; end

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#56
  def options; end

  private

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#67
  def do_work; end

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#72
  def scan!; end

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#96
  def scan_interval; end

  # @api private
  #
  # source://mongo//lib/mongo/srv/monitor.rb#106
  def timeout; end
end

# @api private
#
# source://mongo//lib/mongo/srv/monitor.rb#35
Mongo::Srv::Monitor::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://mongo//lib/mongo/srv/monitor.rb#33
Mongo::Srv::Monitor::MIN_SCAN_INTERVAL = T.let(T.unsafe(nil), Integer)

# Encapsulates the necessary behavior for querying SRV records as
# required by the driver.
#
# @api private
#
# source://mongo//lib/mongo/srv/resolver.rb#25
class Mongo::Srv::Resolver
  include ::Mongo::Loggable

  # Creates a new Resolver.
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Resolver] a new instance of Resolver
  #
  # source://mongo//lib/mongo/srv/resolver.rb#51
  def initialize(**opts); end

  # Obtains all of the SRV records for a given hostname. If a srv_max_hosts
  # is specified and it is greater than 0, return maximum srv_max_hosts records.
  #
  # In the event that a record with a mismatched domain is found or no
  # records are found, if the :raise_on_invalid option is true,
  # an exception will be raised, otherwise a warning will be logged.
  #
  # @api private
  # @param hostname [String] The hostname whose records should be obtained.
  # @param srv_service_name [String | nil] The SRV service name for the DNS query.
  #   If nil, 'mongodb' is used.
  # @param srv_max_hosts [Integer | nil] The maximum number of records to return.
  #   If this value is nil, return all of the records.
  # @raise [Mongo::Error::MismatchedDomain] If the :raise_in_invalid
  #   Resolver option is true and a record with a domain name that does
  #   not match the hostname's is found.
  # @raise [Mongo::Error::NoSRVRecords] If the :raise_in_invalid Resolver
  #   option is true and no records are found.
  # @return [Mongo::Srv::Result] SRV lookup result.
  #
  # source://mongo//lib/mongo/srv/resolver.rb#84
  def get_records(hostname, srv_service_name = T.unsafe(nil), srv_max_hosts = T.unsafe(nil)); end

  # Obtains the TXT records of a host.
  #
  # @api private
  # @param hostname [String] The host whose TXT records should be obtained.
  # @raise [Mongo::Error::InvalidTXTRecord] If more than one TXT record is found.
  # @return [nil | String] URI options string from TXT record
  #   associated with the hostname, or nil if there is no such record.
  #
  # source://mongo//lib/mongo/srv/resolver.rb#132
  def get_txt_options_string(hostname); end

  # @api private
  # @return [Hash] Resolver options.
  #
  # source://mongo//lib/mongo/srv/resolver.rb#58
  def options; end

  # Generates the record prefix with a custom SRV service name if it is
  # provided.
  #
  # @api private
  # @option srv_service_name
  # @param srv_service_name [Hash] a customizable set of options
  # @return [String] The generated record prefix.
  #
  # source://mongo//lib/mongo/srv/resolver.rb#38
  def record_prefix(srv_service_name = T.unsafe(nil)); end

  # @api private
  #
  # source://mongo//lib/mongo/srv/resolver.rb#60
  def timeout; end

  private

  # Checks whether an error should be raised due to either a record with
  # a mismatched domain being found or no records being found.
  #
  # @api private
  # @return [Boolean] Whether an error should be raised.
  #
  # source://mongo//lib/mongo/srv/resolver.rb#153
  def raise_on_invalid?; end
end

# @api private
# @return [String] RECORD_PREFIX The prefix prepended to each hostname
#   before querying SRV records.
#
# source://mongo//lib/mongo/srv/resolver.rb#30
Mongo::Srv::Resolver::RECORD_PREFIX = T.let(T.unsafe(nil), String)

# SRV record lookup result.
#
# Contains server addresses that the query resolved to, and minimum TTL
# of the DNS records.
#
# @api private
#
# source://mongo//lib/mongo/srv/result.rb#27
class Mongo::Srv::Result
  include ::Mongo::Address::Validator

  # Create a new object to keep track of the SRV records of the hostname.
  #
  # @api private
  # @param hostname [String] The hostname pointing to the DNS records.
  # @return [Result] a new instance of Result
  #
  # source://mongo//lib/mongo/srv/result.rb#49
  def initialize(hostname); end

  # Adds a new record.
  #
  # @api private
  # @param record [Resolv::DNS::Resource] An SRV record found for the hostname.
  #
  # source://mongo//lib/mongo/srv/result.rb#65
  def add_record(record); end

  # @api private
  # @return [Array<String>] address_strs The host strings of the SRV records
  #   for the query hostname.
  #
  # source://mongo//lib/mongo/srv/result.rb#40
  def address_strs; end

  # Checks whether there are any records.
  #
  # @api private
  # @return [Boolean] Whether or not there are any records.
  #
  # source://mongo//lib/mongo/srv/result.rb#58
  def empty?; end

  # @api private
  # @return [Integer | nil] min_ttl The smallest TTL found among the
  #   records (or nil if no records have been added).
  #
  # source://mongo//lib/mongo/srv/result.rb#44
  def min_ttl; end

  # @api private
  # @return [Integer | nil] min_ttl The smallest TTL found among the
  #   records (or nil if no records have been added).
  #
  # source://mongo//lib/mongo/srv/result.rb#44
  def min_ttl=(_arg0); end

  # @api private
  # @return [String] query_hostname The hostname pointing to the DNS records.
  #
  # source://mongo//lib/mongo/srv/result.rb#36
  def query_hostname; end

  private

  # Transforms the provided hostname to simplify its validation later on.
  #
  # This method is safe to call during both initial DNS seed list discovery
  # and during SRV monitoring, in that it does not convert invalid hostnames
  # into valid ones.
  #
  # - Converts the hostname to lower case.
  # - Removes one trailing dot, if there is exactly one. If the hostname
  #   has multiple trailing dots, it is unchanged.
  #
  # @api private
  # @param host [String] Hostname to transform.
  #
  # source://mongo//lib/mongo/srv/result.rb#100
  def normalize_hostname(host); end

  # Ensures that a record's domain name matches that of the hostname.
  #
  # A hostname's domain name consists of each of the '.' delineated
  # parts after the first. For example, the hostname 'foo.bar.baz'
  # has the domain name 'bar.baz'.
  #
  # @api private
  # @param record_host [String] The host of the SRV record.
  # @raise [Mongo::Error::MismatchedDomain] If the record's domain name doesn't match that of
  #   the hostname.
  #
  # source://mongo//lib/mongo/srv/result.rb#118
  def validate_same_origin!(record_host); end
end

# @api private
# @return [String] MISMATCHED_DOMAINNAME Error message format string indicating that an SRV
#   record found does not match the domain of a hostname.
#
# source://mongo//lib/mongo/srv/result.rb#32
Mongo::Srv::Result::MISMATCHED_DOMAINNAME = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/timeout.rb#21
module Mongo::Timeout
  private

  # A wrapper around Ruby core's Timeout::timeout method that provides
  # a standardized API for Ruby versions older and newer than 2.4.0,
  # which is when the third argument was introduced.
  #
  # @api private
  # @param sec [Numeric] The number of seconds before timeout.
  # @param klass [Class] The exception class to raise on timeout, optional.
  #   When no error exception is provided, Timeout::Error is raised.
  # @param message [String] The error message passed to the exception raised
  #   on timeout, optional. When no error message is provided, the default
  #   error message for the exception class is used.
  #
  # source://mongo//lib/mongo/timeout.rb#33
  def timeout(sec, klass = T.unsafe(nil), message = T.unsafe(nil)); end

  class << self
    # A wrapper around Ruby core's Timeout::timeout method that provides
    # a standardized API for Ruby versions older and newer than 2.4.0,
    # which is when the third argument was introduced.
    #
    # @api private
    # @param sec [Numeric] The number of seconds before timeout.
    # @param klass [Class] The exception class to raise on timeout, optional.
    #   When no error exception is provided, Timeout::Error is raised.
    # @param message [String] The error message passed to the exception raised
    #   on timeout, optional. When no error message is provided, the default
    #   error message for the exception class is used.
    #
    # source://mongo//lib/mongo/timeout.rb#33
    def timeout(sec, klass = T.unsafe(nil), message = T.unsafe(nil)); end
  end
end

# TopologyVersion encapsulates the topologyVersion document obtained from
# hello responses and not master-like OperationFailure errors.
#
# @api private
#
# source://mongo//lib/mongo/topology_version.rb#23
class Mongo::TopologyVersion < ::BSON::Document
  # @api private
  # @return [TopologyVersion] a new instance of TopologyVersion
  #
  # source://mongo//lib/mongo/topology_version.rb#24
  def initialize(doc); end

  # @api private
  # @return [Integer] The counter.
  #
  # source://mongo//lib/mongo/topology_version.rb#43
  def counter; end

  # Returns whether this topology version is potentially newer than another
  # topology version.
  #
  # Note that there is no total ordering of topology versions - given
  # two topology versions, each may be "potentially newer" than the other one.
  #
  # @api private
  # @param other [TopologyVersion] The other topology version.
  # @return [true | false] Whether this topology version is potentially newer.
  #
  # source://mongo//lib/mongo/topology_version.rb#57
  def gt?(other); end

  # Returns whether this topology version is potentially newer than or equal
  # to another topology version.
  #
  # Note that there is no total ordering of topology versions - given
  # two topology versions, each may be "potentially newer" than the other one.
  #
  # @api private
  # @param other [TopologyVersion] The other topology version.
  # @return [true | false] Whether this topology version is potentially newer.
  #
  # source://mongo//lib/mongo/topology_version.rb#75
  def gte?(other); end

  # @api private
  # @return [BSON::ObjectId] The process id.
  #
  # source://mongo//lib/mongo/topology_version.rb#38
  def process_id; end

  # Converts the object to a document suitable for being sent to the server.
  #
  # @api private
  # @return [BSON::Document] The document.
  #
  # source://mongo//lib/mongo/topology_version.rb#88
  def to_doc; end
end

# The URI class provides a way for users to parse the MongoDB uri as
# defined in the connection string format spec.
#
# https://www.mongodb.com/docs/manual/reference/connection-string/
#
# @example Use the uri string to make a client connection.
#   uri = Mongo::URI.new('mongodb://localhost:27017')
#   client = Mongo::Client.new(uri.servers, uri.options)
#   client.login(uri.credentials)
#   client[uri.database]
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#32
class Mongo::URI
  include ::Mongo::Loggable
  include ::Mongo::Address::Validator

  # Create the new uri from the provided string.
  #
  # @example Create the new URI.
  #   URI.new('mongodb://localhost:27017')
  # @option options
  # @param string [String] The URI to parse.
  # @param options [Hash] The options.
  # @raise [Error::InvalidURI] If the uri does not match the spec.
  # @return [URI] a new instance of URI
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#284
  def initialize(string, options = T.unsafe(nil)); end

  # Gets the options hash that needs to be passed to a Mongo::Client on
  # instantiation, so we don't have to merge the credentials and database in
  # at that point - we only have a single point here.
  #
  # @example Get the client options.
  #   uri.client_options
  # @return [Mongo::Options::Redacted] The options passed to the Mongo::Client
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#259
  def client_options; end

  # Get the credentials provided in the URI.
  #
  # @example Get the credentials.
  #   uri.credentials
  # @return [Hash] The credentials.
  #   * :user [ String ] The user.
  #   * :password [ String ] The provided password.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#315
  def credentials; end

  # Get the database provided in the URI.
  #
  # @example Get the database.
  #   uri.database
  # @return [String] The database.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#327
  def database; end

  # The uri parser object options.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#39
  def options; end

  # The servers specified in the uri.
  #
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#49
  def servers; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#267
  def srv_records; end

  # Get the uri as a string.
  #
  # @example Get the uri as a string.
  #   uri.to_s
  # @return [String] The uri string.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#337
  def to_s; end

  # Mongo::Options::Redacted of the options specified in the uri.
  #
  # @since 2.1.0
  #
  # source://mongo//lib/mongo/uri.rb#44
  def uri_options; end

  private

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#485
  def decode(value); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#489
  def encode(value); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#422
  def options_mapper; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#374
  def parse!(remaining); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#472
  def parse_database!(string); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#459
  def parse_password!(string); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#428
  def parse_uri_options!(string); end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#448
  def parse_user!(string); end

  # @raise [Error::InvalidURI]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#477
  def raise_invalid_error!(details); end

  # @raise [Error::InvalidURI]
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#481
  def raise_invalid_error_no_fmt!(details); end

  # Reconstruct the URI from its parts. Invalid options are dropped and options
  # are converted to camelCase.
  #
  # @return [String] the uri.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#347
  def reconstruct_uri; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#370
  def scheme; end

  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri.rb#493
  def validate_uri_options!; end

  class << self
    # Get either a URI object or a SRVProtocol URI object.
    #
    # @example Get the uri object.
    #   URI.get(string)
    # @option options
    # @param string [String] The URI to parse.
    # @param opts [Hash] The options.
    # @param options [Hash] a customizable set of options
    # @return [URI, URI::SRVProtocol] The uri object.
    # @since 2.5.0
    #
    # source://mongo//lib/mongo/uri.rb#230
    def get(string, opts = T.unsafe(nil)); end
  end
end

# The character delimiting auth credentials.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#139
Mongo::URI::AUTH_DELIM = T.let(T.unsafe(nil), String)

# Map of URI authentication mechanisms to Ruby driver mechanisms
#
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#196
Mongo::URI::AUTH_MECH_MAP = T.let(T.unsafe(nil), Hash)

# The character separating a username from the password.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#134
Mongo::URI::AUTH_USER_PWD_DELIM = T.let(T.unsafe(nil), String)

# The character delimiting a database.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#113
Mongo::URI::DATABASE_DELIM = T.let(T.unsafe(nil), String)

# MongoDB URI format specification.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#77
Mongo::URI::FORMAT = T.let(T.unsafe(nil), String)

# MongoDB URI (connection string) documentation url
#
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#83
Mongo::URI::HELP = T.let(T.unsafe(nil), String)

# The character delimiting hosts.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#103
Mongo::URI::HOST_DELIM = T.let(T.unsafe(nil), String)

# The character separating a host and port.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#108
Mongo::URI::HOST_PORT_DELIM = T.let(T.unsafe(nil), String)

# The character delimiting multiple options.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#124
Mongo::URI::INDIV_URI_OPTS_DELIM = T.let(T.unsafe(nil), String)

# Error details for a missing host.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#175
Mongo::URI::INVALID_HOST = T.let(T.unsafe(nil), String)

# Error details for providing options without a database delimiter.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#170
Mongo::URI::INVALID_OPTS_DELIM = T.let(T.unsafe(nil), String)

# Error details for an invalid options format.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#149
Mongo::URI::INVALID_OPTS_VALUE_DELIM = T.let(T.unsafe(nil), String)

# Error details for an invalid port.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#180
Mongo::URI::INVALID_PORT = T.let(T.unsafe(nil), String)

# Error details for an invalid scheme.
#
# @deprecated
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#72
Mongo::URI::INVALID_SCHEME = T.let(T.unsafe(nil), String)

# The mongodb connection string scheme root.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/uri.rb#61
Mongo::URI::MONGODB_SCHEME = T.let(T.unsafe(nil), String)

# The mongodb srv protocol connection string scheme root.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/uri.rb#66
Mongo::URI::MONGODB_SRV_SCHEME = T.let(T.unsafe(nil), String)

# Performs mapping between URI options and Ruby options.
#
# This class contains:
#
# - The mapping defining how URI options are converted to Ruby options.
# - The mapping from downcased URI option names to canonical-cased URI
#   option names.
# - Methods to perform conversion of URI option values to Ruby option
#   values (the convert_* methods). These generally warn and return nil
#   when input given is invalid.
# - Methods to perform conversion of Ruby option values to standardized
#   MongoClient options (revert_* methods). These assume the input is valid
#   and generally do not perform validation.
#
# URI option names are case insensitive. Ruby options are specified as
# symbols (though in Client options use indifferent access).
#
# @api private
#
# source://mongo//lib/mongo/uri/options_mapper.rb#39
class Mongo::URI::OptionsMapper
  include ::Mongo::Loggable

  # Instantates the options mapper.
  #
  # @api private
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [OptionsMapper] a new instance of OptionsMapper
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#46
  def initialize(**opts); end

  # Adds an option to the uri options hash.
  #
  #   Acquires a target for the option based on group.
  #   Transforms the value.
  #   Merges the option into the target.
  #
  # @api private
  # @param key [String] URI option name.
  # @param value [String] The value of the option.
  # @param uri_options [Hash] The base option target.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#62
  def add_uri_option(key, value, uri_options); end

  # @api private
  # @return [Hash] The options.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#51
  def options; end

  # Converts Ruby options provided to "standardized MongoClient options".
  #
  # @api private
  # @param opts [Hash] Ruby options to convert.
  # @return [Hash] Standardized MongoClient options.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#126
  def ruby_to_smc(opts); end

  # Converts Ruby options provided to their representation in a URI string.
  #
  # @api private
  # @param opts [Hash] Ruby options to convert.
  # @return [Hash] URI string hash.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#169
  def ruby_to_string(opts); end

  # @api private
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#88
  def smc_to_ruby(opts); end

  private

  # Applies URI value transformation by either using the default cast
  # or a transformation appropriate for the given type.
  #
  # @api private
  # @param key [String] URI option name.
  # @param value [String] The value to be transformed.
  # @param type [Symbol] The transform method.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#215
  def apply_transform(key, value, type); end

  # Extract values from the string and put them into an array.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The string to build an array from.
  # @return [Array<String>] The array built from the string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#546
  def convert_array(name, value); end

  # Authentication mechanism transformation.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The authentication mechanism.
  # @return [Symbol] The transformed authentication mechanism.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#574
  def convert_auth_mech(name, value); end

  # Auth mechanism properties extractor.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The auth mechanism properties string.
  # @return [Hash | nil] The auth mechanism properties hash.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#614
  def convert_auth_mech_props(name, value); end

  # Converts +value+ to a boolean.
  #
  # Returns true for 'true', false for 'false', otherwise nil.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | true | false] URI option value.
  # @return [true | false | nil] Converted value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#335
  def convert_bool(name, value); end

  # Converts +value+ into an integer. Only converts positive integers.
  #
  # If the value is not a valid integer, warns and returns nil.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Integer] URI option value.
  # @return [nil | Integer] Converted value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#442
  def convert_integer(name, value); end

  # Parses a boolean value and returns its inverse.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | true | false] The URI option value.
  # @return [true | false | nil] The inverse of the boolean value parsed out, otherwise nil
  #   (and a warning will be logged).
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#406
  def convert_inverse_bool(name, value); end

  # Parses the max staleness value, which must be either "0" or an integer
  # greater or equal to 90.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Integer] The max staleness string.
  # @return [Integer | nil] The max staleness integer parsed out if it is valid, otherwise nil
  #   (and a warning will be logged).
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#653
  def convert_max_staleness(name, value); end

  # Ruby's convention is to provide timeouts in seconds, not milliseconds and
  # to use fractions where more precision is necessary. The connection string
  # options are always in MS so we provide an easy conversion type.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Integer | Float] The millisecond value.
  # @return [Float] The seconds value.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#479
  def convert_ms(name, value); end

  # Read preference mode transformation.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The read mode string value.
  # @return [Symbol | String] The read mode.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#701
  def convert_read_mode(name, value); end

  # Read preference tag set extractor.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The tag set string.
  # @return [Hash] The tag set hash.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#754
  def convert_read_set(name, value); end

  # Read preference tags transformation.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The string representing tag set.
  # @return [Array<Hash> | nil] Array with tag set.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#721
  def convert_read_tags(name, value); end

  # Converts the value into a boolean and returns it wrapped in an array.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] URI option value.
  # @return [Array<true | false> | nil] The boolean value parsed and wraped
  #   in an array.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#372
  def convert_repeated_bool(name, value); end

  # Converts +value+ into a symbol.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Symbol] URI option value.
  # @return [Symbol] Converted value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#526
  def convert_symbol(name, value); end

  # Converts +value+ as a write concern.
  #
  # If +value+ is the word "majority", returns the symbol :majority.
  # If +value+ is a number, returns the number as an integer.
  # Otherwise returns the string +value+ unchanged.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Integer] URI option value.
  # @return [Integer | Symbol | String] Converted value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#768
  def convert_w(name, value); end

  # Parses the zlib compression level.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String | Integer] The zlib compression level string.
  # @return [Integer | nil] The compression level value if it is between -1 and 9 (inclusive),
  #   otherwise nil (and a warning will be logged).
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#809
  def convert_zlib_compression_level(name, value); end

  # Extract values from the string and put them into a nested hash.
  #
  # @api private
  # @param name [String] Name of the URI option being processed.
  # @param value [String] The string to build a hash from.
  # @return [Hash] The hash built from the string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#848
  def hash_extractor(name, value); end

  # Merges a new option into the target.
  #
  # If the option exists at the target destination the merge will
  # be an addition.
  #
  # Specifically required to append an additional tag set
  # to the array of tag sets without overwriting the original.
  #
  # @api private
  # @param target [Hash] The destination.
  # @param value [Object] The value to be merged.
  # @param name [Symbol] The name of the option.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#234
  def merge_uri_option(target, value, name); end

  # Reverts an array.
  #
  # @api private
  # @param value [Array<String>] An array of strings.
  # @return [Array<String>] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#555
  def revert_array(value); end

  # Reverts auth mechanism.
  #
  # @api private
  # @param value [Symbol] The auth mechanism.
  # @raise [ArgumentError] if its an invalid auth mechanism.
  # @return [String] The auth mechanism as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#588
  def revert_auth_mech(value); end

  # Reverts auth mechanism properties.
  #
  # @api private
  # @param value [Hash | nil] The auth mech properties.
  # @return [Hash | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#631
  def revert_auth_mech_props(value); end

  # Reverts a boolean type.
  #
  # @api private
  # @param value [true | false | nil] The boolean to revert.
  # @return [true | false | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#352
  def revert_bool(value); end

  # Reverts an integer.
  #
  # @api private
  # @param value [Integer | nil] The integer.
  # @return [Integer | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#456
  def revert_integer(value); end

  # Reverts and inverts a boolean type.
  #
  # @api private
  # @param value [true | false | nil] The boolean to revert and invert.
  # @return [true | false | nil] The inverted boolean.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#421
  def revert_inverse_bool(value); end

  # Reverts max staleness.
  #
  # @api private
  # @param value [Integer | nil] The max staleness.
  # @return [Integer | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#682
  def revert_max_staleness(value); end

  # Reverts an ms.
  #
  # @api private
  # @param value [Float] The float.
  # @return [Integer] The number multiplied by 1000 as an integer.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#507
  def revert_ms(value); end

  # Reverts read mode.
  #
  # @api private
  # @param value [Symbol | String] The read mode.
  # @return [String] The read mode as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#710
  def revert_read_mode(value); end

  # Reverts read tags.
  #
  # @api private
  # @param value [Array<Hash> | nil] The read tags.
  # @return [Array<Hash> | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#735
  def revert_read_tags(value); end

  # Reverts a repeated boolean type.
  #
  # @api private
  # @param value [Array<true | false> | true | false | nil] The repeated boolean to revert.
  # @return [Array<true | false> | true | false | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#381
  def revert_repeated_bool(value); end

  # Reverts a symbol.
  #
  # @api private
  # @param value [Symbol] The symbol.
  # @return [String] The passed value as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#535
  def revert_symbol(value); end

  # Reverts write concern.
  #
  # @api private
  # @param value [Integer | Symbol | String] The write concern.
  # @return [Integer | String] The write concern as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#784
  def revert_w(value); end

  # Reverts zlib compression level
  #
  # @api private
  # @param value [Integer | nil] The write concern.
  # @return [Integer | nil] The passed value.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#829
  def revert_zlib_compression_level(value); end

  # Stringifies an array.
  #
  # @api private
  # @param value [Array<String>] An array of strings.
  # @return [String] The array joined by commas.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#564
  def stringify_array(value); end

  # Stringifies auth mechanism.
  #
  # @api private
  # @param value [Symbol] The auth mechanism.
  # @return [String | nil] The auth mechanism as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#604
  def stringify_auth_mech(value); end

  # Stringifies auth mechanism properties.
  #
  # @api private
  # @param value [Hash | nil] The auth mech properties.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#640
  def stringify_auth_mech_props(value); end

  # Stringifies a boolean type.
  #
  # @api private
  # @param value [true | false | nil] The boolean.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#361
  def stringify_bool(value); end

  # Stringifies an integer.
  #
  # @api private
  # @param value [Integer | nil] The integer.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#465
  def stringify_integer(value); end

  # Inverts and stringifies a boolean.
  #
  # @api private
  # @param value [true | false | nil] The boolean.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#430
  def stringify_inverse_bool(value); end

  # Stringifies max staleness.
  #
  # @api private
  # @param value [Integer | nil] The max staleness.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#691
  def stringify_max_staleness(value); end

  # Stringifies an ms.
  #
  # @api private
  # @param value [Float] The float.
  # @return [String] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#516
  def stringify_ms(value); end

  # Reverts read mode.
  #
  # @api private
  # @param value [Symbol | String] The read mode.
  # @return [String] The read mode as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#710
  def stringify_read_mode(value); end

  # Stringifies read tags.
  #
  # @api private
  # @param value [Array<Hash> | nil] The read tags.
  # @return [String | nil] The joined string of read tags.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#744
  def stringify_read_tags(value); end

  # Stringifies a repeated boolean type.
  #
  # @api private
  # @param value [Array<true | false> | nil] The repeated boolean.
  # @return [Array<true | false> | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#390
  def stringify_repeated_bool(value); end

  # Reverts a symbol.
  #
  # @api private
  # @param value [Symbol] The symbol.
  # @return [String] The passed value as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#535
  def stringify_symbol(value); end

  # Stringifies write concern.
  #
  # @api private
  # @param value [Integer | Symbol | String] The write concern.
  # @return [String] The write concern as a string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#798
  def stringify_w(value); end

  # Stringifies zlib compression level
  #
  # @api private
  # @param value [Integer | nil] The write concern.
  # @return [String | nil] The string.
  #
  # source://mongo//lib/mongo/uri/options_mapper.rb#838
  def stringify_zlib_compression_level(value); end

  class << self
    # Simple internal dsl to register a MongoDB URI option in the URI_OPTION_MAP.
    #
    # @api private
    # @param uri_key [String] The MongoDB URI option to register.
    # @param name [Symbol] The name of the option in the driver.
    # @param extra [Hash] Extra options.
    #   * :group [ Symbol ] Nested hash where option will go.
    #   * :type [ Symbol ] Name of function to transform value.
    #
    # source://mongo//lib/mongo/uri/options_mapper.rb#260
    def uri_option(uri_key, name, **extra); end
  end
end

# @api private
# @return [Hash<String, String>] Map from lowercased to canonical URI
#   option names.
#
# source://mongo//lib/mongo/uri/options_mapper.rb#251
Mongo::URI::OptionsMapper::URI_OPTION_CANONICAL_NAMES = T.let(T.unsafe(nil), Hash)

# Hash for storing map of URI option parameters to conversion strategies
#
# @api private
#
# source://mongo//lib/mongo/uri/options_mapper.rb#247
Mongo::URI::OptionsMapper::URI_OPTION_MAP = T.let(T.unsafe(nil), Hash)

# Percent sign that must be encoded in user creds.
#
# @since 2.5.1
#
# source://mongo//lib/mongo/uri.rb#93
Mongo::URI::PERCENT_CHAR = T.let(T.unsafe(nil), Regexp)

# Map of URI read preference modes to Ruby driver read preference modes
#
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#185
Mongo::URI::READ_MODE_MAP = T.let(T.unsafe(nil), Hash)

# Options that are allowed to appear more than once in the uri.
#
# In order to follow the URI options spec requirement that all instances
# of 'tls' and 'ssl' have the same value, we need to keep track of all
# of the values passed in for those options. Assuming they don't conflict,
# they will be condensed to a single value immediately after parsing the URI.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#215
Mongo::URI::REPEATABLE_OPTIONS = T.let(T.unsafe(nil), Array)

# The mongodb connection string scheme.
#
# @deprecated Will be removed in 3.0.
# @since 2.0.0
#
# source://mongo//lib/mongo/uri.rb#56
Mongo::URI::SCHEME = T.let(T.unsafe(nil), String)

# Scheme delimiter.
#
# @since 2.5.0
#
# source://mongo//lib/mongo/uri.rb#144
Mongo::URI::SCHEME_DELIM = T.let(T.unsafe(nil), String)

# Parser for a URI using the mongodb+srv protocol, which specifies a DNS to query for SRV records.
# The driver will query the DNS server for SRV records on <hostname>.<domainname>,
# prefixed with _mongodb._tcp
# The SRV records can then be used as the seedlist for a Mongo::Client.
# The driver also queries for a TXT record providing default connection string options.
# Only one TXT record is allowed, and only a subset of Mongo::Client options is allowed.
#
# Please refer to the Initial DNS Seedlist Discovery spec for details.
#
# https://github.com/mongodb/specifications/blob/master/source/initial-dns-seedlist-discovery
#
# @example Use the uri string to make a client connection.
#   client = Mongo::Client.new('mongodb+srv://test6.test.build.10gen.cc/')
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#37
class Mongo::URI::SRVProtocol < ::Mongo::URI
  # Gets the options hash that needs to be passed to a Mongo::Client on instantiation, so we
  # don't have to merge the txt record options, credentials, and database in at that point -
  # we only have a single point here.
  #
  # @example Get the client options.
  #   uri.client_options
  # @return [Hash] The options passed to the Mongo::Client
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#51
  def client_options; end

  # The hostname that is specified in the URI and used to look up
  # SRV records.
  #
  # This attribute needs to be defined because SRVProtocol changes
  # #servers to be the result of the lookup rather than the hostname
  # specified in the URI.
  #
  # @api private
  # @return [String] The hostname used in SRV lookup.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#72
  def query_hostname; end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#39
  def srv_records; end

  # @api private
  # @return [Srv::Result] SRV lookup result.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#60
  def srv_result; end

  private

  # Obtains the TXT options of a host.
  #
  # @param hostname [String] The hostname whose records should be obtained.
  # @raise [Mongo::Error::InvalidTXTRecord] If more than one TXT record is found.
  # @return [Hash] The TXT record options (an empyt hash if no TXT
  #   records are found).
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#199
  def get_txt_options(hostname); end

  # Parses the credentials from the URI and performs DNS queries to obtain
  # the hosts and TXT options.
  #
  # @param remaining [String] The portion of the URI pertaining to the
  #   authentication credentials and the hosts.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#140
  def parse!(remaining); end

  # Parses the TXT record options into a hash and adds the options to set of all URI options
  # parsed.
  #
  # @param string [String] The concatenated TXT options.
  # @raise [Mongo::Error::InvalidTXTRecord] If the TXT record does not fit the expected form
  #   or the option specified is not a valid TXT option.
  # @return [Hash] The parsed TXT options.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#217
  def parse_txt_options!(string); end

  # Raises an InvalidURI error.
  #
  # @param details [String] A detailed error message.
  # @raise [Mongo::Error::InvalidURI]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#120
  def raise_invalid_error!(details); end

  # Gets the SRV resolver.
  #
  # @return [Mongo::Srv::Resolver]
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#127
  def resolver; end

  # Gets the MongoDB SRV URI scheme.
  #
  # @return [String] The MongoDB SRV URI scheme.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#111
  def scheme; end

  # Validates the hostname used in an SRV URI.
  #
  # The hostname cannot include a port.
  #
  # The hostname must not begin with a dot, end with a dot, or have
  # consecutive dots. The hostname must have a minimum of 3 total
  # components (foo.bar.tld).
  #
  # Raises Error::InvalidURI if validation fails.
  #
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#173
  def validate_srv_hostname(hostname); end

  # @since 2.5.0
  #
  # source://mongo//lib/mongo/uri/srv_protocol.rb#230
  def validate_uri_options!; end
end

# @deprecated
# @return [String] DOT_PARTITION The '.' character used to delineate the parts of a
#   hostname.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#80
Mongo::URI::SRVProtocol::DOT_PARTITION = T.let(T.unsafe(nil), String)

# @return [String] FORMAT The expected SRV URI format.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#106
Mongo::URI::SRVProtocol::FORMAT = T.let(T.unsafe(nil), String)

# @deprecated
# @return [String] INVALID_DOMAIN Error message format string indicating that the domain name
#   of the hostname does not fit the expected form.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#98
Mongo::URI::SRVProtocol::INVALID_DOMAIN = T.let(T.unsafe(nil), String)

# @return [String] INVALID_HOST Error message format string indicating that the hostname in
#   in the URI does not fit the expected form.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#87
Mongo::URI::SRVProtocol::INVALID_HOST = T.let(T.unsafe(nil), String)

# @return [String] INVALID_PORT Error message format string indicating that a port was
#   included with an SRV hostname.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#92
Mongo::URI::SRVProtocol::INVALID_PORT = T.let(T.unsafe(nil), String)

# @return [String] NO_SRV_RECORDS Error message format string indicating that no SRV records
#   were found.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#103
Mongo::URI::SRVProtocol::NO_SRV_RECORDS = T.let(T.unsafe(nil), String)

# @return [Array<String>] VALID_TXT_OPTIONS The valid options for a TXT record to specify.
# @since 2.5.0
#
# source://mongo//lib/mongo/uri/srv_protocol.rb#83
Mongo::URI::SRVProtocol::VALID_TXT_OPTIONS = T.let(T.unsafe(nil), Array)

# Error details for a non-urlencoded auth database name.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#165
Mongo::URI::UNESCAPED_DATABASE = T.let(T.unsafe(nil), String)

# Error details for a non-urlencoded unix socket path.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#160
Mongo::URI::UNESCAPED_UNIX_SOCKET = T.let(T.unsafe(nil), String)

# Error details for an non-urlencoded user name or password.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#155
Mongo::URI::UNESCAPED_USER_PWD = T.let(T.unsafe(nil), String)

# Unix socket suffix.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#98
Mongo::URI::UNIX_SOCKET = T.let(T.unsafe(nil), Regexp)

# Unsafe characters that must be urlencoded.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#88
Mongo::URI::UNSAFE = T.let(T.unsafe(nil), Regexp)

# The character delimiting options.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#118
Mongo::URI::URI_OPTS_DELIM = T.let(T.unsafe(nil), String)

# The character delimiting an option and its value.
#
# @since 2.1.0
#
# source://mongo//lib/mongo/uri.rb#129
Mongo::URI::URI_OPTS_VALUE_DELIM = T.let(T.unsafe(nil), String)

# @api private
#
# source://mongo//lib/mongo/utils.rb#21
module Mongo::Utils
  private

  # @api private
  #
  # source://mongo//lib/mongo/utils.rb#72
  def camelize(sym); end

  # @api private
  # @option opts
  #
  # source://mongo//lib/mongo/utils.rb#50
  def excerpt_backtrace(exc, **opts); end

  # This function should be used if you need to measure time.
  #
  # @api private
  # @example Calculate elapsed time.
  #   starting = Utils.monotonic_time
  #   # do something time consuming
  #   ending = Utils.monotonic_time
  #   puts "It took #{(ending - starting).to_i} seconds"
  # @return [Float] seconds according to monotonic clock
  # @see https://blog.dnsimple.com/2018/03/elapsed-time-with-ruby-the-right-way/
  #
  # source://mongo//lib/mongo/utils.rb#101
  def monotonic_time; end

  # Stringifies the keys in the provided hash and converts underscore
  # style keys to camel case style keys.
  #
  # @api private
  #
  # source://mongo//lib/mongo/utils.rb#68
  def shallow_camelize_keys(hash); end

  # Symbolizes the keys in the provided hash.
  #
  # @api private
  #
  # source://mongo//lib/mongo/utils.rb#62
  def shallow_symbolize_keys(hash); end

  # @api private
  # @note server_api must have symbol keys or be a BSON::Document.
  #
  # source://mongo//lib/mongo/utils.rb#77
  def transform_server_api(server_api); end

  # @api private
  # @option opts
  # @option opts
  # @option opts
  #
  # source://mongo//lib/mongo/utils.rb#40
  def warn_bg_exception(msg, exc, **opts); end

  class << self
    # @api private
    #
    # source://mongo//lib/mongo/utils.rb#72
    def camelize(sym); end

    # @api private
    # @option opts
    #
    # source://mongo//lib/mongo/utils.rb#50
    def excerpt_backtrace(exc, **opts); end

    # This function should be used if you need to measure time.
    #
    # @api private
    # @example Calculate elapsed time.
    #   starting = Utils.monotonic_time
    #   # do something time consuming
    #   ending = Utils.monotonic_time
    #   puts "It took #{(ending - starting).to_i} seconds"
    # @return [Float] seconds according to monotonic clock
    # @see https://blog.dnsimple.com/2018/03/elapsed-time-with-ruby-the-right-way/
    #
    # source://mongo//lib/mongo/utils.rb#101
    def monotonic_time; end

    # Stringifies the keys in the provided hash and converts underscore
    # style keys to camel case style keys.
    #
    # @api private
    #
    # source://mongo//lib/mongo/utils.rb#68
    def shallow_camelize_keys(hash); end

    # Symbolizes the keys in the provided hash.
    #
    # @api private
    #
    # source://mongo//lib/mongo/utils.rb#62
    def shallow_symbolize_keys(hash); end

    # @api private
    # @note server_api must have symbol keys or be a BSON::Document.
    #
    # source://mongo//lib/mongo/utils.rb#77
    def transform_server_api(server_api); end

    # @api private
    # @option opts
    # @option opts
    # @option opts
    #
    # source://mongo//lib/mongo/utils.rb#40
    def warn_bg_exception(msg, exc, **opts); end
  end
end

# @api private
#
# source://mongo//lib/mongo/utils.rb#23
class Mongo::Utils::LocalLogger
  include ::Mongo::Loggable

  # @api private
  # @return [LocalLogger] a new instance of LocalLogger
  #
  # source://mongo//lib/mongo/utils.rb#26
  def initialize(**opts); end

  # @api private
  #
  # source://mongo//lib/mongo/utils.rb#30
  def options; end
end

# The current version of the driver.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/version.rb#23
Mongo::VERSION = T.let(T.unsafe(nil), String)

# Base module for all write concern specific behavior.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern/base.rb#19
module Mongo::WriteConcern
  extend ::Mongo::WriteConcern

  # Create a write concern object for the provided options.
  #
  # If options are nil, returns nil.
  #
  # @example Get a write concern.
  #   Mongo::WriteConcern.get(:w => 1)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options to instantiate with.
  # @raise [Error::InvalidWriteConcern] If the options are invalid.
  # @return [nil | Unacknowledged | Acknowledged] The appropriate concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern.rb#88
  def get(options); end
end

# An acknowledged write concern provides a get last error command with the
# appropriate options on each write operation.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern/acknowledged.rb#25
class Mongo::WriteConcern::Acknowledged < ::Mongo::WriteConcern::Base
  # Is this write concern acknowledged.
  #
  # @example Whether this write concern object is acknowledged.
  #   write_concern.acknowledged?
  # @return [true, false] Whether this write concern is acknowledged.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/write_concern/acknowledged.rb#48
  def acknowledged?; end

  # Get the get last error command for the concern.
  #
  # @example Get the gle command.
  #   acknowledged.get_last_error
  # @return [Hash] The gle command.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern/acknowledged.rb#34
  def get_last_error; end

  # Get a human-readable string representation of an acknowledged write concern.
  #
  # @example Inspect the write concern.
  #   write_concern.inspect
  # @return [String] A string representation of an acknowledged write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern/acknowledged.rb#60
  def inspect; end
end

# Defines common behavior for write concerns.
#
# @since 2.7.0
#
# source://mongo//lib/mongo/write_concern/base.rb#24
class Mongo::WriteConcern::Base
  # Instantiate a new write concern given the options.
  #
  # @api private
  # @example Instantiate a new write concern mode.
  #   Mongo::WriteConcern::Acknowledged.new(:w => 1)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] The options to instantiate with.
  # @return [Base] a new instance of Base
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern/base.rb#48
  def initialize(options); end

  # @return [Hash] The write concern options.
  # @since 2.7.0
  #
  # source://mongo//lib/mongo/write_concern/base.rb#27
  def options; end
end

# The default write concern is to acknowledge on a single server.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#63
Mongo::WriteConcern::DEFAULT = T.let(T.unsafe(nil), Hash)

# The file sync write concern.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#46
Mongo::WriteConcern::FSYNC = T.let(T.unsafe(nil), Symbol)

# The GLE command name.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#58
Mongo::WriteConcern::GET_LAST_ERROR = T.let(T.unsafe(nil), Symbol)

# The journal write concern.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#40
Mongo::WriteConcern::J = T.let(T.unsafe(nil), Symbol)

# An unacknowledged write concern will provide no error on write outside of
# network and connection exceptions.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern/unacknowledged.rb#25
class Mongo::WriteConcern::Unacknowledged < ::Mongo::WriteConcern::Base
  # Is this write concern acknowledged.
  #
  # @example Whether this write concern object is acknowledged.
  #   write_concern.acknowledged?
  # @return [true, false] Whether this write concern is acknowledged.
  # @since 2.5.0
  #
  # source://mongo//lib/mongo/write_concern/unacknowledged.rb#51
  def acknowledged?; end

  # Get the gle command for an unacknowledged write.
  #
  # @example Get the gle command.
  #   unacknowledged.get_last_error
  # @return [nil] The noop.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern/unacknowledged.rb#39
  def get_last_error; end

  # Get a human-readable string representation of an unacknowledged write concern.
  #
  # @example Inspect the write concern.
  #   write_concern.inspect
  # @return [String] A string representation of an unacknowledged write concern.
  # @since 2.0.0
  #
  # source://mongo//lib/mongo/write_concern/unacknowledged.rb#63
  def inspect; end
end

# The noop constant for the gle.
#
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern/unacknowledged.rb#29
Mongo::WriteConcern::Unacknowledged::NOOP = T.let(T.unsafe(nil), T.untyped)

# The number of servers write concern.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#34
Mongo::WriteConcern::W = T.let(T.unsafe(nil), Symbol)

# The wtimeout write concern.
#
# @deprecated
# @since 2.0.0
#
# source://mongo//lib/mongo/write_concern.rb#52
Mongo::WriteConcern::WTIMEOUT = T.let(T.unsafe(nil), Symbol)

# Patch for allowing deprecated symbols to be used.
#
# @since 2.2.1
#
# source://mongo//lib/mongo/bson.rb#21
class Symbol
  include ::Comparable

  # Overrides the default BSON type to use the symbol type instead of a
  # string type.
  #
  # @example Get the bson type.
  #   :test.bson_type
  # @return [String] The character 14.
  # @since 2.2.1
  #
  # source://mongo//lib/mongo/bson.rb#32
  def bson_type; end
end

# @api private
module UnicodeNormalize; end
