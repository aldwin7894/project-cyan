# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kodachroma` gem.
# Please instead update this file by running `bin/tapioca gem kodachroma`.


# The main module.
#
# source://kodachroma//lib/kodachroma/version.rb#2
module Kodachroma
  class << self
    # Defines a custom palette for use by {Color#palette}. Uses a DSL inside
    # `block` that mirrors the methods in {Color::Modifiers}.
    #
    # @example
    #   'red'.paint.palette.respond_to? :my_palette #=> false
    #
    #   Kodachroma.define_palette :my_palette do
    #   spin 60
    #   spin 120
    #   spin 240
    #   end
    #
    #   'red'.paint.palette.respond_to? :my_palette #=> true
    # @param name [Symbol, String] the name of the custom palette
    # @param block [Proc] the palette definition block
    # @raise [Errors::PaletteDefinedError] if the palette is already defined
    # @return [Symbol, String] the name of the custom palette
    #
    # source://kodachroma//lib/kodachroma.rb#111
    def define_palette(name, &block); end

    # Returns the hexadecimal string representation of a named color and nil
    # if no match is found. Favors 3-character hexadecimal if possible.
    #
    # @example
    #   Kodachroma.hex_from_name('red')       #=> 'f00'
    #   Kodachroma.hex_from_name('aliceblue') #=> 'f0f8ff'
    #   Kodachroma.hex_from_name('foo')       #=> nil
    # @param name [String] the color name
    # @return [String, nil] the color as a string hexadecimal or nil
    #
    # source://kodachroma//lib/kodachroma.rb#74
    def hex_from_name(name); end

    # Returns the color name of a hexadecimal color if available and nil if no
    # match is found. Requires 3-character hexadecimal input for applicable
    # colors.
    #
    # @example
    #   Kodachroma.name_from_hex('f00')    #=> 'red'
    #   Kodachroma.name_from_hex('f0f8ff') #=> 'aliceblue'
    #   Kodachroma.name_from_hex('123123') #=> nil
    # @param hex [String] the hexadecimal color
    # @return [String, nil] the color name or nil
    #
    # source://kodachroma//lib/kodachroma.rb#89
    def name_from_hex(hex); end

    # Returns a new instance of color. Supports hexadecimal, rgb, rgba, hsl,
    # hsla, hsv, hsva, and named color formats.
    #
    # @api public
    # @example
    #   Kodachroma.paint('red')
    #   Kodachroma.paint('#f00')
    #   Kodachroma.paint('#ff0000')
    #   Kodachroma.paint('rgb(255, 0, 0)')
    #   Kodachroma.paint('hsl(0, 100%, 50%)')
    #   Kodachroma.paint('hsv(0, 100%, 100%)')
    # @param input [String] the color
    # @return [Color] an instance of {Color}
    #
    # source://kodachroma//lib/kodachroma.rb#60
    def paint(input); end
  end
end

# The main class to represent colors.
#
# source://kodachroma//lib/kodachroma/color/attributes.rb#3
class Kodachroma::Color
  include ::Kodachroma::Color::Attributes
  include ::Kodachroma::Color::Serializers
  include ::Kodachroma::Color::Modifiers
  include ::Kodachroma::Helpers::Bounders

  # @param input [String, ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
  # @param format [Symbol] the color mode format
  # @return [Color] a new instance of Color
  #
  # source://kodachroma//lib/kodachroma/color.rb#12
  def initialize(input, format = T.unsafe(nil)); end

  # Returns true if both are equal in value.
  #
  # @example
  #   red = 'red'.paint
  #   blue = 'blue'.paint
  #
  #   red == red          #=> true
  #   red == blue         #=> false
  #   red == '#f00'.paint #=> true
  # @param other [Color]
  # @return [true, false]
  #
  # source://kodachroma//lib/kodachroma/color.rb#60
  def ==(other); end

  # Returns the complementary color.
  #
  # @example
  #   'red'.paint.complement #=> cyan
  # @return [Color] the complementary color
  #
  # source://kodachroma//lib/kodachroma/color.rb#70
  def complement; end

  # Defines a custom palette and immediately returns it. Uses a DSL inside
  # `block` that mirrors the methods in {Color::Modifiers}.
  #
  # @example
  #   'red'.paint.custom_palette do
  #   spin 60
  #   spin 180
  #   end
  #   #=> [red, yellow, cyan]
  # @param block [Proc] the palette definition block
  # @return [Array<Color>] palette array of colors
  #
  # source://kodachroma//lib/kodachroma/color.rb#98
  def custom_palette(&block); end

  # Returns true if `self` is equal to `other` and they're both instances of
  # {Color}.
  #
  # @example
  #   red = 'red'.paint
  #   blue = 'blue'.paint
  #
  #   red.eql? red          #=> true
  #   red.eql? blue         #=> false
  #   red.eql? '#f00'.paint #=> true
  # @param other [Color]
  # @return [true, false]
  #
  # source://kodachroma//lib/kodachroma/color.rb#44
  def eql?(other); end

  # Returns self. Useful for ducktyping situations with {String#paint}.
  #
  # @example
  #   red = 'red'.paint
  #
  #   red.paint            #=> red
  #   red.paint.equal? red #=> true
  # @return [self]
  #
  # source://kodachroma//lib/kodachroma/color.rb#27
  def paint; end

  # Returns an instance of {Harmonies} from which to call a palette method.
  #
  # @example
  #   'red'.paint.palette #=> #<Kodachroma::Harmonies:0x007faf6b9f9148 @color=red>
  # @return [Harmonies]
  #
  # source://kodachroma//lib/kodachroma/color.rb#82
  def palette; end

  private

  # source://kodachroma//lib/kodachroma/color.rb#108
  def generate_rgb_and_format(input); end

  # source://kodachroma//lib/kodachroma/color.rb#104
  def to_2char_hex(n); end
end

# Attribute methods for {Color}.
#
# source://kodachroma//lib/kodachroma/color/attributes.rb#5
module Kodachroma::Color::Attributes
  # Returns the alpha channel value.
  #
  # @example
  #   'red'.paint.alpha                #=> 1.0
  #   'rgba(0, 0, 0, 0.5)'.paint.alpha #=> 0.5
  # @return [Float]
  #
  # source://kodachroma//lib/kodachroma/color/attributes.rb#37
  def alpha; end

  # Calculates the brightness.
  #
  # @example
  #   'red'.paint.brightness    #=> 76.245
  #   'yellow'.paint.brightness #=> 225.93
  # @return [Float]
  #
  # source://kodachroma//lib/kodachroma/color/attributes.rb#48
  def brightness; end

  # Determines if the color is dark.
  #
  # @example
  #   'red'.paint.dark?    #=> true
  #   'yellow'.paint.dark? #=> false
  # @return [true, false]
  #
  # source://kodachroma//lib/kodachroma/color/attributes.rb#15
  def dark?; end

  # Returns the value of attribute format.
  #
  # source://kodachroma//lib/kodachroma/color/attributes.rb#6
  def format; end

  # Determines if the color is light.
  #
  # @example
  #   'red'.paint.light?    #=> false
  #   'yellow'.paint.light? #=> true
  # @return [true, false]
  #
  # source://kodachroma//lib/kodachroma/color/attributes.rb#26
  def light?; end

  private

  # source://kodachroma//lib/kodachroma/color/attributes.rb#54
  def rounded_alpha; end
end

# Methods that return a new modified {Color}.
#
# source://kodachroma//lib/kodachroma/color/modifiers.rb#5
module Kodachroma::Color::Modifiers
  # Brightens the color by the given `amount`.
  #
  # @example
  #   'red'.paint.brighten     #=> #ff1a1a
  #   'red'.paint.brighten(20) #=> #ff3333
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#28
  def brighten(amount = T.unsafe(nil)); end

  # Darkens the color by the given `amount`.
  #
  # @example
  #   'red'.paint.darken     #=> #cc0000
  #   'red'.paint.darken(20) #=> #990000
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#48
  def darken(amount = T.unsafe(nil)); end

  # Desaturates the color by the given `amount`.
  #
  # @example
  #   'red'.paint.desaturate     #=> #f20d0d
  #   'red'.paint.desaturate(20) #=> #e61919
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#62
  def desaturate(amount = T.unsafe(nil)); end

  # Converts the color to grayscale.
  #
  # @example
  #   'green'.paint.grayscale #=> #404040
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#88
  def grayscale; end

  # Converts the color to grayscale.
  #
  # @example
  #   'green'.paint.grayscale #=> #404040
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#88
  def greyscale; end

  # Lightens the color by the given `amount`.
  #
  # @example
  #   'red'.paint.lighten     #=> #ff3333
  #   'red'.paint.lighten(20) #=> #ff6666
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#14
  def lighten(amount = T.unsafe(nil)); end

  # Sets color opacity to the given 'amount'.
  #
  # @example
  #   'red'.paint.opacity(0.5)        #=> #ff0000
  #   'red'.paint.opacity(0.5).to_rgb #=> 'rgba(255, 0, 0, 0.5)'
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#102
  def opacity(amount); end

  # Saturates the color by the given `amount`.
  #
  # @example
  #   '#123'.paint.saturate     #=> #0e2236
  #   '#123'.paint.saturate(20) #=> #0a223a
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#76
  def saturate(amount = T.unsafe(nil)); end

  # Spins around the hue color wheel by `amount` in degrees.
  #
  # @example
  #   'red'.paint.spin(30) #=> #ff8000
  #   'red'.paint.spin(60) #=> yellow
  #   'red'.paint.spin(90) #=> #80ff00
  # @param amount [Fixnum]
  # @return [Color]
  #
  # source://kodachroma//lib/kodachroma/color/modifiers.rb#116
  def spin(amount); end
end

# Methods for serializing {Color} to different color mode string formats.
#
# source://kodachroma//lib/kodachroma/color/serializers.rb#5
module Kodachroma::Color::Serializers
  # Converts to an instance of {ColorModes::Hsl}
  #
  # @return [ColorModes::Hsl]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#131
  def hsl; end

  # Converts to an instance of {ColorModes::Hsv}
  #
  # @return [ColorModes::Hsv]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#125
  def hsv; end

  # Convert to a string based on the color format.
  #
  # @example
  #   'red'.paint.to_s             #=> 'red'
  #   'rgb(255, 0, 0)'.paint.to_s  #=> 'rgb(255, 0, 0)'
  #   '#f00'.paint.to_s            #=> '#f00'
  #   '#80ff0000'.paint.to_s(:rgb) #=> 'rgba(255, 0, 0, 0.5)'
  # @param format [Symbol] the color format
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#104
  def inspect(format = T.unsafe(nil)); end

  # Converts to an instance of {ColorModes::Rgb}
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#137
  def rgb; end

  # Convert to hexadecimal string.
  #
  # @example
  #   'red'.paint.to_hex                  #=> '#ff0000'
  #   'red'.paint.to_hex(true)            #=> '#f00'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_hex #=> '#ff0000'
  # @param allow_3 [true, false] output 3-character hexadecimal
  #   if possible
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#38
  def to_hex(allow_3 = T.unsafe(nil)); end

  # Convert to 8-character hexadecimal string. The highest order byte
  #   (left most hexadecimal pair represents the alpha value).
  #
  # @example
  #   'red'.paint.to_hex                  #=> '#ffff0000'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_hex #=> '#80ff0000'
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#50
  def to_hex8; end

  # Convert to hsl string.
  #
  # @example
  #   'red'.paint.to_hsl                  #=> 'hsl(0, 100%, 50%)'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_hsl #=> 'hsla(0, 100%, 50%, 0.5)'
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#24
  def to_hsl; end

  # Convert to hsv string.
  #
  # @example
  #   'red'.paint.to_hsv                  #=> 'hsv(0, 100%, 100%)'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_hsv #=> 'hsva(0, 100%, 100%, 0.5)'
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#13
  def to_hsv; end

  # Convert to named color if possible. If a color name can't be found, it
  # returns `'<unknown>'` or the hexadecimal string based on the value of
  # `hex_for_unknown`.
  #
  # @example
  #   'red'.paint.to_name                  #=> 'red'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_name #=> '<unknown>'
  #   '#00f'.paint.to_name                 #=> 'blue'
  #   '#123'.paint.to_name(true)           #=> '#112233'
  # @param hex_for_unknown [true, false] determine how unknown color names
  #   should be returned
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#80
  def to_name(hex_for_unknown = T.unsafe(nil)); end

  # Convert to rgb string.
  #
  # @example
  #   'red'.paint.to_rgb                  #=> 'rgb(255, 0, 0)'
  #   'rgba(255, 0, 0, 0.5)'.paint.to_rgb #=> 'rgb(255, 0, 0, 0.5)'
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#61
  def to_rgb; end

  # Convert to a string based on the color format.
  #
  # @example
  #   'red'.paint.to_s             #=> 'red'
  #   'rgb(255, 0, 0)'.paint.to_s  #=> 'rgb(255, 0, 0)'
  #   '#f00'.paint.to_s            #=> '#f00'
  #   '#80ff0000'.paint.to_s(:rgb) #=> 'rgba(255, 0, 0, 0.5)'
  # @param format [Symbol] the color format
  # @return [String]
  #
  # source://kodachroma//lib/kodachroma/color/serializers.rb#104
  def to_s(format = T.unsafe(nil)); end

  private

  # source://kodachroma//lib/kodachroma/color/serializers.rb#141
  def to_basic_hex(allow_3 = T.unsafe(nil)); end

  # source://kodachroma//lib/kodachroma/color/serializers.rb#153
  def to_basic_hex8; end

  # source://kodachroma//lib/kodachroma/color/serializers.rb#162
  def to_hs(third); end

  # source://kodachroma//lib/kodachroma/color/serializers.rb#175
  def with_alpha(mode, middle); end
end

# source://kodachroma//lib/kodachroma/color_modes.rb#3
module Kodachroma::ColorModes
  class << self
    private

    # Builds a new color mode class.
    #
    # @param name [String] the class name
    # @param attrs [Array<Symbol>] the instance attribute names
    #
    # source://kodachroma//lib/kodachroma/color_modes.rb#32
    def build(name, *attrs); end
  end
end

# source://kodachroma//lib/kodachroma/color_modes.rb#34
class Kodachroma::ColorModes::Hsl
  # @param h [Numeric]
  # @param s [Numeric]
  # @param l [Numeric]
  # @param a [Numeric]
  # @return [Hsl] a new instance of Hsl
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#37
  def initialize(h, s, l, a = T.unsafe(nil)); end

  # Returns the value of attribute a.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a; end

  # Sets the attribute a
  #
  # @param value the value to set the attribute a to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a=(_arg0); end

  # Returns the value of attribute h.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def h; end

  # Sets the attribute h
  #
  # @param value the value to set the attribute h to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def h=(_arg0); end

  # Returns the value of attribute l.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def l; end

  # Sets the attribute l
  #
  # @param value the value to set the attribute l to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def l=(_arg0); end

  # Returns the value of attribute s.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def s; end

  # Sets the attribute s
  #
  # @param value the value to set the attribute s to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def s=(_arg0); end

  # Returns the values `h`, `s`, `l`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_a; end

  # Returns the values `h`, `s`, `l`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_ary; end
end

# source://kodachroma//lib/kodachroma/color_modes.rb#34
class Kodachroma::ColorModes::Hsv
  # @param h [Numeric]
  # @param s [Numeric]
  # @param v [Numeric]
  # @param a [Numeric]
  # @return [Hsv] a new instance of Hsv
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#37
  def initialize(h, s, v, a = T.unsafe(nil)); end

  # Returns the value of attribute a.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a; end

  # Sets the attribute a
  #
  # @param value the value to set the attribute a to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a=(_arg0); end

  # Returns the value of attribute h.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def h; end

  # Sets the attribute h
  #
  # @param value the value to set the attribute h to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def h=(_arg0); end

  # Returns the value of attribute s.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def s; end

  # Sets the attribute s
  #
  # @param value the value to set the attribute s to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def s=(_arg0); end

  # Returns the values `h`, `s`, `v`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_a; end

  # Returns the values `h`, `s`, `v`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_ary; end

  # Returns the value of attribute v.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def v; end

  # Sets the attribute v
  #
  # @param value the value to set the attribute v to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def v=(_arg0); end
end

# source://kodachroma//lib/kodachroma/color_modes.rb#34
class Kodachroma::ColorModes::Rgb
  # @param r [Numeric]
  # @param g [Numeric]
  # @param b [Numeric]
  # @param a [Numeric]
  # @return [Rgb] a new instance of Rgb
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#37
  def initialize(r, g, b, a = T.unsafe(nil)); end

  # Returns the value of attribute a.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a; end

  # Sets the attribute a
  #
  # @param value the value to set the attribute a to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def a=(_arg0); end

  # Returns the value of attribute b.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def b; end

  # Sets the attribute b
  #
  # @param value the value to set the attribute b to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def b=(_arg0); end

  # Returns the value of attribute g.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def g; end

  # Sets the attribute g
  #
  # @param value the value to set the attribute g to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def g=(_arg0); end

  # Returns the value of attribute r.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def r; end

  # Sets the attribute r
  #
  # @param value the value to set the attribute r to.
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#35
  def r=(_arg0); end

  # Returns the values `r`, `g`, `b`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_a; end

  # Returns the values `r`, `g`, `b`, and `a` as an array.
  #
  # @return [Array<Numeric>]
  #
  # source://kodachroma//lib/kodachroma/color_modes.rb#41
  def to_ary; end
end

# source://kodachroma//lib/kodachroma/converters/base.rb#3
module Kodachroma::Converters; end

# Base class for converting one color mode to another.
#
# @abstract
#
# source://kodachroma//lib/kodachroma/converters/base.rb#6
class Kodachroma::Converters::Base
  include ::Kodachroma::Helpers::Bounders

  # @param input [ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
  # @return [Base]
  #
  # source://kodachroma//lib/kodachroma/converters/base.rb#11
  def initialize(input); end

  class << self
    # @param hsl [ColorModes::Hsl]
    # @return [ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
    #
    # source://kodachroma//lib/kodachroma/converters/base.rb#23
    def convert_hsl(hsl); end

    # @param hsv [ColorModes::Hsv]
    # @return [ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
    #
    # source://kodachroma//lib/kodachroma/converters/base.rb#29
    def convert_hsv(hsv); end

    # @param rgb [ColorModes::Rgb]
    # @return [ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
    #
    # source://kodachroma//lib/kodachroma/converters/base.rb#17
    def convert_rgb(rgb); end
  end
end

# Class to convert a color mode to {ColorModes::Hsl}.
#
# source://kodachroma//lib/kodachroma/converters/hsl_converter.rb#5
class Kodachroma::Converters::HslConverter < ::Kodachroma::Converters::Base
  # Returns @input because it's the same color mode.
  #
  # @return [ColorModes::Hsl]
  #
  # source://kodachroma//lib/kodachroma/converters/hsl_converter.rb#44
  def convert_hsl; end

  # Convert hsv to hsl.
  #
  # @return [ColorModes::Hsl]
  #
  # source://kodachroma//lib/kodachroma/converters/hsl_converter.rb#50
  def convert_hsv; end

  # Convert rgb to hsl.
  #
  # @return [ColorModes::Hsl]
  #
  # source://kodachroma//lib/kodachroma/converters/hsl_converter.rb#8
  def convert_rgb; end
end

# Class to convert a color mode to {ColorModes::Hsl}.
#
# source://kodachroma//lib/kodachroma/converters/hsv_converter.rb#5
class Kodachroma::Converters::HsvConverter < ::Kodachroma::Converters::Base
  # Convert hsl to hsv.
  #
  # @return [ColorModes::Hsv]
  #
  # source://kodachroma//lib/kodachroma/converters/hsv_converter.rb#38
  def convert_hsl; end

  # Returns @input because it's the same color mode.
  #
  # @return [ColorModes::Hsv]
  #
  # source://kodachroma//lib/kodachroma/converters/hsv_converter.rb#44
  def convert_hsv; end

  # Convert rgb to hsv.
  #
  # @return [ColorModes::Hsv]
  #
  # source://kodachroma//lib/kodachroma/converters/hsv_converter.rb#8
  def convert_rgb; end
end

# Class to convert a color mode to {ColorModes::Rgb}.
#
# source://kodachroma//lib/kodachroma/converters/rgb_converter.rb#5
class Kodachroma::Converters::RgbConverter < ::Kodachroma::Converters::Base
  # Convert hsl to rgb.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/converters/rgb_converter.rb#14
  def convert_hsl; end

  # Convert hsv to rgb.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/converters/rgb_converter.rb#36
  def convert_hsv; end

  # Returns @input because it's the same color mode.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/converters/rgb_converter.rb#8
  def convert_rgb; end

  private

  # source://kodachroma//lib/kodachroma/converters/rgb_converter.rb#59
  def hue_to_rgb(p, q, t); end
end

# source://kodachroma//lib/kodachroma/errors.rb#3
module Kodachroma::Errors; end

# source://kodachroma//lib/kodachroma/errors.rb#4
class Kodachroma::Errors::PaletteDefinedError < ::StandardError; end

# source://kodachroma//lib/kodachroma/errors.rb#6
class Kodachroma::Errors::UnrecognizedColor < ::StandardError; end

# Class to hold all palette methods.
#
# source://kodachroma//lib/kodachroma/harmonies.rb#4
class Kodachroma::Harmonies
  # @param color [Color]
  # @return [Harmonies] a new instance of Harmonies
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#6
  def initialize(color); end

  # Generate an analogous palette.
  #
  # @example
  #   'red'.paint.palette.analogous                        #=> [red, #ff0066, #ff0033, red, #ff3300, #ff6600]
  #   'red'.paint.palette.analogous(as: :hex)              #=> ['#f00', '#f06', '#f03', '#f00', '#f30', '#f60']
  #   'red'.paint.palette.analogous(size: 3)               #=> [red, #ff001a, #ff1a00]
  #   'red'.paint.palette.analogous(size: 3, slice_by: 60) #=> [red, #ff000d, #ff0d00]
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#80
  def analogous(options = T.unsafe(nil)); end

  # Generate a complement palette.
  #
  # @example
  #   'red'.paint.palette.complement            #=> [red, cyan]
  #   'red'.paint.palette.complement(as: :name) #=> ['red', 'cyan']
  #   'red'.paint.palette.complement(as: :hex)  #=> ['#ff0000', '#00ffff']
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#20
  def complement(options = T.unsafe(nil)); end

  # Generate a monochromatic palette.
  #
  # @example
  #   'red'.paint.palette.monochromatic           #=> [red, #2a0000, #550000, maroon, #aa0000, #d40000]
  #   'red'.paint.palette.monochromatic(as: :hex) #=> ['#ff0000', '#2a0000', '#550000', '#800000', '#aa0000', '#d40000']
  #   'red'.paint.palette.monochromatic(size: 3)  #=> [red, #550000, #aa0000]
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#107
  def monochromatic(options = T.unsafe(nil)); end

  # Generate a split complement palette.
  #
  # @example
  #   'red'.paint.palette.split_complement            #=> [red, #ccff00, #0066ff]
  #   'red'.paint.palette.split_complement(as: :name) #=> ['red', '#ccff00', '#0066ff']
  #   'red'.paint.palette.split_complement(as: :hex)  #=> ['#ff0000', '#ccff00', '#0066ff']
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#62
  def split_complement(options = T.unsafe(nil)); end

  # Generate a tetrad palette.
  #
  # @example
  #   'red'.paint.palette.tetrad            #=> [red, #80ff00, cyan, #7f00ff]
  #   'red'.paint.palette.tetrad(as: :name) #=> ['red', '#80ff00', 'cyan', '#7f00ff']
  #   'red'.paint.palette.tetrad(as: :hex)  #=> ['#ff0000', '#80ff00', '#00ffff', '#7f00ff']
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#48
  def tetrad(options = T.unsafe(nil)); end

  # Generate a triad palette.
  #
  # @example
  #   'red'.paint.palette.triad            #=> [red, lime, blue]
  #   'red'.paint.palette.triad(as: :name) #=> ['red', 'lime', 'blue']
  #   'red'.paint.palette.triad(as: :hex)  #=> ['#ff0000', '#00ff00', '#0000ff']
  # @option options
  # @param options [Hash]
  # @return [Array<Color>, Array<String>] depending on presence of `options[:as]`
  #
  # source://kodachroma//lib/kodachroma/harmonies.rb#34
  def triad(options = T.unsafe(nil)); end

  private

  # source://kodachroma//lib/kodachroma/harmonies.rb#129
  def hsl_map(degrees, options); end

  # source://kodachroma//lib/kodachroma/harmonies.rb#124
  def with_reformat(palette, as); end
end

# source://kodachroma//lib/kodachroma/helpers/bounders.rb#3
module Kodachroma::Helpers; end

# source://kodachroma//lib/kodachroma/helpers/bounders.rb#4
module Kodachroma::Helpers::Bounders
  # Bounds a value `n` that is from `0` to `max` to `0` to `1`.
  #
  # @param n [Numeric, String]
  # @param max [Fixnum]
  # @return [Float]
  #
  # source://kodachroma//lib/kodachroma/helpers/bounders.rb#10
  def bound01(n, max); end

  # Ensure alpha value `a` is between `0` and `1`.
  #
  # @param a [Numeric, String] alpha value
  # @return [Numeric]
  #
  # source://kodachroma//lib/kodachroma/helpers/bounders.rb#24
  def bound_alpha(a); end

  # Ensures a number between `0` and `1`. Returns `n` if it is between `0`
  #   and `1`.
  #
  # @param n [Numeric]
  # @return [Numeric]
  #
  # source://kodachroma//lib/kodachroma/helpers/bounders.rb#35
  def clamp01(n); end

  # Converts `n` to a percentage type value.
  #
  # @param n [Numeric, String]
  # @return [String, Float]
  #
  # source://kodachroma//lib/kodachroma/helpers/bounders.rb#43
  def to_percentage(n); end
end

# source://kodachroma//lib/kodachroma/named_colors.rb#155
Kodachroma::INVERTED_NAMED_COLORS = T.let(T.unsafe(nil), Hash)

# source://kodachroma//lib/kodachroma/named_colors.rb#3
Kodachroma::NAMED_COLORS = T.let(T.unsafe(nil), Hash)

# Class internally used to build custom palettes from {Kodachroma.define_palette}.
#
# source://kodachroma//lib/kodachroma/palette_builder.rb#4
class Kodachroma::PaletteBuilder
  # @param block [Proc] the palette definition block
  # @return [PaletteBuilder] a new instance of PaletteBuilder
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#15
  def initialize(&block); end

  # Build the custom palette
  #
  # @return [PaletteBuilder::PaletteEvaluator] lazy palette generator
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#21
  def build; end

  class << self
    # Wrapper to instantiate a new instance of {PaletteBuilder} and call its
    #   {PaletteBuilder#build} method.
    #
    # @param block [Proc] the palette definition block
    # @return [PaletteBuilder::PaletteEvaluator] lazy palette generator
    #
    # source://kodachroma//lib/kodachroma/palette_builder.rb#10
    def build(&block); end
  end
end

# Internal class for palette building DSL syntax.
#
# source://kodachroma//lib/kodachroma/palette_builder.rb#46
class Kodachroma::PaletteBuilder::PaletteBuilderDsl
  # @return [PaletteBuilderDsl] a new instance of PaletteBuilderDsl
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#49
  def initialize; end

  # Returns the value of attribute evaluator.
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#47
  def evaluator; end

  # source://kodachroma//lib/kodachroma/palette_builder.rb#53
  def method_missing(name, *args); end
end

# Internal class to represent color modification calls in the palette
# builder DSL definition syntax.
#
# source://kodachroma//lib/kodachroma/palette_builder.rb#61
class Kodachroma::PaletteBuilder::PaletteBuilderDsl::ColorCalls
  # @return [ColorCalls] a new instance of ColorCalls
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#64
  def initialize(name, args); end

  # Returns the value of attribute args.
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#62
  def args; end

  # source://kodachroma//lib/kodachroma/palette_builder.rb#68
  def evaluate(color); end

  # source://kodachroma//lib/kodachroma/palette_builder.rb#74
  def method_missing(name, *args); end

  # Returns the value of attribute name.
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#62
  def name; end
end

# Internal class for delaying evaluating a color to generate a
# final palette
#
# source://kodachroma//lib/kodachroma/palette_builder.rb#29
class Kodachroma::PaletteBuilder::PaletteEvaluator
  # @return [PaletteEvaluator] a new instance of PaletteEvaluator
  #
  # source://kodachroma//lib/kodachroma/palette_builder.rb#30
  def initialize; end

  # source://kodachroma//lib/kodachroma/palette_builder.rb#34
  def <<(conversion); end

  # source://kodachroma//lib/kodachroma/palette_builder.rb#38
  def evaluate(color); end
end

# Main module to generate an instance of {ColorModes::Rgb} from several
# possible inputs.
#
# source://kodachroma//lib/kodachroma/rgb_generator.rb#5
module Kodachroma::RgbGenerator
  class << self
    # Generates an instance of {ColorModes::Rgb} as well as color format
    #   symbol.
    #
    # @param input [String, ColorModes::Rgb, ColorModes::Hsl, ColorModes::Hsv]
    # @return [[ColorModes::Rgb, Symbol]]
    #
    # source://kodachroma//lib/kodachroma/rgb_generator.rb#12
    def generate_rgb_and_format(input); end

    private

    # source://kodachroma//lib/kodachroma/rgb_generator.rb#22
    def get_generator(input); end

    # source://kodachroma//lib/kodachroma/rgb_generator.rb#33
    def round(n); end
  end
end

# Base rgb generator class.
#
# @abstract
#
# source://kodachroma//lib/kodachroma/rgb_generator/base.rb#6
class Kodachroma::RgbGenerator::Base
  include ::Kodachroma::Helpers::Bounders
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#4
class Kodachroma::RgbGenerator::FromHexStringValues < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param r [String] red value
  # @param g [String] green value
  # @param b [String] blue value
  # @param a [String] alpha value
  # @return [FromHexStringValues] a new instance of FromHexStringValues
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#10
  def initialize(format, r, g, b, a = T.unsafe(nil)); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#20
  def generate; end

  class << self
    # Generates a {ColorModes::Rgb} from 3-character hexadecimal.
    #
    # @param format [Symbol] color format
    # @param r [String] red value
    # @param g [String] green value
    # @param b [String] blue value
    # @return [ColorModes::Rgb]
    #
    # source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#34
    def from_hex3(format, r, g, b); end

    # Generates a {ColorModes::Rgb} from 6-character hexadecimal.
    #
    # @param format [Symbol] color format
    # @param r [String] red value
    # @param g [String] green value
    # @param b [String] blue value
    # @return [ColorModes::Rgb]
    #
    # source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#45
    def from_hex6(format, r, g, b); end

    # Generates a {ColorModes::Rgb} from 8-character hexadecimal.
    #
    # @param format [Symbol] color format
    # @param r [String] red value
    # @param g [String] green value
    # @param b [String] blue value
    # @param a [String] alpha value
    # @return [ColorModes::Rgb]
    #
    # source://kodachroma//lib/kodachroma/rgb_generator/from_hex_string_values.rb#57
    def from_hex8(format, r, g, b, a); end
  end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_hsl.rb#4
class Kodachroma::RgbGenerator::FromHsl < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param hsl [ColorModes::Hsl]
  # @return [FromHsl] a new instance of FromHsl
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsl.rb#7
  def initialize(format, hsl); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsl.rb#14
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_hsl_values.rb#4
class Kodachroma::RgbGenerator::FromHslValues < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param h [String, Numeric] hue value
  # @param s [String, Numeric] saturation value
  # @param l [String, Numeric] lightness value
  # @param a [String, Numeric] alpha value
  # @return [FromHslValues] a new instance of FromHslValues
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsl_values.rb#10
  def initialize(format, h, s, l, a = T.unsafe(nil)); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsl_values.rb#20
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_hsv.rb#4
class Kodachroma::RgbGenerator::FromHsv < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param hsv [ColorModes::Hsv]
  # @return [FromHsv] a new instance of FromHsv
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsv.rb#7
  def initialize(format, hsv); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsv.rb#14
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_hsv_values.rb#4
class Kodachroma::RgbGenerator::FromHsvValues < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param h [String, Numeric] hue value
  # @param s [String, Numeric] saturation value
  # @param v [String, Numeric] value value
  # @param a [String, Numeric] alpha value
  # @return [FromHsvValues] a new instance of FromHsvValues
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsv_values.rb#10
  def initialize(format, h, s, v, a = T.unsafe(nil)); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_hsv_values.rb#20
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_rgb.rb#4
class Kodachroma::RgbGenerator::FromRgb < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param rgb [ColorModes::Rgb]
  # @return [FromRgb] a new instance of FromRgb
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_rgb.rb#7
  def initialize(format, rgb); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_rgb.rb#14
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_rgb_values.rb#4
class Kodachroma::RgbGenerator::FromRgbValues < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] color format
  # @param r [String, Numeric] red value
  # @param g [String, Numeric] green value
  # @param b [String, Numeric] blue value
  # @param a [String, Numeric] alpha value
  # @return [FromRgbValues] a new instance of FromRgbValues
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_rgb_values.rb#10
  def initialize(format, r, g, b, a = T.unsafe(nil)); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_rgb_values.rb#20
  def generate; end
end

# source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#4
class Kodachroma::RgbGenerator::FromString < ::Kodachroma::RgbGenerator::Base
  # @param format [Symbol] unused
  # @param input [String] input to parse
  # @return [FromString] a new instance of FromString
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#39
  def initialize(_format, input); end

  # Generates a {ColorModes::Rgb}.
  #
  # @return [ColorModes::Rgb]
  #
  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#45
  def generate; end

  private

  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#74
  def build_generator(args, class_name, builder, format); end

  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#51
  def get_generator; end

  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#84
  def matchers; end

  # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#80
  def normalize_input(input); end

  class << self
    # Returns the regex matchers and rgb generation classes for various
    # string color formats.
    #
    # @api private
    # @return [Hash<Symbol, Hash>]
    #
    # source://kodachroma//lib/kodachroma/rgb_generator/from_string.rb#10
    def matchers; end
  end
end

# source://kodachroma//lib/kodachroma/version.rb#3
Kodachroma::VERSION = T.let(T.unsafe(nil), String)
