# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `orm_adapter` gem.
# Please instead update this file by running `bin/tapioca gem orm_adapter`.


# source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#3
module Mongoid
  extend ::Mongoid::GlobalDiscriminatorKeyAssignment

  # source://mongoid/9.0.6/lib/mongoid/extensions/raw_value.rb#13
  def RawValue(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_bson5_decimal128(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_bson5_decimal128=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_bson5_decimal128?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_scopes_to_unset_default_scope(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_scopes_to_unset_default_scope=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def allow_scopes_to_unset_default_scope?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_name=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def app_name?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def around_callbacks_for_embeds(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def around_callbacks_for_embeds=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def around_callbacks_for_embeds?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def async_query_executor(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def async_query_executor=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def async_query_executor?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def background_indexing(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def background_indexing=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def background_indexing?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def belongs_to_required_by_default(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def belongs_to_required_by_default=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def belongs_to_required_by_default?(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#119
  def client(name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clients(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#77
  def configure(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def configured?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def connect_to(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#89
  def default_client; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def deregister_model(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def destructive_fields(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#99
  def disconnect_clients; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def discriminator_key(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def discriminator_key=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def discriminator_key?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def duplicate_fields_exception(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def duplicate_fields_exception=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def duplicate_fields_exception?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def global_executor_concurrency(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def global_executor_concurrency=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def global_executor_concurrency?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def immutable_ids(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def immutable_ids=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def immutable_ids?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_root_in_json(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_root_in_json=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_root_in_json?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_type_for_serialization(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_type_for_serialization=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include_type_for_serialization?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def join_contexts(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def join_contexts=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def join_contexts?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_persistence_context_behavior(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_persistence_context_behavior=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_persistence_context_behavior?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_readonly(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_readonly=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def legacy_readonly?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def load!(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def load_configuration(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def log_level=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def log_level?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map_big_decimal_to_decimal128(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map_big_decimal_to_decimal128=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map_big_decimal_to_decimal128?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def models(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def options=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def override_client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def override_database(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#134
  def persistence_context; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def preload_models(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def preload_models=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def preload_models?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def prevent_multiple_calls_of_embedded_callbacks(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def prevent_multiple_calls_of_embedded_callbacks=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def prevent_multiple_calls_of_embedded_callbacks?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def purge!(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raise_not_found_error(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raise_not_found_error=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raise_not_found_error?(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#109
  def reconnect_clients; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def register_model(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def running_with_passenger?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def scope_overwrite_exception(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def scope_overwrite_exception=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def scope_overwrite_exception?(*args, **_arg1, &block); end

  # source://mongoid/9.0.6/lib/mongoid.rb#142
  def storage_options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def time_zone(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def truncate!(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def use_utc(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def use_utc=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def use_utc?(*args, **_arg1, &block); end
end

# source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#4
module Mongoid::Document
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::API
  include ::ActiveModel::Model
  include ::ActiveModel::Serializers::JSON
  include ::Mongoid::Atomic
  include ::Mongoid::Changeable
  include ::Mongoid::Clients::StorageOptions
  include ::Mongoid::Clients::Options
  include ::Mongoid::Clients
  include ::Mongoid::CollectionConfigurable
  include ::Mongoid::Attributes::Nested
  include ::Mongoid::Attributes::Readonly
  include ::Mongoid::Attributes
  include ::Mongoid::Fields
  include ::Mongoid::Identifiable
  include ::Mongoid::Indexable
  include ::Mongoid::Matchable
  include ::Mongoid::Persistable::Creatable
  include ::Mongoid::Persistable::Deletable
  include ::Mongoid::Persistable::Destroyable
  include ::Mongoid::Persistable::Incrementable
  include ::Mongoid::Persistable::Logical
  include ::Mongoid::Persistable::Maxable
  include ::Mongoid::Persistable::Minable
  include ::Mongoid::Persistable::Multipliable
  include ::Mongoid::Persistable::Poppable
  include ::Mongoid::Persistable::Pullable
  include ::Mongoid::Persistable::Pushable
  include ::Mongoid::Persistable::Renamable
  include ::Mongoid::Persistable::Settable
  include ::Mongoid::Persistable::Unsettable
  include ::Mongoid::Persistable
  include ::Mongoid::Association::Embedded::Cyclic
  include ::Mongoid::Association::Referenced::AutoSave
  include ::Mongoid::Association::Referenced::CounterCache
  include ::Mongoid::Association::Accessors
  include ::Mongoid::Association::Depending
  include ::Mongoid::Association::Builders
  include ::Mongoid::Association::Macros
  include ::Mongoid::Association::Reflections
  include ::Mongoid::Association
  include ::Mongoid::Scopable
  include ::Mongoid::SearchIndexable
  include ::Mongoid::Selectable
  include ::Mongoid::Serializable
  include ::Mongoid::Shardable
  include ::Mongoid::Cacheable
  include ::Mongoid::Threaded::Lifecycle
  include ::Mongoid::Traversable
  include ::Mongoid::Validatable::Macros
  include ::Mongoid::Validatable
  include ::ActiveModel::Validations::Callbacks
  include ::Mongoid::Interceptable
  include ::Mongoid::Copyable
  include ::Mongoid::Equality
  include ::Mongoid::Encryptable
  include ::Mongoid::Composable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::Mongoid::Changeable::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::StorageOptions::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Options::ClassMethods
  mixes_in_class_methods ::Mongoid::Clients::Sessions::ClassMethods
  mixes_in_class_methods ::Mongoid::CollectionConfigurable::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Nested::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::Readonly::ClassMethods
  mixes_in_class_methods ::Mongoid::Attributes::ClassMethods
  mixes_in_class_methods ::Mongoid::Fields::ClassMethods
  mixes_in_class_methods ::Mongoid::Identifiable::ClassMethods
  mixes_in_class_methods ::Mongoid::Indexable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Creatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Deletable::ClassMethods
  mixes_in_class_methods ::Mongoid::Persistable::Destroyable::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::Syncable::ClassMethods
  mixes_in_class_methods ::Mongoid::Scopable::ClassMethods
  mixes_in_class_methods ::Mongoid::SearchIndexable::ClassMethods
  mixes_in_class_methods ::Mongoid::Shardable::ClassMethods
  mixes_in_class_methods ::Mongoid::Threaded::Lifecycle::ClassMethods
  mixes_in_class_methods ::Mongoid::Traversable::ClassMethods
  mixes_in_class_methods ::Mongoid::Traversable::DiscriminatorRetrieval
  mixes_in_class_methods ::Mongoid::Validatable::ClassMethods
  mixes_in_class_methods ::Mongoid::Validatable::Macros
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::Mongoid::Equality::ClassMethods
  mixes_in_class_methods ::Mongoid::Encryptable::ClassMethods
  mixes_in_class_methods ::Mongoid::Findable
  mixes_in_class_methods ::Mongoid::Document::ClassMethods
  mixes_in_class_methods ::Mongoid::Traversable::DiscriminatorAssignment

  # source://mongoid/9.0.6/lib/mongoid/document.rb#104
  def initialize(attrs = T.unsafe(nil), &block); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#30
  def __selected_fields; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#30
  def __selected_fields=(_arg0); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#186
  def _handle_callbacks_after_instantiation(execute_callbacks); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#136
  def as_document; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#151
  def becomes(klass); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#51
  def freeze; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#61
  def frozen?; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#75
  def hash; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#87
  def identity; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#166
  def internal_state=(state); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#114
  def model_name; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#31
  def new_record; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#124
  def to_key; end

  private

  # source://mongoid/9.0.6/lib/mongoid/document.rb#283
  def add_attributes_for_relation(name, meta); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#267
  def as_attributes; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#216
  def construct_document(attrs = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#310
  def internal_state; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#245
  def logger; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#334
  def mark_persisted_state_for_embedded_documents(new_record); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#255
  def model_key; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#300
  def mongoid_document_check!(klass); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#235
  def prepare_to_process_attributes; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#349
  def resolve_post_construction_callbacks(execute_callbacks); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#325
  def update_discriminator(key_was); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def aliased_associations; end
    def aliased_associations=(value); end
    def aliased_associations?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def discriminator_key; end
    def discriminator_key=(value); end
    def discriminator_key?; end
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def encrypt_metadata; end
    def encrypt_metadata=(value); end
    def encrypt_metadata?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
    def storage_options; end
    def storage_options=(value); end
    def storage_options?; end
    def stored_as_associations; end
    def stored_as_associations=(value); end
    def stored_as_associations?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def _declared_scopes; end
    def _declared_scopes=(value); end
    def _declared_scopes?; end
    def _validators; end
    def _validators?; end
    def aliased_associations; end
    def aliased_associations=(value); end
    def aliased_associations?; end
    def aliased_fields; end
    def aliased_fields=(value); end
    def aliased_fields?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def default_scoping; end
    def default_scoping=(value); end
    def default_scoping?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def encrypt_metadata; end
    def encrypt_metadata=(value); end
    def encrypt_metadata?; end
    def fields; end
    def fields=(value); end
    def fields?; end
    def include_root_in_json; end
    def include_root_in_json?; end
    def localized_fields; end
    def localized_fields=(value); end
    def localized_fields?; end
    def nested_attributes; end
    def nested_attributes=(value); end
    def nested_attributes?; end
    def param_delimiter=(value); end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def post_processed_defaults; end
    def post_processed_defaults=(value); end
    def post_processed_defaults?; end
    def pre_processed_defaults; end
    def pre_processed_defaults=(value); end
    def pre_processed_defaults?; end
    def readonly_attributes; end
    def readonly_attributes=(value); end
    def readonly_attributes?; end
    def relations; end
    def relations=(value); end
    def relations?; end
    def stored_as_associations; end
    def stored_as_associations=(value); end
    def stored_as_associations?; end
  end
end

# source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#5
module Mongoid::Document::ClassMethods
  include ::OrmAdapter::ToAdapter

  # source://mongoid/9.0.6/lib/mongoid/document.rb#463
  def _mongoid_clear_types; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#452
  def _types; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#441
  def construct_document(attrs = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#471
  def i18n_scope; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#386
  def instantiate(attrs = T.unsafe(nil), selected_fields = T.unsafe(nil), &block); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#410
  def instantiate_document(attrs = T.unsafe(nil), selected_fields = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#481
  def logger; end

  # source://mongoid/9.0.6/lib/mongoid/document.rb#367
  def with_callbacks(execute_callbacks); end
end

# source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#9
class Mongoid::Document::OrmAdapter < ::OrmAdapter::Base
  # get a list of column names for a given class
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#11
  def column_names; end

  # @see OrmAdapter::Base#create!
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#38
  def create!(attributes = T.unsafe(nil)); end

  # @see OrmAdapter::Base#destroy
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#43
  def destroy(object); end

  # @see OrmAdapter::Base#find_all
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#32
  def find_all(options = T.unsafe(nil)); end

  # @see OrmAdapter::Base#find_first
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#26
  def find_first(options = T.unsafe(nil)); end

  # @see OrmAdapter::Base#get
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#21
  def get(id); end

  # @see OrmAdapter::Base#get!
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#16
  def get!(id); end

  protected

  # converts and documents to ids
  #
  # source://orm_adapter//lib/orm_adapter/adapters/mongoid.rb#50
  def conditions_to_fields(conditions); end
end

# source://orm_adapter//lib/orm_adapter/base.rb#1
module OrmAdapter
  class << self
    # A collection of registered adapters
    #
    # source://orm_adapter//lib/orm_adapter.rb#7
    def adapters; end
  end
end

# source://orm_adapter//lib/orm_adapter/base.rb#2
class OrmAdapter::Base
  # @return [Base] a new instance of Base
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#17
  def initialize(klass); end

  # Get a list of column/property/field names
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#22
  def column_names; end

  # Create a model using attributes
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#72
  def create!(attributes = T.unsafe(nil)); end

  # Destroy an instance by passing in the instance itself.
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#77
  def destroy(object); end

  # Find all models, optionally matching conditions, and specifying order
  #
  # @raise [NotSupportedError]
  # @see OrmAdapter::Base#find_first for how to specify order and conditions
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#67
  def find_all(options = T.unsafe(nil)); end

  # Find the first instance, optionally matching conditions, and specifying order
  #
  # You can call with just conditions, providing a hash
  #
  #   User.to_adapter.find_first :name => "Fred", :age => 23
  #
  # Or you can specify :order, and :conditions as keys
  #
  #   User.to_adapter.find_first :conditions => {:name => "Fred", :age => 23}
  #   User.to_adapter.find_first :order => [:age, :desc]
  #   User.to_adapter.find_first :order => :name, :conditions => {:age => 18}
  #
  # When specifying :order, it may be
  # * a single arg e.g. <tt>:order => :name</tt>
  # * a single pair with :asc, or :desc as last, e.g. <tt>:order => [:name, :desc]</tt>
  # * an array of single args or pairs (with :asc or :desc as last), e.g. <tt>:order => [[:name, :asc], [:age, :desc]]</tt>
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#61
  def find_first(options = T.unsafe(nil)); end

  # Get an instance by id of the model. Returns nil if a model is not found.
  # This should comply with ActiveModel#to_key API, i.e.:
  #
  #   User.to_adapter.get(@user.to_key) == @user
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#40
  def get(id); end

  # Get an instance by id of the model. Raises an error if a model is not found.
  # This should comply with ActiveModel#to_key API, i.e.:
  #
  #   User.to_adapter.get!(@user.to_key) == @user
  #
  # @raise [NotSupportedError]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#31
  def get!(id); end

  # Returns the value of attribute klass.
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#3
  def klass; end

  protected

  # given an options hash,
  # with optional :conditions, :order, :limit and :offset keys,
  # returns conditions, normalized order, limit and offset
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#94
  def extract_conditions!(options = T.unsafe(nil)); end

  # given an order argument, returns an array of pairs, with each pair containing the attribute, and :asc or :desc
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#104
  def normalize_order(order); end

  # @return [Boolean]
  #
  # source://orm_adapter//lib/orm_adapter/base.rb#83
  def valid_object?(object); end

  # source://orm_adapter//lib/orm_adapter/base.rb#87
  def wrap_key(key); end

  class << self
    # Your ORM adapter needs to inherit from this Base class and its adapter
    # will be registered. To create an adapter you should create an inner
    # constant "OrmAdapter" e.g. ActiveRecord::Base::OrmAdapter
    #
    # @see orm_adapters/active_record
    # @see orm_adapters/datamapper
    # @see orm_adapters/mongoid
    #
    # source://orm_adapter//lib/orm_adapter/base.rb#12
    def inherited(adapter); end
  end
end

# source://orm_adapter//lib/orm_adapter/base.rb#122
class OrmAdapter::NotSupportedError < ::NotImplementedError
  # source://orm_adapter//lib/orm_adapter/base.rb#123
  def to_s; end
end

# Extend into a class that has an OrmAdapter
#
# source://orm_adapter//lib/orm_adapter/to_adapter.rb#3
module OrmAdapter::ToAdapter
  # source://orm_adapter//lib/orm_adapter/to_adapter.rb#4
  def to_adapter; end
end

# source://orm_adapter//lib/orm_adapter/version.rb#2
OrmAdapter::VERSION = T.let(T.unsafe(nil), String)
