# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bson` gem.
# Please instead update this file by running `bin/tapioca gem bson`.

class ActiveSupport::TimeWithZone
  include ::BSON::TimeWithZone
end

class Array
  include ::Enumerable
  include ::BSON::Array
  extend ::BSON::Array::ClassMethods
end

# The core namespace for all BSON related behaviour.
#
# @since 0.0.0
#
# source://bson//lib/bson/environment.rb#16
module BSON
  class << self
    # Create a new object id from a string using ObjectId.from_string
    #
    # @example Create an object id from the string.
    #   BSON::ObjectId(id)
    # @param string [String] The string to create the id from.
    # @raise [BSON::ObjectId::Invalid] If the provided string is invalid.
    # @return [BSON::ObjectId] The new object id.
    # @see ObjectId.from_string
    # @since 0.0.0
    #
    # source://bson//lib/bson.rb#35
    def ObjectId(string); end
  end
end

# Injects behaviour for encoding and decoding arrays to
# and from raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/array.rb#24
module BSON::Array
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method recursively invokes +as_extended_json+ with the provided
  # options on each array element.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Array] This array converted to extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/array.rb#102
  def as_extended_json(**options); end

  # Get the array as encoded BSON.
  #
  # @example Get the array as encoded BSON.
  #   [ 1, 2, 3 ].to_bson
  # @note Arrays are encoded as documents, where the index of the value in
  #   the array is the actual key.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/array.rb#44
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Converts the array to a normalized value in a BSON document.
  #
  # @example Convert the array to a normalized value.
  #   array.to_bson_normalized_value
  # @return [Array] The normalized array.
  # @since 3.0.0
  #
  # source://bson//lib/bson/array.rb#88
  def to_bson_normalized_value; end

  # Convert the array to an object id. This will only work for arrays of size
  # 12 where the elements are all strings.
  #
  # @example Convert the array to an object id.
  #   array.to_bson_object_id
  # @note This is used for repairing legacy bson data.
  # @raise [BSON::ObjectId::Invalid] If the array is not 12 elements.
  # @return [String] The raw object id bytes.
  # @since 2.0.0
  #
  # source://bson//lib/bson/array.rb#76
  def to_bson_object_id; end
end

# An array is type 0x04 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/array.rb#29
BSON::Array::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/array.rb#108
module BSON::Array::ClassMethods
  # Deserialize the array from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Array] The decoded array.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/array.rb#121
  def from_bson(buffer, **options); end
end

# Constant for binary string encoding.
#
# @since 2.0.0
#
# source://bson//lib/bson.rb#42
BSON::BINARY = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding BigDecimals
# to and from raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
#
# source://bson//lib/bson/big_decimal.rb#22
module BSON::BigDecimal
  # Get the BSON type for BigDecimal. This is the same BSON type as
  # BSON::Decimal128.
  #
  # source://bson//lib/bson/big_decimal.rb#42
  def bson_type; end

  # Get the BigDecimal as encoded BSON.
  #
  # @example Get the BigDecimal as encoded BSON.
  #   BigDecimal("1").to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  #
  # source://bson//lib/bson/big_decimal.rb#36
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# BigDecimals are serialized as Decimal128s under the hood. A Decimal128
# is type 0x13 in the BSON spec.
#
# source://bson//lib/bson/big_decimal.rb#26
BSON::BigDecimal::BSON_TYPE = T.let(T.unsafe(nil), String)

# source://bson//lib/bson/big_decimal.rb#46
module BSON::BigDecimal::ClassMethods
  # Deserialize the BigDecimal from raw BSON bytes.
  #
  # @example Get the BigDecimal from BSON.
  #   BigDecimal.from_bson(bson)
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [BigDecimal] The decimal object.
  #
  # source://bson//lib/bson/big_decimal.rb#58
  def from_bson(buffer, **options); end
end

# Represents binary data.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/binary.rb#25
class BSON::Binary
  include ::BSON::JSON

  # Instantiate the new binary object.
  #
  # This method accepts a string in any encoding; however, if a string is
  # of a non-BINARY encoding, the encoding is set to BINARY. This does not
  # change the bytes of the string but it means that applications referencing
  # the data of a Binary instance cannot assume it is in a non-binary
  # encoding, even if the string given to the constructor was in such an
  # encoding.
  #
  # @example Instantiate a binary.
  #   BSON::Binary.new(data, :md5)
  # @param data [String] The raw binary data.
  # @param type [Symbol] The binary type.
  # @return [Binary] a new instance of Binary
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#149
  def initialize(data = T.unsafe(nil), type = T.unsafe(nil)); end

  # Determine if this binary object is equal to another object.
  #
  # @example Check the binary equality.
  #   binary == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#81
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#118
  def as_extended_json(**options); end

  # Get the binary as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the binary as a JSON hash.
  #   binary.as_json
  # @return [Hash] The binary as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#107
  def as_json(*args); end

  def bson_type; end

  # The string is always stored in BINARY encoding.
  #
  # @return [String] The raw binary data.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#64
  def data; end

  # Determine if this binary object is equal to another object.
  #
  # @example Check the binary equality.
  #   binary == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#81
  def eql?(other); end

  # Generates a Fixnum hash value for this object.
  #
  # Allows using Binary as hash keys.
  #
  # @return [Fixnum]
  # @since 2.3.1
  #
  # source://bson//lib/bson/binary.rb#94
  def hash; end

  # Get a nice string for use with object inspection.
  #
  # @example Inspect the binary.
  #   object_id.inspect
  # @return [String] The binary in form BSON::Binary:object_id
  # @since 2.3.0
  #
  # source://bson//lib/bson/binary.rb#173
  def inspect; end

  # Encode the binary type
  #
  # @example Encode the binary.
  #   binary.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#251
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Returns a string representation of the UUID stored in this Binary.
  #
  # If the Binary is of subtype 4 (:uuid), this method returns the UUID
  # in RFC 4122 format. If the representation parameter is provided, it
  # must be the value :standard as a symbol or a string.
  #
  # If the Binary is of subtype 3 (:uuid_old), this method requires that
  # the representation parameter is provided and is one of :csharp_legacy,
  # :java_legacy or :python_legacy or the equivalent strings. In this case
  # the method assumes the Binary stores the UUID in the specified format,
  # transforms the stored bytes to the standard RFC 4122 representation
  # and returns the UUID in RFC 4122 format.
  #
  # If the Binary is of another subtype, this method raises TypeError.
  #
  # @api experimental
  # @param representation [Symbol] How to interpret the UUID.
  # @raise [TypeError] If the subtype of Binary is not :uuid nor :uuid_old.
  # @raise [ArgumentError] If the representation other than :standard
  #   is requested for Binary subtype 4 (:uuid), if :standard representation
  #   is requested for Binary subtype 3 (:uuid_old), or if an invalid
  #   representation is requested.
  # @return [String] The string representation of the UUID.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#203
  def to_uuid(representation = T.unsafe(nil)); end

  # @return [Symbol] The binary type.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#69
  def type; end

  private

  # Validate the provided type is a valid type.
  #
  # @api private
  # @example Validate the type.
  #   binary.validate_type!(:user)
  # @param type [Object] The provided type.
  # @raise [InvalidType] The the type is invalid.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#384
  def validate_type!(type); end

  class << self
    # Deserialize the binary data from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [Binary] The decoded binary data.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/binary.rb#271
    def from_bson(buffer, **options); end

    # Creates a BSON::Binary from a string representation of a UUID.
    #
    # The UUID may be given in either 00112233-4455-6677-8899-aabbccddeeff or
    # 00112233445566778899AABBCCDDEEFF format - specifically, any dashes in
    # the UUID are removed and both upper and lower case letters are acceptable.
    #
    # The input UUID string is always interpreted to be in the RFC 4122 format.
    #
    # If representation is not provided, this method creates a BSON::Binary
    # of subtype 4 (:uuid). If representation is provided, it must be one of
    # :standard, :csharp_legacy, :java_legacy or :python_legacy. If
    # representation is :standard, this method creates a subtype 4 (:uuid)
    # binary which is the same behavior as if representation was not provided.
    # For other representations, this method creates a Binary of subtype 3
    # (:uuid_old) with the UUID converted to the appropriate legacy MongoDB
    # UUID storage format.
    #
    # @api experimental
    # @param uuid [String] The string representation of the UUID.
    # @param representation [Symbol] How to interpret the UUID.
    # @raise [ArgumentError] If invalid representation is requested.
    # @return [Binary] The binary.
    # @since 2.0.0
    #
    # source://bson//lib/bson/binary.rb#310
    def from_uuid(uuid, representation = T.unsafe(nil)); end
  end
end

# A binary is type 0x05 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/binary.rb#31
BSON::Binary::BSON_TYPE = T.let(T.unsafe(nil), String)

# Raised when providing an invalid type to the Binary.
#
# @since 2.0.0
#
# source://bson//lib/bson/binary.rb#337
class BSON::Binary::InvalidType < ::RuntimeError
  # Instantiate the new error.
  #
  # @example Instantiate the error.
  #   InvalidType.new(:error)
  # @param type [Object] The invalid type.
  # @return [InvalidType] a new instance of InvalidType
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#352
  def initialize(type); end

  # Get the custom error message for the exception.
  #
  # @example Get the message.
  #   error.message
  # @return [String] The error message.
  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#364
  def message; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/binary.rb#342
  def type; end
end

# The mappings of subtypes to their single byte identifiers.
#
# @note subtype 6 (ciphertext) is used for the Client-Side Encryption
#   feature. Data represented by this subtype is often encrypted, but
#   may also be plaintext. All instances of this subtype necessary for
#   Client-Side Encryption will be created internally by the Ruby driver.
#   An application should not create new BSON::Binary objects of this subtype.
# @since 2.0.0
#
# source://bson//lib/bson/binary.rb#42
BSON::Binary::SUBTYPES = T.let(T.unsafe(nil), Hash)

# The mappings of single byte subtypes to their symbol counterparts.
#
# @since 2.0.0
#
# source://bson//lib/bson/binary.rb#57
BSON::Binary::TYPES = T.let(T.unsafe(nil), Hash)

# Represents a boolean type, which compares less than any other value in the
# specification.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/boolean.rb#24
class BSON::Boolean
  def bson_type; end

  class << self
    # Deserialize a boolean from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [TrueClass, FalseClass] The decoded boolean.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/boolean.rb#42
    def from_bson(buffer, **options); end
  end
end

# A boolean is type 0x08 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/boolean.rb#29
BSON::Boolean::BSON_TYPE = T.let(T.unsafe(nil), String)

class BSON::ByteBuffer
  def initialize(*_arg0); end

  def get_array(*_arg0); end
  def get_byte; end
  def get_bytes(_arg0); end
  def get_cstring; end
  def get_decimal128_bytes; end
  def get_double; end
  def get_hash(*_arg0); end
  def get_int32; end
  def get_int64; end
  def get_string; end
  def get_uint32; end
  def length; end
  def put_array(_arg0, _arg1); end
  def put_byte(_arg0); end
  def put_bytes(_arg0); end
  def put_cstring(_arg0); end
  def put_decimal128(_arg0, _arg1); end
  def put_double(_arg0); end
  def put_hash(_arg0, _arg1); end
  def put_int32(_arg0); end
  def put_int64(_arg0); end
  def put_string(_arg0); end
  def put_symbol(_arg0); end
  def put_uint32(_arg0); end
  def read_position; end
  def replace_int32(_arg0, _arg1); end
  def rewind!; end
  def to_s; end
  def write_position; end
end

# Represents a code type, which is a wrapper around javascript code.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/code.rb#23
class BSON::Code
  include ::BSON::JSON

  # Instantiate the new code.
  #
  # @example Instantiate the new code.
  #   BSON::Code.new("this.value = 5")
  # @param javascript [String] The javascript code.
  # @return [Code] a new instance of Code
  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#83
  def initialize(javascript = T.unsafe(nil)); end

  # Determine if this code object is equal to another object.
  #
  # @example Check the code equality.
  #   code == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#46
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#71
  def as_extended_json(**options); end

  # Get the code as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the code as a JSON hash.
  #   code.as_json
  # @return [Hash] The code as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#60
  def as_json(*args); end

  def bson_type; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#34
  def javascript; end

  # Encode the javascript code.
  #
  # @example Encode the code.
  #   code.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/code.rb#97
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # Deserialize code from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [TrueClass, FalseClass] The decoded code.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/code.rb#112
    def from_bson(buffer, **options); end
  end
end

# A code is type 0x0D in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/code.rb#29
BSON::Code::BSON_TYPE = T.let(T.unsafe(nil), String)

# Represents a code with scope, which is a wrapper around javascript code
# with variable scope provided.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/code_with_scope.rb#24
class BSON::CodeWithScope
  include ::BSON::JSON

  # Instantiate the new code with scope.
  #
  # @example Instantiate the code with scope.
  #   BSON::CodeWithScope.new("this.value = name", name: "sid")
  # @param javascript [String] The javascript code.
  # @param scope [Hash] The variable scope.
  # @return [CodeWithScope] a new instance of CodeWithScope
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#88
  def initialize(javascript = T.unsafe(nil), scope = T.unsafe(nil)); end

  # Determine if this code with scope object is equal to another object.
  #
  # @example Check the code with scope equality.
  #   code_with_scope == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#50
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#75
  def as_extended_json(**options); end

  # Get the code with scope as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the code with scope as a JSON hash.
  #   code_with_scope.as_json
  # @return [Hash] The code with scope as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#64
  def as_json(*args); end

  def bson_type; end

  # @return [String] The javascript code.
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#38
  def javascript; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#38
  def scope; end

  # Encode the javascript code with scope.
  #
  # @example Encode the code with scope.
  #   code_with_scope.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/code_with_scope.rb#103
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # Deserialize a code with scope from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [TrueClass, FalseClass] The decoded code with scope.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/code_with_scope.rb#122
    def from_bson(buffer, **options); end
  end
end

# A code with scope is type 0x0F in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/code_with_scope.rb#30
BSON::CodeWithScope::BSON_TYPE = T.let(T.unsafe(nil), String)

# Provides configuration options for the BSON library.
#
# @since 4.1.0
#
# source://bson//lib/bson/config.rb#21
module BSON::Config
  extend ::BSON::Config

  # Set the configuration option for BSON to validate keys or not.
  #
  # @example Set the config option.
  #   BSON::Config.validating_keys = true
  # @param value [true, false] The value to set.
  # @return [true, false] The value.
  # @since 4.1.0
  #
  # source://bson//lib/bson/config.rb#34
  def validating_keys=(value); end

  # Returns true if BSON will validate the document keys on serialization to
  # determine if they contain invalid MongoDB values. Invalid keys start with
  # '$' or contain a '.' in them.
  #
  # @example Is BSON validating keys?
  #   BSON::Config.validating_keys?
  # @return [true, false] If BSON is validating keys?
  # @since 4.1.0
  #
  # source://bson//lib/bson/config.rb#48
  def validating_keys?; end
end

# Julian day of Date 1970-01-01 - UNIX timestamp reference.
#
# @api private
#
# source://bson//lib/bson/date.rb#23
BSON::DATE_REFERENCE = T.let(T.unsafe(nil), Integer)

# Represents a DBRef document in the database.
#
# source://bson//lib/bson/dbref.rb#21
class BSON::DBRef < ::BSON::Document
  include ::BSON::JSON

  # Instantiate a new DBRef.
  #
  # @example Create the DBRef - hash API.
  #   BSON::DBRef.new({'$ref' => 'users', '$id' => id, '$db' => 'database'})
  # @example Create the DBRef - legacy API.
  #   BSON::DBRef.new('users', id, 'database')
  # @param hash_or_collection [Hash | String] The DBRef hash, when using
  #   the hash API. It must contain $ref and $id. When using the legacy API,
  #   this parameter must be a String containing the collection name.
  # @param id [Object] The object id, when using the legacy API.
  # @param database [String] The database name, when using the legacy API.
  # @return [DBRef] a new instance of DBRef
  #
  # source://bson//lib/bson/dbref.rb#77
  def initialize(hash_or_collection, id = T.unsafe(nil), database = T.unsafe(nil)); end

  # Get the DBRef as a JSON document
  #
  # @example Get the DBRef as a JSON hash.
  #   dbref.as_json
  # @return [Hash] The max key as a JSON hash.
  #
  # source://bson//lib/bson/dbref.rb#60
  def as_json(*args); end

  # @return [String] collection The collection name.
  #
  # source://bson//lib/bson/dbref.rb#40
  def collection; end

  # @return [String] database The database name.
  #
  # source://bson//lib/bson/dbref.rb#50
  def database; end

  # @return [BSON::ObjectId] id The referenced document id.
  #
  # source://bson//lib/bson/dbref.rb#45
  def id; end

  # Converts the DBRef to raw BSON.
  #
  # @example Convert the DBRef to raw BSON.
  #   dbref.to_bson
  # @param buffer [BSON::ByteBuffer] The encoded BSON buffer to append to.
  # @param validating_keys [true, false] Whether keys should be validated when serializing.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  #
  # source://bson//lib/bson/dbref.rb#127
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  private

  # Reorder the fields of the given Hash to have $ref first, $id second,
  # and $db third. The rest of the fields in the hash can come in any
  # order after that.
  #
  # @param hash [Hash] The input hash. Must be a valid dbref.
  # @return [Hash] The hash with it's fields reordered.
  #
  # source://bson//lib/bson/dbref.rb#140
  def reorder_fields(hash); end
end

# The constant for the collection reference field.
#
# @deprecated
#
# source://bson//lib/bson/dbref.rb#27
BSON::DBRef::COLLECTION = T.let(T.unsafe(nil), String)

# The constant for the database field.
#
# @deprecated
#
# source://bson//lib/bson/dbref.rb#37
BSON::DBRef::DATABASE = T.let(T.unsafe(nil), String)

# The constant for the id field.
#
# @deprecated
#
# source://bson//lib/bson/dbref.rb#32
BSON::DBRef::ID = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding date values to raw bytes as specified by
# the BSON spec for time.
#
# @see http://bsonspec.org/#/specification
# @since 2.1.0
#
# source://bson//lib/bson/date.rb#36
module BSON::Date
  # Get the BSON type for the date.
  #
  # As the date is converted to a time, this returns the BSON type for time.
  #
  # @since 2.1.0
  #
  # source://bson//lib/bson/date.rb#55
  def bson_type; end

  # Get the date as encoded BSON.
  #
  # @example Get the date as encoded BSON.
  #   Date.new(2012, 1, 1).to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.1.0
  #
  # source://bson//lib/bson/date.rb#48
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# Injects behaviour for encoding date time values to raw bytes as specified by
# the BSON spec for time.
#
# @see http://bsonspec.org/#/specification
# @since 2.1.0
#
# source://bson//lib/bson/date_time.rb#26
module BSON::DateTime
  # Get the date time as encoded BSON.
  #
  # @example Get the date time as encoded BSON.
  #   DateTime.new(2012, 1, 1, 0, 0, 0).to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.1.0
  #
  # source://bson//lib/bson/date_time.rb#38
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# Injects behaviour for encoding and decoding DBPointer values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
#
# source://bson//lib/bson/db_pointer.rb#22
class BSON::DbPointer
  include ::BSON::JSON

  # Create a new DBPointer object.
  #
  # @param ref [String] The database collection name.
  # @param id [BSON::ObjectId] The DBPointer id.
  # @return [DbPointer] a new instance of DbPointer
  #
  # source://bson//lib/bson/db_pointer.rb#32
  def initialize(ref, id); end

  # Determine if this DBPointer object is equal to another object.
  #
  # @param other [Object] The object to compare against.
  # @return [true | false] If the objects are equal
  #
  # source://bson//lib/bson/db_pointer.rb#52
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  #
  # source://bson//lib/bson/db_pointer.rb#73
  def as_extended_json(**options); end

  # Get the DBPointer as JSON hash data
  #
  # @deprecated Use as_extended_json instead.
  # @return [Hash] The DBPointer as a JSON hash.
  #
  # source://bson//lib/bson/db_pointer.rb#62
  def as_json(*args); end

  def bson_type; end

  # Return the DbPointer's id.
  #
  # @return [BSON::ObjectId] The id of the DbPointer instance
  #
  # source://bson//lib/bson/db_pointer.rb#45
  def id; end

  # Return the collection name.
  #
  # @return [String] The database collection name.
  #
  # source://bson//lib/bson/db_pointer.rb#40
  def ref; end

  # Encode the DBPointer.
  #
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  #
  # source://bson//lib/bson/db_pointer.rb#82
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # Deserialize a DBPointer from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash]
    # @return [BSON::DbPointer] The decoded DBPointer.
    # @see http://bsonspec.org/#/specification
    #
    # source://bson//lib/bson/db_pointer.rb#98
    def from_bson(buffer, **options); end
  end
end

# A DBPointer is type 0x0C in the BSON spec.
#
# source://bson//lib/bson/db_pointer.rb#26
BSON::DbPointer::BSON_TYPE = T.let(T.unsafe(nil), String)

# source://bson//lib/bson/decimal128/builder.rb#17
class BSON::Decimal128
  include ::BSON::JSON
  include ::Comparable

  # Create a new Decimal128 from a string or a BigDecimal instance.
  #
  # @example Create a Decimal128 from a BigDecimal.
  #   Decimal128.new(big_decimal)
  # @param object [String, BigDecimal] The BigDecimal or String to use for
  #   instantiating a Decimal128.
  # @raise [InvalidArgument] When argument is not a String or BigDecimal.
  # @return [Decimal128] a new instance of Decimal128
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#121
  def initialize(object); end

  # source://bson//lib/bson/decimal128.rb#101
  def <=>(other); end

  # Check equality of the decimal128 object with another object.
  #
  # @example Check if the decimal128 object is equal to the other.
  #   decimal == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#94
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  #
  # source://bson//lib/bson/decimal128.rb#80
  def as_extended_json(**options); end

  # Get the Decimal128 as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the Decimal128 as a JSON hash.
  #   decimal.as_json
  # @return [Hash] The number as a JSON hash.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#69
  def as_json(*args); end

  def bson_type; end

  # Check equality of the decimal128 object with another object.
  #
  # @example Check if the decimal128 object is equal to the other.
  #   decimal == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#94
  def eql?(other); end

  # Get the hash value for the decimal128.
  #
  # @example Get the hash value.
  #   decimal.hash
  # @return [Integer] The hash value.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#153
  def hash; end

  # Get a nice string for use with object inspection.
  #
  # @example Inspect the decimal128 object.
  #   decimal128.inspect
  # @return [String] The decimal as a string.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#167
  def inspect; end

  # Get a Ruby BigDecimal object corresponding to this Decimal128.
  # Note that, when converting to a Ruby BigDecimal, non-zero significant digits
  # are preserved but trailing zeroes may be lost.
  # See the following example:
  #
  # Note that the the BSON::Decimal128 object can represent -NaN, sNaN,
  # and -sNaN while Ruby's BigDecimal cannot.
  #
  # @example
  #   decimal128 = BSON::Decimal128.new("0.200")
  #   => BSON::Decimal128('0.200')
  #   big_decimal = decimal128.to_big_decimal
  #   => #<BigDecimal:7fc619c95388,'0.2E0',9(18)>
  #   big_decimal.to_s
  #   => "0.2E0"
  # @return [BigDecimal] The decimal as a BigDecimal.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#203
  def to_big_decimal; end

  # Get the decimal128 as its raw BSON data.
  #
  # @example Get the raw bson bytes in a buffer.
  #   decimal.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#141
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Get the string representation of the decimal128.
  #
  # @example Get the decimal128 as a string.
  #   decimal128.to_s
  # @return [String] The decimal128 as a string.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#179
  def to_s; end

  # Get the string representation of the decimal128.
  #
  # @example Get the decimal128 as a string.
  #   decimal128.to_s
  # @return [String] The decimal128 as a string.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#179
  def to_str; end

  private

  # source://bson//lib/bson/decimal128.rb#209
  def set_bits(low, high); end

  class << self
    # Instantiate a Decimal128 from high and low bits.
    #
    # @example Create a Decimal128 from high and low bits.
    #   BSON::Decimal128.from_bits(high, low)
    # @param high [Integer] The high order bits.
    # @param low [Integer] The low order bits.
    # @return [BSON::Decimal128] The new decimal128.
    # @since 4.2.0
    #
    # source://bson//lib/bson/decimal128.rb#259
    def from_bits(low, high); end

    # Deserialize the decimal128 from raw BSON bytes.
    #
    # @example Get the decimal128 from BSON.
    #   Decimal128.from_bson(bson)
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [BSON::Decimal128] The decimal object.
    # @since 4.2.0
    #
    # source://bson//lib/bson/decimal128.rb#228
    def from_bson(buffer, **options); end

    # Instantiate a Decimal128 from a string.
    #
    # @example Create a Decimal128 from a string.
    #   BSON::Decimal128.from_string("1.05E+3")
    # @param string [String] The string to parse.
    # @raise [BSON::Decimal128::InvalidString] If the provided string is invalid.
    # @return [BSON::Decimal128] The new decimal128.
    # @since 4.2.0
    #
    # source://bson//lib/bson/decimal128.rb#244
    def from_string(string); end
  end
end

# A Decimal128 is type 0x13 in the BSON spec.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#28
BSON::Decimal128::BSON_TYPE = T.let(T.unsafe(nil), String)

# Helper module for parsing String, Integer, Float, BigDecimal, and Decimal128
# objects into other objects.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#25
module BSON::Decimal128::Builder
  extend ::BSON::Decimal128::Builder

  # Convert parts representing a Decimal128 into the corresponding bits.
  #
  # @api private
  # @param significand [Integer] The significand.
  # @param exponent [Integer] The exponent.
  # @param is_negative [true, false] Whether the value is negative.
  # @return [Array] Tuple of the low and high bits.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#63
  def parts_to_bits(significand, exponent, is_negative); end

  private

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#101
  def valid_exponent?(exponent); end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#97
  def valid_significand?(significand); end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#87
  def validate_range!(exponent, significand); end
end

# Helper class for parsing a BigDecimal into Decimal128 high and low bits.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#274
class BSON::Decimal128::Builder::FromBigDecimal
  # Initialize the FromBigDecimal Builder object.
  #
  # @api private
  # @example Create the FromBigDecimal builder.
  #   Builder::FromBigDecimal.new(big_decimal)
  # @param big_decimal [BigDecimal] The big decimal object to
  #   create a Decimal128 from.
  # @return [FromBigDecimal] a new instance of FromBigDecimal
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#285
  def initialize(big_decimal); end

  # Get the bits representing the Decimal128 that the big decimal corresponds to.
  #
  # @api private
  # @example Get the bits for the Decimal128 object created from the big decimal.
  #   builder.bits
  # @return [Array] Tuple of the low and high bits.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#297
  def bits; end

  private

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#328
  def special?; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#319
  def to_bits; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#307
  def to_special_bits; end
end

# Helper class for parsing a String into Decimal128 high and low bits.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#110
class BSON::Decimal128::Builder::FromString
  # Initialize the FromString Builder object.
  #
  # @api private
  # @example Create the FromString builder.
  #   Builder::FromString.new(string)
  # @param string [String] The string to create a Decimal128 from.
  # @return [FromString] a new instance of FromString
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#168
  def initialize(string); end

  # Get the bits representing the Decimal128 that the string corresponds to.
  #
  # @api private
  # @example Get the bits for the Decimal128 object created from the string.
  #   builder.bits
  # @return [Array] Tuple of the low and high bits.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#180
  def bits; end

  private

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#231
  def clamp(exponent, significand); end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#207
  def round_exact(exponent, significand); end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#260
  def special?; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#191
  def to_bits; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#247
  def to_special_bits; end

  # @api private
  # @raise [BSON::Decimal128::InvalidString]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#264
  def validate_format!; end
end

# Regex matching a string representing positive or negative Infinity.
#
# @api private
# @return [Regex] A regex matching a positive or negative Infinity string.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#124
BSON::Decimal128::Builder::FromString::INFINITY_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex matching a string representing NaN.
#
# @api private
# @return [Regex] A regex matching a NaN string.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#117
BSON::Decimal128::Builder::FromString::NAN_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex matching a scientific exponent.
#
# @api private
# @return [Regex] A regex matching E, e, E+, e+.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#146
BSON::Decimal128::Builder::FromString::SCIENTIFIC_EXPONENT_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex for the fraction, including leading zeros.
#
# @api private
# @return [Regex] The regex for matching the fraction,
#   including leading zeros.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#132
BSON::Decimal128::Builder::FromString::SIGNIFICAND_WITH_LEADING_ZEROS_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex for separating a negative sign from the significands.
#
# @api private
# @return [Regex] The regex for separating a sign from significands.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#139
BSON::Decimal128::Builder::FromString::SIGN_AND_DIGITS_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex for capturing trailing zeros.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#151
BSON::Decimal128::Builder::FromString::TRAILING_ZEROS_REGEX = T.let(T.unsafe(nil), Regexp)

# Regex for a valid decimal128 string format.
#
# @api private
# @return [Regex] The regex for a valid decimal128 string.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#158
BSON::Decimal128::Builder::FromString::VALID_DECIMAL128_STRING_REGEX = T.let(T.unsafe(nil), Regexp)

# Infinity mask.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#30
BSON::Decimal128::Builder::INFINITY_MASK = T.let(T.unsafe(nil), Integer)

# NaN mask.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#35
BSON::Decimal128::Builder::NAN_MASK = T.let(T.unsafe(nil), Integer)

# Signed bit mask.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#45
BSON::Decimal128::Builder::SIGN_BIT_MASK = T.let(T.unsafe(nil), Integer)

# SNaN mask.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#40
BSON::Decimal128::Builder::SNAN_MASK = T.let(T.unsafe(nil), Integer)

# The two highest bits of the 64 high order bits.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#50
BSON::Decimal128::Builder::TWO_HIGHEST_BITS_SET = T.let(T.unsafe(nil), Integer)

# Helper class for getting a String representation of a Decimal128 object.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#338
class BSON::Decimal128::Builder::ToString
  # Initialize the FromBigDecimal Builder object.
  #
  # @api private
  # @example Create the ToString builder.
  #   Builder::ToString.new(big_decimal)
  # @param decimal128 [Decimal128] The decimal128 object to
  #   create a String from.
  # @return [ToString] a new instance of ToString
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#363
  def initialize(decimal128); end

  # Get the string representing the Decimal128 object.
  #
  # @api private
  # @example Get a string representing the decimal128.
  #   builder.string
  # @note The returned string may be frozen.
  # @return [String] The string representing the decimal128 object.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#377
  def string; end

  private

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#423
  def bits_to_significand; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#385
  def create_string; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#413
  def exponent; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#445
  def high_bits; end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#441
  def infinity?; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#449
  def low_bits; end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#433
  def nan?; end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#437
  def negative?; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#405
  def scientific_exponent; end

  # @api private
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#419
  def significand; end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#429
  def two_highest_bits_set?; end

  # @api private
  # @return [Boolean]
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128/builder.rb#409
  def use_scientific_notation?; end
end

# String representing an Infinity value.
#
# @api private
# @return [String] The string representing Infinity.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#352
BSON::Decimal128::Builder::ToString::INFINITY_STRING = T.let(T.unsafe(nil), String)

# String representing a NaN value.
#
# @api private
# @return [String] The string representing NaN.
# @since 4.2.0
#
# source://bson//lib/bson/decimal128/builder.rb#345
BSON::Decimal128::Builder::ToString::NAN_STRING = T.let(T.unsafe(nil), String)

# Exponent offset.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#33
BSON::Decimal128::EXPONENT_OFFSET = T.let(T.unsafe(nil), Integer)

# Key for this type when converted to extended json.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#53
BSON::Decimal128::EXTENDED_JSON_KEY = T.let(T.unsafe(nil), String)

# Raised when trying to create a Decimal128 from an object that is neither a String nor a BigDecimal.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#271
class BSON::Decimal128::InvalidArgument < ::ArgumentError
  # Get the custom error message for the exception.
  #
  # @api private
  # @example Get the message.
  #   error.message
  # @return [String] The error message.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#286
  def message; end
end

# The custom error message for this error.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#276
BSON::Decimal128::InvalidArgument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when the exponent is outside the valid range.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#320
class BSON::Decimal128::InvalidRange < ::RuntimeError
  # Get the custom error message for the exception.
  #
  # @example Get the message.
  #   error.message
  # @return [String] The error message.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#336
  def message; end
end

# The custom error message for this error.
#
# @deprecated
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#326
BSON::Decimal128::InvalidRange::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when trying to create a Decimal128 from a string with
#   an invalid format.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#297
class BSON::Decimal128::InvalidString < ::RuntimeError
  # Get the custom error message for the exception.
  #
  # @api private
  # @example Get the message.
  #   error.message
  # @return [String] The error message.
  # @since 4.2.0
  #
  # source://bson//lib/bson/decimal128.rb#312
  def message; end
end

# The custom error message for this error.
#
# @api private
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#302
BSON::Decimal128::InvalidString::MESSAGE = T.let(T.unsafe(nil), String)

# Maximum digits of precision.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#48
BSON::Decimal128::MAX_DIGITS_OF_PRECISION = T.let(T.unsafe(nil), Integer)

# Maximum exponent.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#43
BSON::Decimal128::MAX_EXPONENT = T.let(T.unsafe(nil), Integer)

# Minimum exponent.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#38
BSON::Decimal128::MIN_EXPONENT = T.let(T.unsafe(nil), Integer)

# The native type to which this object can be converted.
#
# @since 4.2.0
#
# source://bson//lib/bson/decimal128.rb#58
BSON::Decimal128::NATIVE_TYPE = BigDecimal

# Raised when the significand provided is outside the valid range.
#
# @note This class derives from InvalidRange for backwards compatibility,
#   however when RUBY-1806 is implemented it should be changed to derive
#   from the base BSON exception class.
#
# source://bson//lib/bson/decimal128.rb#346
class BSON::Decimal128::UnrepresentablePrecision < ::BSON::Decimal128::InvalidRange
  # Get the custom error message for the exception.
  #
  # @return [String] The error message.
  #
  # source://bson//lib/bson/decimal128.rb#351
  def message; end
end

# This module provides behaviour for serializing and deserializing entire
# BSON documents, according to the BSON specification.
#
# @note The specification is: document ::= int32 e_list "\x00"
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/document.rb#36
class BSON::Document < ::Hash
  # Instantiate a new Document. Valid parameters for instantiation is a hash
  # only or nothing.
  #
  # @example Create the new Document.
  #   BSON::Document.new(name: "Joe", age: 33)
  # @param elements [Hash] The elements of the document.
  # @return [Document] a new instance of Document
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#212
  def initialize(elements = T.unsafe(nil)); end

  # Get a value from the document for the provided key. Can use string or
  # symbol access, with string access being the faster of the two.
  #
  # @example Get an element for the key.
  #   document["field"]
  # @example Get an element for the key by symbol.
  #   document[:field]
  # @param key [String, Symbol] The key to look up.
  # @return [Object] The found value, or nil if none found.
  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#88
  def [](key); end

  # Stores a key-value pair in the current document.
  #
  # Since BSON documents provide deep indifferent access (both strings and
  # symbols are accepted as keys, recursively), the value may be converted
  # to facilitate indifferent access. This conversion is performed for
  # built-in Array and Hash classes, and other classes can override
  # +to_bson_normalized_value+ method to provide custom conversion logic.
  # For example:
  #
  #     doc = BSON::Document.new
  #     doc[:a] = {b: {c: 'd'}}
  #     doc['a']['b']['c']
  #     # => "d"
  #
  # Note that due to this conversion, the object that is stored in the
  # receiver Document may be different from the object supplied as the
  # right hand side of the assignment. In Ruby, the result of assignment
  # is the right hand side, not the return value of []= method.
  # Because of this, modifying the result of assignment generally does not
  # work as intended:
  #
  #     doc = BSON::Document.new
  #     foo = (doc[:a] = {b: {c: 'd'}})
  #     # foo is original Hash with symbol keys
  #     foo['test'] = 'test'
  #     # doc is not modified
  #     doc
  #     # => {"a"=>{"b"=>{"c"=>"d"}}}
  #
  # This behavior can be encountered when defaulting document contents with
  # []= in a method, such as:
  #
  #     def foo
  #       # @doc is a BSON::Document
  #       @doc[:foo] ||= calculation
  #     end
  #
  # The above method should be written as follows to allow chaining:
  #
  #     def foo
  #       # @doc is a BSON::Document
  #       @doc[:foo] ||= calculation and @doc[:foo]
  #     end
  #
  # @example Set a value on the document.
  #   document[:test] = "value"
  # @param key [String, Symbol] The key to update.
  # @param value [Object] The value to update.
  # @return [Object] The updated value.
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#145
  def []=(key, value); end

  # Deletes the key-value pair and returns the value from the document
  # whose key is equal to key.
  # If the key is not found, returns the default value. If the optional code
  # block is given and the key is not found, pass in the key and return the
  # result of block.
  #
  # @example Delete a key-value pair
  #   document.delete(:test)
  # @param key [Object] The key of the key-value pair to delete.
  # @return [Object]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#199
  def delete(key, &block); end

  # Retrieves the value object corresponding to the each key objects repeatedly.
  # Will normalize symbol keys into strings.
  #
  # @example Get value from nested sub-documents, handling missing levels.
  #   document # => { :key1 => { "key2" => "value"}}
  #   document.dig(:key1, :key2) # => "value"
  #   document.dig("key1", "key2") # => "value"
  #   document.dig("foo", "key2") # => nil
  # @param *keys [Array<String, Symbol>] Keys, which constitute a "path" to the nested value.
  # @return [Object, NilClass] The requested value or nil.
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#268
  def dig(*keys); end

  # Returns a new document consisting of the current document minus the
  # specified keys.
  #
  # The keys to be removed can be specified as either strings or symbols.
  #
  # @example Get a document/hash with only the `name` and `age` fields removed
  #   document # => { _id: <ObjectId>, :name => 'John', :age => 30, :location => 'Earth' }
  #   document.except(:name, 'age') # => { _id: <ObjectId>, location: 'Earth' }
  # @note This method is always defined, even if Hash already contains a
  #   definition of #except, because ActiveSupport unconditionally defines
  #   its version of #except which doesn't work for BSON::Document which
  #   causes problems if ActiveSupport is loaded after bson-ruby is.
  # @param *keys [Array<String, Symbol>] Keys, that will be removed in the resulting document
  # @return [BSON::Document] The document with the specified keys removed.
  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#313
  def except(*keys); end

  # Get a value from the document for the provided key. Can use string or
  # symbol access, with string access being the faster of the two.
  #
  # @example Get an element for the key.
  #   document.fetch("field")
  # @example Get an element for the key by symbol with a default.
  #   document.fetch(:field, 'foo')
  # @example Get an element for the key by symbol with a block default.
  #   document.fetch(:field) { |key| key.upcase }
  # @overload fetch
  # @overload fetch
  # @overload fetch
  # @param key [String, Symbol] The key to look up.
  # @param default [Object] Returned value if key does not exist.
  # @return [Object] The found value. Raises KeyError if none found.
  # @since 4.4.0
  # @yield [key] Block returning default value for the given key.
  #
  # source://bson//lib/bson/document.rb#69
  def fetch(key, *args, &block); end

  # Returns true if the given key is present in the document.  Will normalize
  # symbol keys into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_key?(:test)
  # @param key [Object] The key to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#160
  def has_key?(key); end

  # Returns true if the given value is present in the document.  Will normalize
  # symbols into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_value?(:test)
  # @param value [Object] THe value to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#179
  def has_value?(value); end

  # Returns true if the given key is present in the document.  Will normalize
  # symbol keys into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_key?(:test)
  # @param key [Object] The key to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#160
  def include?(key); end

  # Returns true if the given key is present in the document.  Will normalize
  # symbol keys into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_key?(:test)
  # @param key [Object] The key to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#160
  def key?(key); end

  # Returns true if the given key is present in the document.  Will normalize
  # symbol keys into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_key?(:test)
  # @param key [Object] The key to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#160
  def member?(key); end

  # Merge this document with another document, returning a new document in
  # the process.
  #
  # @example Merge with another document.
  #   document.merge(name: "Bob")
  # @param other [BSON::Document, Hash] The document/hash to merge with.
  # @return [BSON::Document] The result of the merge.
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#228
  def merge(other, &block); end

  # Merge this document with another document, returning the same document in
  # the process.
  #
  # @example Merge with another document.
  #   document.merge(name: "Bob")
  # @param other [BSON::Document, Hash] The document/hash to merge with.
  # @return [BSON::Document] The result of the merge.
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#243
  def merge!(other); end

  # Slices a document to include only the given keys.
  # Will normalize symbol keys into strings.
  # (this method is backported from ActiveSupport::Hash)
  #
  # @example Get a document/hash with only the `name` and `age` fields present
  #   document # => { _id: <ObjectId>, :name => "John", :age => 30, :location => "Earth" }
  #   document.slice(:name, 'age') # => { "name": "John", "age" => 30 }
  #   document.slice('name') # => { "name" => "John" }
  #   document.slice(:foo) # => {}
  # @param *keys [Array<String, Symbol>] Keys, that will be kept in the resulting document
  # @return [BSON::Document] The document with only the selected keys
  # @since 4.3.1
  #
  # source://bson//lib/bson/document.rb#288
  def slice(*keys); end

  # @raise [ArgumentError]
  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#319
  def symbolize_keys!; end

  # Override the Hash implementation of to_bson_normalized_value.
  #
  # BSON::Document is already of the correct type and already provides
  # indifferent access to keys, hence no further conversions are necessary.
  #
  # Attempting to perform Hash's conversion on Document instances converts
  # DBRefs to Documents which is wrong.
  #
  # @return [BSON::Document] The normalized hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#332
  def to_bson_normalized_value; end

  # source://mongoid/8.1.2/lib/mongoid/extensions.rb#25
  def transform_keys; end

  # Merge this document with another document, returning the same document in
  # the process.
  #
  # @example Merge with another document.
  #   document.merge(name: "Bob")
  # @param other [BSON::Document, Hash] The document/hash to merge with.
  # @return [BSON::Document] The result of the merge.
  # @since 3.0.0
  #
  # source://bson//lib/bson/document.rb#243
  def update(other); end

  # Returns true if the given value is present in the document.  Will normalize
  # symbols into strings.
  #
  # @example Test if a key exists using a symbol
  #   document.has_value?(:test)
  # @param value [Object] THe value to check for.
  # @return [true, false]
  # @since 4.0.0
  #
  # source://bson//lib/bson/document.rb#179
  def value(value); end

  private

  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#338
  def convert_key(key); end

  # @since 2.0.0
  #
  # source://bson//lib/bson/document.rb#342
  def convert_value(value); end
end

# Provides static helper methods around determining what environment is
# running without polluting the global namespace.
#
# @since 2.0.0
#
# source://bson//lib/bson/environment.rb#22
module BSON::Environment
  extend ::BSON::Environment

  # Determine if we are using JRuby or not.
  #
  # @example Are we running with JRuby?
  #   Environment.jruby?
  # @return [true, false] If JRuby is our vm.
  # @since 2.0.0
  #
  # source://bson//lib/bson/environment.rb#33
  def jruby?; end

  # Determine if we are using Ruby version 1.9.
  #
  # @deprecated
  # @example Are we running with Ruby version 1.9?
  #   Environment.ruby_1_9?
  # @return [true, false] If the Ruby version is 1.9.
  # @since 4.2.0
  #
  # source://bson//lib/bson/environment.rb#46
  def ruby_1_9?; end
end

# Base exception class for all BSON-related errors.
#
# @note Many existing exceptions raised by bson-ruby do not derive from
#   this base class. This will change in the next major version (5.0).
#
# source://bson//lib/bson/error.rb#7
class BSON::Error < ::StandardError; end

# Exception raised when BSON decoding fails.
#
# source://bson//lib/bson/error.rb#19
class BSON::Error::BSONDecodeError < ::BSON::Error; end

# Exception raised when Extended JSON parsing fails.
#
# source://bson//lib/bson/error.rb#10
class BSON::Error::ExtJSONParseError < ::BSON::Error; end

# Exception raised when there is an invalid argument passed into the
# constructor of regexp object. This includes when the argument contains
# a null byte.
#
# source://bson//lib/bson/error.rb#31
class BSON::Error::InvalidRegexpPattern < ::BSON::Error; end

# Exception raised when serializing an Array or Hash to BSON and an
# array or hash element is of a class that does not define how to serialize
# itself to BSON.
#
# source://bson//lib/bson/error.rb#25
class BSON::Error::UnserializableClass < ::BSON::Error; end

# Exception raised when decoding BSON and the data contains an
# unsupported binary subtype.
#
# source://bson//lib/bson/error.rb#15
class BSON::Error::UnsupportedBinarySubtype < ::BSON::Error; end

# This module contains methods for parsing Extended JSON 2.0.
# https://github.com/mongodb/specifications/blob/master/source/extended-json.rst
#
# source://bson//lib/bson/ext_json.rb#22
module BSON::ExtJSON
  private

  # source://bson//lib/bson/ext_json.rb#365
  def create_binary(encoded_value, encoded_subtype); end

  # source://bson//lib/bson/ext_json.rb#375
  def create_regexp(pattern, options); end

  # @return [Boolean]
  #
  # source://bson//lib/bson/ext_json.rb#379
  def dbref?(hash); end

  # source://bson//lib/bson/ext_json.rb#356
  def map_hash(hash, **options); end

  # Parses JSON in a string into a Ruby object tree.
  #
  # There are two strategies that this method can follow. If the canonical
  # strategy is used which is the default, this method returns BSON types
  # as much as possible. This allows the resulting object tree to be
  # serialized back to extended JSON or to BSON while preserving the types.
  # The relaxed strategy, enabled by passing {emit_relaxed: true} option,
  # returns native Ruby types as much as possible which makes the resulting
  # object tree easier to work with but may lose type information.
  #
  # Please note the following aspects of this method when emitting relaxed
  # object trees:
  #
  # 1. $numberInt and $numberLong inputs produce Integer instances.
  # 2. $regularExpression inputs produce BSON Regexp instances. This may
  #    change in a future version of bson-ruby to produce Ruby Regexp
  #    instances, potentially depending on regular expression options.
  # 3. $numberDecimal inputs produce BSON Decimal128 instances. This may
  #    change in a future version of bson-ruby to produce Ruby BigDecimal
  #    instances instead.
  #
  # This method accepts canonical extended JSON, relaxed extended JSON and
  # JSON without type information as well as a mix of the above.
  #
  # perform JSON parsing. As the JSON.parse method accepts inputs other
  # than hashes, so does this method and therefore this method can return
  # objects of any type.
  #
  # @note This method uses Ruby standard library's JSON.parse method to
  # @option options
  # @param str [String] The string to parse.
  # @return [Object] Parsed object tree.
  #
  # source://bson//lib/bson/ext_json.rb#58
  def parse(str, **options); end

  # source://bson//lib/bson/ext_json.rb#137
  def parse_hash(hash, **options); end

  # Transforms a Ruby object tree containing extended JSON type hashes
  # into a Ruby object tree with said hashes replaced by BSON or Ruby native
  # types.
  #
  # There are two strategies that this method can follow. If the canonical
  # strategy is used which is the default, this method returns BSON types
  # as much as possible. This allows the resulting object tree to be
  # serialized back to extended JSON or to BSON while preserving the types.
  # The relaxed strategy, enabled by passing {emit_relaxed: true} option,
  # returns native Ruby types as much as possible which makes the resulting
  # object tree easier to work with but may lose type information.
  #
  # Please note the following aspects of this method when emitting relaxed
  # object trees:
  #
  # 1. $numberInt and $numberLong inputs produce Integer instances.
  # 2. $regularExpression inputs produce BSON Regexp instances. This may
  #    change in a future version of bson-ruby to produce Ruby Regexp
  #    instances, potentially depending on regular expression options.
  # 3. $numberDecimal inputs produce BSON Decimal128 instances. This may
  #    change in a future version of bson-ruby to produce Ruby BigDecimal
  #    instances instead.
  #
  # This method accepts object trees resulting from parsing canonical
  # extended JSON, relaxed extended JSON and JSON without type information
  # as well as a mix of the above.
  #
  # Consequently, it can return values of any type.
  #
  # @example Convert extended JSON type hashes:
  #   BSON::ExtJSON.parse_obj('foo' => {'$numberLong' => '42'})
  #   => {"foo"=>#<BSON::Int64:0x000055e55f4d40f0 @value=42>}
  # @example Convert a non-hash value:
  #   BSON::ExtJSON.parse_obj('$numberLong' => '42')
  #   => #<BSON::Int64:0x000055e55f4e6ed0 @value=42>
  # @note This method accepts any types as input, not just Hash instances.
  # @option options
  # @param value [Object] The object tree to convert.
  # @return [Object] Converted object tree.
  #
  # source://bson//lib/bson/ext_json.rb#105
  def parse_obj(value, **options); end

  # source://bson//lib/bson/ext_json.rb#343
  def verify_no_reserved_keys(hash, **options); end

  class << self
    # source://bson//lib/bson/ext_json.rb#365
    def create_binary(encoded_value, encoded_subtype); end

    # source://bson//lib/bson/ext_json.rb#375
    def create_regexp(pattern, options); end

    # @return [Boolean]
    #
    # source://bson//lib/bson/ext_json.rb#379
    def dbref?(hash); end

    # source://bson//lib/bson/ext_json.rb#356
    def map_hash(hash, **options); end

    # Parses JSON in a string into a Ruby object tree.
    #
    # There are two strategies that this method can follow. If the canonical
    # strategy is used which is the default, this method returns BSON types
    # as much as possible. This allows the resulting object tree to be
    # serialized back to extended JSON or to BSON while preserving the types.
    # The relaxed strategy, enabled by passing {emit_relaxed: true} option,
    # returns native Ruby types as much as possible which makes the resulting
    # object tree easier to work with but may lose type information.
    #
    # Please note the following aspects of this method when emitting relaxed
    # object trees:
    #
    # 1. $numberInt and $numberLong inputs produce Integer instances.
    # 2. $regularExpression inputs produce BSON Regexp instances. This may
    #    change in a future version of bson-ruby to produce Ruby Regexp
    #    instances, potentially depending on regular expression options.
    # 3. $numberDecimal inputs produce BSON Decimal128 instances. This may
    #    change in a future version of bson-ruby to produce Ruby BigDecimal
    #    instances instead.
    #
    # This method accepts canonical extended JSON, relaxed extended JSON and
    # JSON without type information as well as a mix of the above.
    #
    # perform JSON parsing. As the JSON.parse method accepts inputs other
    # than hashes, so does this method and therefore this method can return
    # objects of any type.
    #
    # @note This method uses Ruby standard library's JSON.parse method to
    # @option options
    # @param str [String] The string to parse.
    # @return [Object] Parsed object tree.
    #
    # source://bson//lib/bson/ext_json.rb#58
    def parse(str, **options); end

    # source://bson//lib/bson/ext_json.rb#137
    def parse_hash(hash, **options); end

    # Transforms a Ruby object tree containing extended JSON type hashes
    # into a Ruby object tree with said hashes replaced by BSON or Ruby native
    # types.
    #
    # There are two strategies that this method can follow. If the canonical
    # strategy is used which is the default, this method returns BSON types
    # as much as possible. This allows the resulting object tree to be
    # serialized back to extended JSON or to BSON while preserving the types.
    # The relaxed strategy, enabled by passing {emit_relaxed: true} option,
    # returns native Ruby types as much as possible which makes the resulting
    # object tree easier to work with but may lose type information.
    #
    # Please note the following aspects of this method when emitting relaxed
    # object trees:
    #
    # 1. $numberInt and $numberLong inputs produce Integer instances.
    # 2. $regularExpression inputs produce BSON Regexp instances. This may
    #    change in a future version of bson-ruby to produce Ruby Regexp
    #    instances, potentially depending on regular expression options.
    # 3. $numberDecimal inputs produce BSON Decimal128 instances. This may
    #    change in a future version of bson-ruby to produce Ruby BigDecimal
    #    instances instead.
    #
    # This method accepts object trees resulting from parsing canonical
    # extended JSON, relaxed extended JSON and JSON without type information
    # as well as a mix of the above.
    #
    # Consequently, it can return values of any type.
    #
    # @example Convert extended JSON type hashes:
    #   BSON::ExtJSON.parse_obj('foo' => {'$numberLong' => '42'})
    #   => {"foo"=>#<BSON::Int64:0x000055e55f4d40f0 @value=42>}
    # @example Convert a non-hash value:
    #   BSON::ExtJSON.parse_obj('$numberLong' => '42')
    #   => #<BSON::Int64:0x000055e55f4e6ed0 @value=42>
    # @note This method accepts any types as input, not just Hash instances.
    # @option options
    # @param value [Object] The object tree to convert.
    # @return [Object] Converted object tree.
    #
    # source://bson//lib/bson/ext_json.rb#105
    def parse_obj(value, **options); end

    # source://bson//lib/bson/ext_json.rb#343
    def verify_no_reserved_keys(hash, **options); end
  end
end

# source://bson//lib/bson/ext_json.rb#127
BSON::ExtJSON::RESERVED_KEYS = T.let(T.unsafe(nil), Array)

# source://bson//lib/bson/ext_json.rb#133
BSON::ExtJSON::RESERVED_KEYS_HASH = T.let(T.unsafe(nil), Hash)

# Injects behaviour for encoding and decoding false values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/false_class.rb#24
module BSON::FalseClass
  # The BSON type for false values is the general boolean type of 0x08.
  #
  # @example Get the bson type.
  #   false.bson_type
  # @return [String] The character 0x08.
  # @since 2.0.0
  #
  # source://bson//lib/bson/false_class.rb#39
  def bson_type; end

  # Get the false boolean as encoded BSON.
  #
  # @example Get the false boolean as encoded BSON.
  #   false.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/false_class.rb#53
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# A false value in the BSON spec is 0x00.
#
# @since 2.0.0
#
# source://bson//lib/bson/false_class.rb#29
BSON::FalseClass::FALSE_BYTE = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding floating point values
# to and from raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/float.rb#24
module BSON::Float
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method returns the float itself if relaxed representation is
  # requested and the value is finite, otherwise a $numberDouble hash.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash | Float] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/float.rb#60
  def as_extended_json(**options); end

  # Get the floating point as encoded BSON.
  #
  # @example Get the floating point as encoded BSON.
  #   1.221311.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/float.rb#46
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# A floating point is type 0x01 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/float.rb#29
BSON::Float::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/float.rb#82
module BSON::Float::ClassMethods
  # Deserialize an instance of a Float from a BSON double.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Float] The decoded Float.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/float.rb#95
  def from_bson(buffer, **options); end
end

# The pack directive is for 8 byte floating points.
#
# @since 2.0.0
#
# source://bson//lib/bson/float.rb#34
BSON::Float::PACK = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding hashes to
# and from raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/hash.rb#24
module BSON::Hash
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method recursively invokes +as_extended_json+ with the provided
  # options on each hash value.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] This hash converted to extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/hash.rb#91
  def as_extended_json(**options); end

  # Get the hash as encoded BSON.
  #
  # @example Get the hash as encoded BSON.
  #   { "field" => "value" }.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/hash.rb#41
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Converts the hash to a normalized value in a BSON document.
  #
  # @example Convert the hash to a normalized value.
  #   hash.to_bson_normalized_value
  # @return [BSON::Document] The normalized hash.
  # @since 3.0.0
  #
  # source://bson//lib/bson/hash.rb#77
  def to_bson_normalized_value; end
end

# A hash, also called an embedded document, is type 0x03 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/hash.rb#29
BSON::Hash::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/hash.rb#95
module BSON::Hash::ClassMethods
  # Deserialize the hash from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Hash] The decoded hash.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/hash.rb#108
  def from_bson(buffer, **options); end
end

# Represents int32 type.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/int32.rb#23
class BSON::Int32
  # Instantiate a BSON Int32.
  #
  # @param value [Integer] The 32-bit integer.
  # @return [Int32] a new instance of Int32
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/int32.rb#62
  def initialize(value); end

  # Check equality of the int32 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int32.rb#114
  def ==(other); end

  # Check equality of the int32 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int32.rb#114
  def ===(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method returns the integer value if relaxed representation is
  # requested, otherwise a $numberInt hash.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash | Integer] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/int32.rb#131
  def as_extended_json(**options); end

  def bson_type; end

  # Check equality of the int32 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int32.rb#114
  def eql?(other); end

  # Append the integer as encoded BSON to a ByteBuffer.
  #
  # @example Encoded the integer and append to a ByteBuffer.
  #   int32.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded integer.
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/int32.rb#89
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Convert the integer to a BSON string key.
  #
  # @example Convert the integer to a BSON key string.
  #   int.to_bson_key
  # @param validating_keys [true, false] If BSON should validate the key.
  # @return [String] The string key.
  # @since 4.2.0
  #
  # source://bson//lib/bson/int32.rb#103
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  # Returns the value of this Int32.
  #
  # @return [Integer] The integer value.
  # @since 2.0.0
  #
  # source://bson//lib/bson/int32.rb#77
  def value; end

  class << self
    # Deserialize an Integer from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [Integer] The decoded Integer.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/int32.rb#51
    def from_bson(buffer, **options); end
  end
end

# A boolean is type 0x08 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/int32.rb#28
BSON::Int32::BSON_TYPE = T.let(T.unsafe(nil), String)

# The number of bytes constant.
#
# @since 4.0.0
#
# source://bson//lib/bson/int32.rb#33
BSON::Int32::BYTES_LENGTH = T.let(T.unsafe(nil), Integer)

# Constant for the int 32 pack directive.
#
# @since 2.0.0
#
# source://bson//lib/bson/int32.rb#38
BSON::Int32::PACK = T.let(T.unsafe(nil), String)

# Represents int64 type.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/int64.rb#23
class BSON::Int64
  # Instantiate a BSON Int64.
  #
  # @param value [Integer] The 64-bit integer.
  # @return [Int64] a new instance of Int64
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/int64.rb#62
  def initialize(value); end

  # Check equality of the int64 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int64.rb#114
  def ==(other); end

  # Check equality of the int64 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int64.rb#114
  def ===(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method returns the integer value if relaxed representation is
  # requested, otherwise a $numberLong hash.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash | Integer] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/int64.rb#131
  def as_extended_json(**options); end

  def bson_type; end

  # Check equality of the int64 with another object.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.4.0
  #
  # source://bson//lib/bson/int64.rb#114
  def eql?(other); end

  # Append the integer as encoded BSON to a ByteBuffer.
  #
  # @example Encoded the integer and append to a ByteBuffer.
  #   int64.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded integer.
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/int64.rb#89
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Convert the integer to a BSON string key.
  #
  # @example Convert the integer to a BSON key string.
  #   int.to_bson_key
  # @param validating_keys [true, false] If BSON should validate the key.
  # @return [String] The string key.
  # @since 4.2.0
  #
  # source://bson//lib/bson/int64.rb#103
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  # Returns the value of this Int64.
  #
  # @return [Integer] The integer value.
  # @since 2.0.0
  #
  # source://bson//lib/bson/int64.rb#77
  def value; end

  class << self
    # Deserialize an Integer from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [Integer | BSON::Int64] The decoded Integer.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/int64.rb#46
    def from_bson(buffer, **options); end
  end
end

# A boolean is type 0x08 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/int64.rb#28
BSON::Int64::BSON_TYPE = T.let(T.unsafe(nil), String)

# Constant for the int 64 pack directive.
#
# @since 2.0.0
#
# source://bson//lib/bson/int64.rb#33
BSON::Int64::PACK = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding integer values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#24
module BSON::Integer
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method returns the integer itself if relaxed representation is
  # requested, otherwise a $numberInt hash if the value fits in 32 bits
  # and a $numberLong otherwise. Regardless of which representation is
  # requested, a value that does not fit in 64 bits raises RangeError.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash | Integer] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#175
  def as_extended_json(**options); end

  # Is this integer a valid BSON 32 bit value?
  #
  # @example Is the integer a valid 32 bit value?
  #   1024.bson_int32?
  # @return [true, false] If the integer is 32 bit.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#66
  def bson_int32?; end

  # Is this integer a valid BSON 64 bit value?
  #
  # @example Is the integer a valid 64 bit value?
  #   1024.bson_int64?
  # @return [true, false] If the integer is 64 bit.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#78
  def bson_int64?; end

  # Get the BSON type for this integer. Will depend on whether the integer
  # is 32 bit or 64 bit.
  #
  # @example Get the BSON type for the integer.
  #   1024.bson_type
  # @return [String] The single byte BSON type.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#93
  def bson_type; end

  # Get the integer as encoded BSON.
  #
  # @example Get the integer as encoded BSON.
  #   1024.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#107
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Convert the integer to a 32 bit (4 bytes) raw bytes string.
  #
  # @example Convert the integer to it's 32 bit bytes.
  #   1024.to_bson_int32
  # @param encoded [String] The string to encode to.
  # @return [String] The encoded string.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#127
  def to_bson_int32(encoded); end

  # Convert the integer to a 64 bit (8 bytes) raw bytes string.
  #
  # @example Convert the integer to it's 64 bit bytes.
  #   1024.to_bson_int64
  # @param encoded [String] The string to encode to.
  # @return [String] The encoded string.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#141
  def to_bson_int64(encoded); end

  # Convert the integer to a BSON string key.
  #
  # @example Convert the integer to a BSON key string.
  #   1.to_bson_key
  # @param validating_keys [true, false] If BSON should validate the key.
  # @return [String] The string key.
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#159
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  private

  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#199
  def append_bson_int32(encoded); end

  # @raise [RangeError]
  # @since 2.0.0
  #
  # source://bson//lib/bson/integer.rb#206
  def out_of_range!; end
end

# A hash of index values for array optimization.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#54
BSON::Integer::BSON_ARRAY_INDEXES = T.let(T.unsafe(nil), Array)

# The BSON index size.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#49
BSON::Integer::BSON_INDEX_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum 32 bit integer value.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#29
BSON::Integer::MAX_32BIT = T.let(T.unsafe(nil), Integer)

# The maximum 64 bit integer value.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#34
BSON::Integer::MAX_64BIT = T.let(T.unsafe(nil), Integer)

# The minimum 32 bit integer value.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#39
BSON::Integer::MIN_32BIT = T.let(T.unsafe(nil), Integer)

# The minimum 64 bit integer value.
#
# @since 2.0.0
#
# source://bson//lib/bson/integer.rb#44
BSON::Integer::MIN_64BIT = T.let(T.unsafe(nil), Integer)

# Raised when trying to serialize an object into a key.
#
# @since 2.2.4
#
# source://bson//lib/bson/object.rb#94
class BSON::InvalidKey < ::RuntimeError
  # Instantiate the exception.
  #
  # @example Instantiate the exception.
  #   BSON::Object::InvalidKey.new(object)
  # @param object [Object] The object that was meant for the key.
  # @return [InvalidKey] a new instance of InvalidKey
  # @since 2.2.4
  #
  # source://bson//lib/bson/object.rb#104
  def initialize(object); end
end

# Provides common behaviour for JSON serialization of objects.
#
# @since 2.0.0
#
# source://bson//lib/bson/json.rb#21
module BSON::JSON
  # Converting an object to JSON simply gets it's hash representation via
  # as_json, then converts it to a string.
  #
  # @example Convert the object to JSON
  #   object.to_json
  # @note All types must implement as_json.
  # @return [String] The object as JSON.
  # @since 2.0.0
  #
  # source://bson//lib/bson/json.rb#34
  def to_json(*args); end
end

# Number of miliseconds in a day.
#
# @api private
#
# source://bson//lib/bson/date.rb#28
BSON::MILLISECONDS_IN_DAY = T.let(T.unsafe(nil), Integer)

# Represents a $maxKey type, which compares less than any other value in the
# specification.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/max_key.rb#24
class BSON::MaxKey
  include ::Comparable
  include ::BSON::JSON
  include ::BSON::Specialized
  extend ::BSON::Specialized::ClassMethods

  # When comparing a max key with any other object, the max key will always
  # be greater.
  #
  # @example Compare with another object.
  #   max_key <=> 1000
  # @param other [Object] The object to compare against.
  # @return [Integer] Always 1.
  # @since 2.0.0
  #
  # source://bson//lib/bson/max_key.rb#50
  def <=>(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/max_key.rb#74
  def as_extended_json(**options); end

  # Get the max key as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the max key as a JSON hash.
  #   max_key.as_json
  # @return [Hash] The max key as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/max_key.rb#63
  def as_json(*args); end

  def bson_type; end
end

# A $maxKey is type 0x7F in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/max_key.rb#32
BSON::MaxKey::BSON_TYPE = T.let(T.unsafe(nil), String)

# Constant for always evaluating greater in a comparison.
#
# @since 2.0.0
#
# source://bson//lib/bson/max_key.rb#37
BSON::MaxKey::GREATER = T.let(T.unsafe(nil), Integer)

# Represents a $minKey type, which compares less than any other value in the
# specification.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/min_key.rb#24
class BSON::MinKey
  include ::Comparable
  include ::BSON::JSON
  include ::BSON::Specialized
  extend ::BSON::Specialized::ClassMethods

  # When comparing a min key with any other object, the min key will always
  # be lesser.
  #
  # @example Compare with another object.
  #   min_key <=> 1000
  # @param other [Object] The object to compare against.
  # @return [Integer] Always -1.
  # @since 2.0.0
  #
  # source://bson//lib/bson/min_key.rb#50
  def <=>(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/min_key.rb#74
  def as_extended_json(**options); end

  # Get the min key as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the min key as a JSON hash.
  #   min_key.as_json
  # @return [Hash] The min key as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/min_key.rb#63
  def as_json(*args); end

  def bson_type; end
end

# A $minKey is type 0xFF in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/min_key.rb#32
BSON::MinKey::BSON_TYPE = T.let(T.unsafe(nil), String)

# Constant for always evaluating lesser in a comparison.
#
# @since 2.0.0
#
# source://bson//lib/bson/min_key.rb#37
BSON::MinKey::LESSER = T.let(T.unsafe(nil), Integer)

# Constant for bson types that don't actually serialize a value.
#
# @since 2.0.0
#
# source://bson//lib/bson.rb#47
BSON::NO_VALUE = T.let(T.unsafe(nil), String)

# Constant for a null byte (0x00).
#
# @since 2.0.0
#
# source://bson//lib/bson.rb#52
BSON::NULL_BYTE = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding nil values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/nil_class.rb#24
module BSON::NilClass
  include ::BSON::Specialized
  extend ::BSON::Specialized::ClassMethods
end

# A nil is type 0x0A in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/nil_class.rb#30
BSON::NilClass::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/nil_class.rb#32
module BSON::NilClass::ClassMethods
  # Deserialize NilClass from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [nil] The decoded nil value.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/nil_class.rb#45
  def from_bson(buffer, **options); end
end

# Injects behaviour for all Ruby objects.
#
# @since 2.2.4
#
# source://bson//lib/bson/object.rb#21
module BSON::Object
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # Subclasses should override this method to provide custom serialization
  # to Extended JSON.
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Object] The extended json representation.
  # @since 2.2.4
  #
  # source://bson//lib/bson/object.rb#86
  def as_extended_json(**options); end

  # Objects that don't override this method will raise an error when trying
  # to use them as keys in a BSON document. This is only overridden in String
  # and Symbol.
  #
  # @example Convert the object to a BSON key.
  #   object.to_bson_key
  # @raise [InvalidKey] Always raises an exception.
  # @see http://bsonspec.org/#/specification
  # @since 2.2.4
  #
  # source://bson//lib/bson/object.rb#35
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  # Converts the object to a normalized key in a BSON document.
  #
  # @example Convert the object to a normalized key.
  #   object.to_bson_normalized_key
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://bson//lib/bson/object.rb#47
  def to_bson_normalized_key; end

  # Converts the object to a normalized value in a BSON document.
  #
  # @example Convert the object to a normalized value.
  #   object.to_bson_normalized_value
  # @return [Object] self.
  # @since 3.0.0
  #
  # source://bson//lib/bson/object.rb#59
  def to_bson_normalized_value; end

  # Serializes this object to Extended JSON
  # (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # Subclasses should override +as_extended_json+ rather than this method.
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [String] The extended json serialization.
  # @since 2.2.4
  #
  # source://bson//lib/bson/object.rb#72
  def to_extended_json(**options); end
end

# Represents object_id data.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/object_id.rb#27
class BSON::ObjectId
  include ::Comparable
  include ::BSON::JSON

  # Compare this object id with another object for use in sorting.
  #
  # @example Compare the object id with the other object.
  #   object <=> other
  # @param other [Object] The object to compare to.
  # @return [Integer] The result of the comparison.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#101
  def <=>(other); end

  # Check equality of the object id with another object.
  #
  # @example Check if the object id is equal to the other.
  #   object_id == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#46
  def ==(other); end

  # Check case equality on the object id.
  #
  # @example Check case equality.
  #   object_id === other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal in a case.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#62
  def ===(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#87
  def as_extended_json(**options); end

  # Return the object id as a JSON hash representation.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the object id as JSON.
  #   object_id.as_json
  # @return [Hash] The object id as a JSON hash.
  # @since 2.0.0
  #
  # source://mongoid/8.1.2/lib/mongoid/extensions.rb#13
  def as_json(*args); end

  # source://bson//lib/bson/object_id.rb#76
  def bson_ruby_as_json(*args); end

  def bson_type; end

  # Check equality of the object id with another object.
  #
  # @example Check if the object id is equal to the other.
  #   object_id == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#46
  def eql?(other); end

  # Return the UTC time at which this ObjectId was generated. This may
  # be used instread of a created_at timestamp since this information
  # is always encoded in the object id.
  #
  # @example Get the generation time.
  #   object_id.generation_time
  # @return [Time] The time the id was generated.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#115
  def generation_time; end

  # Get the hash value for the object id.
  #
  # @example Get the hash value.
  #   object_id.hash
  # @return [Integer] The hash value.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#128
  def hash; end

  # Get a nice string for use with object inspection.
  #
  # @example Inspect the object id.
  #   object_id.inspect
  # @return [String] The object id in form BSON::ObjectId('id')
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#140
  def inspect; end

  # Dump the raw bson when calling Marshal.dump.
  #
  # @example Dump the raw bson.
  #   Marshal.dump(object_id)
  # @return [String] The raw bson bytes.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#152
  def marshal_dump; end

  # Unmarshal the data into an object id.
  #
  # @example Unmarshal the data.
  #   Marshal.load(data)
  # @param data [String] The raw bson bytes.
  # @return [String] The raw bson bytes.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#166
  def marshal_load(data); end

  # Get the object id as it's raw BSON data.
  #
  # @example Get the raw bson bytes.
  #   object_id.to_bson
  # @note Since Moped's BSON and MongoDB BSON before 2.0.0 have different
  #   internal representations, we will attempt to repair the data for cases
  #   where the object was instantiated in a non-standard way. (Like a
  #   Marshal.load)
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#185
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Get the string representation of the object id.
  #
  # @example Get the object id as a string.
  #   object_id.to_s
  # @return [String] The object id as a string.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#197
  def to_s; end

  # Get the string representation of the object id.
  #
  # @example Get the object id as a string.
  #   object_id.to_s
  # @return [String] The object id as a string.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#197
  def to_str; end

  # Return the UTC time at which this ObjectId was generated. This may
  # be used instread of a created_at timestamp since this information
  # is always encoded in the object id.
  #
  # @example Get the generation time.
  #   object_id.generation_time
  # @return [Time] The time the id was generated.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#115
  def to_time; end

  private

  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#214
  def generate_data; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#209
  def initialize_copy(other); end

  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#219
  def repair; end

  class << self
    # Deserialize the object id from raw BSON bytes.
    #
    # @example Get the object id from BSON.
    #   ObjectId.from_bson(bson)
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [BSON::ObjectId] The object id.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#238
    def from_bson(buffer, **options); end

    # Create a new object id from raw bytes.
    #
    # @example Create an object id from raw bytes.
    #   BSON::ObjectId.from_data(data)
    # @param data [String] The raw bytes.
    # @return [ObjectId] The new object id.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#252
    def from_data(data); end

    # Create a new object id from a string.
    #
    # @example Create an object id from the string.
    #   BSON::ObjectId.from_string(id)
    # @param string [String] The string to create the id from.
    # @raise [BSON::ObjectId::Invalid] If the provided string is invalid.
    # @return [BSON::ObjectId] The new object id.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#270
    def from_string(string); end

    # Create a new object id from a time.
    #
    # @example Create an object id from a time.
    #   BSON::ObjectId.from_time(time)
    # @example Create an object id from a time, ensuring uniqueness.
    #   BSON::ObjectId.from_time(time, unique: true)
    # @option options
    # @param time [Time] The time to generate from.
    # @param options [Hash] The options.
    # @return [ObjectId] The new object id.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#294
    def from_time(time, options = T.unsafe(nil)); end

    # Determine if the provided string is a legal object id.
    #
    # @example Is the string a legal object id?
    #   BSON::ObjectId.legal?(string)
    # @param string [String] The string to check.
    # @return [true, false] If the string is legal.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#308
    def legal?(string); end

    # Executes the provided block only if the size of the provided object is
    # 12. Used in legacy id repairs.
    #
    # @example Execute in a repairing block.
    #   BSON::ObjectId.repair("test") { obj }
    # @param object [String, Array] The object to repair.
    # @raise [Invalid] If the array is not 12 elements.
    # @return [String] The result of the block.
    # @since 2.0.0
    #
    # source://bson//lib/bson/object_id.rb#325
    def repair(object); end
  end
end

# A object_id is type 0x07 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/object_id.rb#34
BSON::ObjectId::BSON_TYPE = T.let(T.unsafe(nil), String)

# Inner class that encapsulates the behaviour of actually generating each
# part of the ObjectId.
#
# @api private
# @since 2.0.0
#
# source://bson//lib/bson/object_id.rb#340
class BSON::ObjectId::Generator
  # Instantiate the new object id generator. Will set the machine id once
  # on the initial instantiation.
  #
  # @api private
  # @example Instantiate the generator.
  #   BSON::ObjectId::Generator.new
  # @return [Generator] a new instance of Generator
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#354
  def initialize; end

  # Generate object id data for a given time using the provided counter.
  #
  # @api private
  # @example Generate the object id bytes.
  #   generator.generate(time)
  # @param time [Integer] The time since epoch in seconds.
  # @param counter [Integer] The optional counter.
  # @return [String] The raw object id bytes.
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#392
  def generate(time, counter = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#345
  def machine_id; end

  # Return object id data based on the current time, incrementing the
  # object id counter. Will use the provided time if not nil.
  #
  # @api private
  # @example Get the next object id data.
  #   generator.next_object_id
  # @param time [Time] The optional time to generate with.
  # @return [String] The raw object id bytes.
  # @since 2.0.0
  def next_object_id(*_arg0); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://bson//lib/bson/object_id.rb#403
  def process_id; end
end

# Raised when trying to create an object id with invalid data.
#
# @since 2.0.0
#
# source://bson//lib/bson/object_id.rb#205
class BSON::ObjectId::Invalid < ::RuntimeError; end

# Injects behaviour for encoding OpenStruct objects using hashes
# to raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 4.2.0
#
# source://bson//lib/bson/open_struct.rb#24
module BSON::OpenStruct
  # The BSON type for OpenStruct objects is the Hash type of 0x03.
  #
  # @example Get the bson type.
  #   struct.bson_type
  # @return [String] The character 0x03.
  # @since 4.2.0
  #
  # source://bson//lib/bson/open_struct.rb#52
  def bson_type; end

  # Get the OpenStruct as encoded BSON.
  #
  # @example Get the OpenStruct object as encoded BSON.
  #   OpenStruct.new({ "field" => "value" }).to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/open_struct.rb#36
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# Injects behaviour for encoding and decoding regular expression values to
# and from raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/regexp.rb#24
module BSON::Regexp
  include ::BSON::JSON

  # Get the regexp as JSON hash data.
  #
  # @example Get the regexp as a JSON hash.
  #   regexp.as_json
  # @return [Hash] The regexp as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#67
  def as_json(*args); end

  # Get the regular expression as encoded BSON.
  #
  # @example Get the regular expression as encoded BSON.
  #   %r{\d+}.to_bson
  # @note From the BSON spec: The first cstring is the regex pattern,
  #   the second is the regex options string. Options are identified
  #   by characters, which must be stored in alphabetical order.
  #   Valid options are 'i' for case insensitive matching,
  #   'm' for multiline matching, 'x' for verbose mode,
  #   'l' to make \w, \W, etc. locale dependent,
  #   's' for dotall mode ('.' matches everything),
  #   and 'u' to make \w, \W, etc. match unicode.
  # @param buffer [BSON::ByteBuffer] The byte buffer to append to.
  # @param validating_keys [true, false]
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#93
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  private

  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#113
  def bson_dotall; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#105
  def bson_extended; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#109
  def bson_ignorecase; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#100
  def bson_options; end
end

# A regular expression is type 0x0B in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/regexp.rb#30
BSON::Regexp::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/regexp.rb#277
module BSON::Regexp::ClassMethods
  # Deserialize the regular expression from BSON.
  #
  # @option opts
  # @param buffer [ByteBuffer] The byte buffer.
  # @param opts [Hash] a customizable set of options
  # @return [Regexp] The decoded regular expression.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/regexp.rb#290
  def from_bson(buffer, **opts); end
end

# Extended value constant.
#
# @since 3.2.6
#
# source://bson//lib/bson/regexp.rb#35
BSON::Regexp::EXTENDED_VALUE = T.let(T.unsafe(nil), String)

# Ignore case constant.
#
# @since 3.2.6
#
# source://bson//lib/bson/regexp.rb#40
BSON::Regexp::IGNORECASE_VALUE = T.let(T.unsafe(nil), String)

# Multiline constant.
#
# @since 3.2.6
#
# source://bson//lib/bson/regexp.rb#45
BSON::Regexp::MULTILINE_VALUE = T.let(T.unsafe(nil), String)

# Newline constant.
#
# @since 3.2.6
#
# source://bson//lib/bson/regexp.rb#50
BSON::Regexp::NEWLINE_VALUE = T.let(T.unsafe(nil), String)

# Ruby multiline constant.
#
# @deprecated Will be removed in 5.0
# @since 3.2.6
#
# source://bson//lib/bson/regexp.rb#57
BSON::Regexp::RUBY_MULTILINE_VALUE = T.let(T.unsafe(nil), String)

# Represents the raw values for the regular expression.
#
# @see https://jira.mongodb.org/browse/RUBY-698
# @since 3.0.0
#
# source://bson//lib/bson/regexp.rb#123
class BSON::Regexp::Raw
  include ::BSON::JSON

  # Initialize the new raw regular expression.
  #
  # @example Initialize the raw regexp.
  #   Raw.new(pattern, options)
  # @note The ability to specify options as an Integer is deprecated.
  #   Please specify options as a String. The ability to pass options as
  #   as Integer will be removed in version 5.0.0.
  # @param pattern [String] The regular expression pattern.
  # @param options [String, Integer] The options.
  # @return [Raw] a new instance of Raw
  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#157
  def initialize(pattern, options = T.unsafe(nil)); end

  # Check equality of the raw bson regexp against another.
  #
  # @example Check if the raw bson regexp is equal to the other.
  #   raw_regexp == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.2.0
  #
  # source://bson//lib/bson/regexp.rb#253
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#235
  def as_extended_json(**opts); end

  # Get the raw BSON regexp as JSON hash data.
  #
  # @example Get the raw regexp as a JSON hash.
  #   raw_regexp.as_json
  # @return [Hash] The raw regexp as a JSON hash.
  # @since 4.2.0
  #
  # source://bson//lib/bson/regexp.rb#224
  def as_json(*args); end

  # Compile the Regular expression into the native type.
  #
  # @example Compile the regular expression.
  #   raw.compile
  # @return [::Regexp] The compiled regular expression.
  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#140
  def compile; end

  # Check equality of the raw bson regexp against another.
  #
  # @example Check if the raw bson regexp is equal to the other.
  #   raw_regexp == other
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 4.2.0
  #
  # source://bson//lib/bson/regexp.rb#253
  def eql?(other); end

  # @return [Integer] options The options.
  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#130
  def options; end

  # @return [String] pattern The regex pattern.
  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#127
  def pattern; end

  # Allow automatic delegation of methods to the Regexp object
  # returned by +compile+.
  #
  # @param method [String] The name of a method.
  # @return [Boolean]
  # @since 3.1.0
  #
  # source://bson//lib/bson/regexp.rb#178
  def respond_to?(method, include_private = T.unsafe(nil)); end

  # Encode the Raw Regexp object to BSON.
  #
  # @example Get the raw regular expression as encoded BSON.
  #   raw_regexp.to_bson
  # @note From the BSON spec: The first cstring is the regex pattern,
  #   the second is the regex options string. Options are identified
  #   by characters, which must be stored in alphabetical order.
  #   Valid options are 'i' for case insensitive matching,
  #   'm' for multiline matching, 'x' for verbose mode,
  #   'l' to make \w, \W, etc. locale dependent,
  #   's' for dotall mode ('.' matches everything),
  #   and 'u' to make \w, \W, etc. match unicode.
  # @param buffer [BSON::ByteBuffer] The byte buffer to append to.
  # @param validating_keys [true, false]
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 4.2.0
  #
  # source://bson//lib/bson/regexp.rb#210
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  private

  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#262
  def method_missing(method, *arguments); end

  # @since 3.0.0
  #
  # source://bson//lib/bson/regexp.rb#267
  def options_to_int; end
end

# Provides constant values for each to the BSON types and mappings from raw
# bytes back to these types.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/registry.rb#24
module BSON::Registry
  extend ::BSON::Registry

  # Get the class for the single byte identifier for the type in the BSON
  # specification.
  #
  # @example Get the type for the byte.
  #   BSON::Registry.get("\x01")
  # @return [Class] The corresponding Ruby class for the type.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/registry.rb#43
  def get(byte, field = T.unsafe(nil)); end

  # Register the Ruby type for the corresponding single byte.
  #
  # @example Register the type.
  #   BSON::Registry.register("\x01", Float)
  # @param byte [String] The single byte.
  # @param type [Class] The class the byte maps to.
  # @return [Class] The class.
  # @since 2.0.0
  #
  # source://bson//lib/bson/registry.rb#62
  def register(byte, type); end

  private

  # @since 2.0.0
  #
  # source://bson//lib/bson/registry.rb#74
  def define_type_reader(type); end

  # @raise [UnsupportedType]
  # @since 2.0.0
  #
  # source://bson//lib/bson/registry.rb#80
  def handle_unsupported_type!(byte, field); end
end

# A Mapping of all the BSON types to their corresponding Ruby classes.
#
# @since 2.0.0
#
# source://bson//lib/bson/registry.rb#30
BSON::Registry::MAPPINGS = T.let(T.unsafe(nil), Hash)

# Raised when trying to get a type from the registry that doesn't exist.
#
# @since 4.1.0
#
# source://bson//lib/bson/registry.rb#70
class BSON::Registry::UnsupportedType < ::RuntimeError; end

# Provides behaviour to special values that exist in the BSON spec that don't
# have a native type, like $minKey and $maxKey.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/specialized.rb#24
module BSON::Specialized
  mixes_in_class_methods ::BSON::Specialized::ClassMethods

  # Determine if the min key is equal to another object.
  #
  # @example Check min key equality.
  #   BSON::MinKey.new == object
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/specialized.rb#36
  def ==(other); end

  # Encode the min key - has no value since it only needs the type and field
  # name when being encoded.
  #
  # @example Encode the min key value.
  #   min_key.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @since 2.0.0
  #
  # source://bson//lib/bson/specialized.rb#49
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # @since 2.0.0
    #
    # source://bson//lib/bson/specialized.rb#55
    def included(klass); end
  end
end

# @since 2.0.0
#
# source://bson//lib/bson/specialized.rb#59
module BSON::Specialized::ClassMethods
  # Deserialize from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Specialized] The decoded specialized class.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/specialized.rb#72
  def from_bson(buffer, **options); end
end

# Injects behaviour for encoding and decoding string values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/string.rb#25
module BSON::String
  # Get the string as encoded BSON.
  #
  # @example Get the string as encoded BSON.
  #   "test".to_bson
  # @raise [EncodingError] If the string is not UTF-8.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/string.rb#49
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Get the string as a BSON key name encoded C string with checking for special characters.
  #
  # @example Get the string as key name.
  #   "test".to_bson_key
  # @raise [EncodingError] If the string is not UTF-8.
  # @raise [IllegalKey] If validating keys and it contains a '.' or starts
  #   with '$'.
  # @return [String] The encoded string.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/string.rb#68
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  # Convert the string to an object id. This will only work for strings of size
  # 12.
  #
  # @example Convert the string to an object id.
  #   string.to_bson_object_id
  # @note This is used for repairing legacy bson data.
  # @raise [BSON::ObjectId::Invalid] If the string is not 12 elements.
  # @return [String] The raw object id bytes.
  # @since 2.0.0
  #
  # source://bson//lib/bson/string.rb#88
  def to_bson_object_id; end

  # Convert the string to a hexidecimal representation.
  #
  # @example Convert the string to hex.
  #   "\x01".to_hex_string
  # @return [String] The string as hex.
  # @since 2.0.0
  #
  # source://bson//lib/bson/string.rb#100
  def to_hex_string; end
end

# A string is type 0x02 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/string.rb#30
BSON::String::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/string.rb#122
module BSON::String::ClassMethods
  # Deserialize a string from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Regexp] The decoded string.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/string.rb#135
  def from_bson(buffer, **options); end
end

# Regex for matching illegal BSON keys.
#
# @since 4.1.0
#
# source://bson//lib/bson/string.rb#35
BSON::String::ILLEGAL_KEY = T.let(T.unsafe(nil), Regexp)

# Raised when validating keys and a key is illegal in MongoDB
#
# @since 4.1.0
#
# source://bson//lib/bson/string.rb#107
class BSON::String::IllegalKey < ::RuntimeError
  # Instantiate the exception.
  #
  # @example Instantiate the exception.
  #   BSON::Object::IllegalKey.new(string)
  # @param string [String] The illegal string.
  # @return [IllegalKey] a new instance of IllegalKey
  # @since 4.1.0
  #
  # source://bson//lib/bson/string.rb#117
  def initialize(string); end
end

# Injects behaviour for encoding and decoding symbol values to and from
# raw bytes as specified by the BSON spec.
#
# @note Symbols are deprecated in the BSON spec, but they are still
#   currently supported here for backwards compatibility.
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/symbol.rb#27
module BSON::Symbol
  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#100
  def as_extended_json(**options); end

  # Symbols are serialized as strings as symbols are now removed from the
  # BSON specification. Therefore the bson_type when serializing must be a
  # string.
  #
  # @example Get the BSON type for the symbol.
  #   :test.bson_type
  # @return [String] The single byte BSON type.
  # @see http://bsonspec.org/#/specification
  # @since 4.0.0
  #
  # source://bson//lib/bson/symbol.rb#46
  def bson_type; end

  # Get the symbol as encoded BSON.
  #
  # @example Get the symbol as encoded BSON.
  #   :test.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#60
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Get the symbol as a BSON key name encoded C symbol.
  #
  # @example Get the symbol as a key name.
  #   :test.to_bson_key
  # @return [String] The encoded symbol as a BSON key.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#74
  def to_bson_key(validating_keys = T.unsafe(nil)); end

  # Converts the symbol to a normalized key in a BSON document.
  #
  # @example Convert the symbol to a normalized key.
  #   :test.to_bson_normalized_key
  # @return [String] The symbol as a non interned string.
  # @since 3.0.0
  #
  # source://bson//lib/bson/symbol.rb#89
  def to_bson_normalized_key; end
end

# A symbol is type 0x0E in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/symbol.rb#32
BSON::Symbol::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/symbol.rb#174
module BSON::Symbol::ClassMethods
  # Deserialize a symbol from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Symbol | BSON::Symbol::Raw] The decoded symbol.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#187
  def from_bson(buffer, **options); end
end

# @since 2.0.0
#
# source://bson//lib/bson/symbol.rb#104
class BSON::Symbol::Raw
  # Create a BSON Symbol
  #
  # @param str_or_sym [String | Symbol] The symbol represented by this
  #   object. Can be specified as a Symbol or a String.
  # @return [Raw] a new instance of Raw
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#111
  def initialize(str_or_sym); end

  # Check equality of the raw bson symbol against another.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#138
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # This method returns the integer value if relaxed representation is
  # requested, otherwise a $numberLong hash.
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Hash | Integer] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#169
  def as_extended_json(**options); end

  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#155
  def bson_type; end

  # Check equality of the raw bson symbol against another.
  #
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#138
  def eql?(other); end

  # Get the symbol as encoded BSON.
  #
  # @raise [EncodingError] If the symbol is not UTF-8.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#151
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  # Get the underlying symbol as a Ruby string.
  #
  # @return [String] The symbol as a string.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#129
  def to_s; end

  # Get the underlying symbol as a Ruby symbol.
  #
  # @return [Symbol] The symbol represented by this BSON object.
  # @since 2.0.0
  #
  # source://bson//lib/bson/symbol.rb#122
  def to_sym; end
end

# Injects behaviour for encoding and decoding time values to
# and from raw bytes as specified by the BSON spec.
#
# @note Ruby time can have nanosecond precision:
#   +Time.utc(2020, 1, 1, 0, 0, 0, 999_999_999/1000r)+
#   +Time#usec+ returns the number of microseconds in the time, and
#   if the time has nanosecond precision the sub-microsecond part is
#   truncated (the value is floored to the nearest millisecond).
#   MongoDB only supports millisecond precision; we truncate the
#   sub-millisecond part of microseconds (floor to the nearest millisecond).
#   Note that if a time is constructed from a floating point value,
#   the microsecond value may round to the starting floating point value
#   but due to flooring, the time after serialization may end up to
#   be different than the starting floating point value.
#   It is recommended that time calculations use integer math only.
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/time.rb#38
module BSON::Time
  # @since 2.0.0
  #
  # source://bson//lib/bson/time.rb#92
  def _bson_to_i; end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @note The time is floored to the nearest millisecond.
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/time.rb#71
  def as_extended_json(**options); end

  # Get the time as encoded BSON.
  #
  # @example Get the time as encoded BSON.
  #   Time.new(2012, 1, 1, 0, 0, 0).to_bson
  # @note The time is floored to the nearest millisecond.
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/time.rb#57
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# A time is type 0x09 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/time.rb#43
BSON::Time::BSON_TYPE = T.let(T.unsafe(nil), String)

# @since 2.0.0
#
# source://bson//lib/bson/time.rb#102
module BSON::Time::ClassMethods
  # Deserialize UTC datetime from BSON.
  #
  # @option options
  # @param buffer [ByteBuffer] The byte buffer.
  # @param options [Hash] a customizable set of options
  # @return [Time] The decoded UTC datetime.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/time.rb#115
  def from_bson(buffer, **options); end
end

# Injects behaviour for encoding ActiveSupport::TimeWithZone values to
# raw bytes as specified by the BSON spec for time.
#
# @see http://bsonspec.org/#/specification
# @since 4.4.0
#
# source://bson//lib/bson/time_with_zone.rb#26
module BSON::TimeWithZone
  # Get the BSON type for the ActiveSupport::TimeWithZone.
  #
  # As the ActiveSupport::TimeWithZone is converted to a time, this returns
  # the BSON type for time.
  #
  # @since 4.4.0
  #
  # source://bson//lib/bson/time_with_zone.rb#46
  def bson_type; end

  # Get the ActiveSupport::TimeWithZone as encoded BSON.
  #
  # @example Get the ActiveSupport::TimeWithZone as encoded BSON.
  #   Time.utc(2012, 12, 12, 0, 0, 0).in_time_zone("Pacific Time (US & Canada)").to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 4.4.0
  #
  # source://bson//lib/bson/time_with_zone.rb#38
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# Represents a timestamp type, which is predominately used for sharding.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/timestamp.rb#23
class BSON::Timestamp
  include ::BSON::JSON
  include ::Comparable

  # Instantiate the new timestamp.
  #
  # @example Instantiate the timestamp.
  #   BSON::Timestamp.new(5, 30)
  # @param seconds [Integer] The number of seconds.
  # @param increment [Integer] The increment value.
  # @return [Timestamp] a new instance of Timestamp
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#113
  def initialize(seconds, increment); end

  # Determine if this timestamp is greater or less than another object.
  #
  # @example Compare the timestamp.
  #   timestamp < other
  # @param other [Object] The object to compare against.
  # @raise [ArgumentError]
  # @return [true, false] The result of the comparison.
  # @since 4.3.0
  #
  # source://bson//lib/bson/timestamp.rb#72
  def <=>(other); end

  # Determine if this timestamp is equal to another object.
  #
  # @example Check the timestamp equality.
  #   timestamp == other
  # @param other [Object] The object to compare against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#57
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#100
  def as_extended_json(**options); end

  # Get the timestamp as JSON hash data.
  #
  # @deprecated Use as_extended_json instead.
  # @example Get the timestamp as a JSON hash.
  #   timestamp.as_json
  # @return [Hash] The timestamp as a JSON hash.
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#89
  def as_json(*args); end

  def bson_type; end

  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#45
  def increment; end

  # @return [Integer] The number of seconds.
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#45
  def seconds; end

  # Get the timestamp as its encoded raw BSON bytes.
  #
  # @example Get the timestamp as BSON.
  #   timestamp.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/timestamp.rb#127
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end

  class << self
    # Deserialize timestamp from BSON.
    #
    # @option options
    # @param buffer [ByteBuffer] The byte buffer.
    # @param options [Hash] a customizable set of options
    # @return [Timestamp] The decoded timestamp.
    # @see http://bsonspec.org/#/specification
    # @since 2.0.0
    #
    # source://bson//lib/bson/timestamp.rb#143
    def from_bson(buffer, **options); end
  end
end

# A timestamp is type 0x11 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/timestamp.rb#30
BSON::Timestamp::BSON_TYPE = T.let(T.unsafe(nil), String)

# Error message if an object other than a Timestamp is compared with this object.
#
# @since 4.3.0
#
# source://bson//lib/bson/timestamp.rb#35
BSON::Timestamp::COMPARISON_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# Injects behaviour for encoding and decoding true values to and from
# raw bytes as specified by the BSON spec.
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/true_class.rb#24
module BSON::TrueClass
  # The BSON type for true values is the general boolean type of 0x08.
  #
  # @example Get the bson type.
  #   false.bson_type
  # @return [String] The character 0x08.
  # @since 2.0.0
  #
  # source://bson//lib/bson/true_class.rb#39
  def bson_type; end

  # Get the true boolean as encoded BSON.
  #
  # @example Get the true boolean as encoded BSON.
  #   true.to_bson
  # @return [BSON::ByteBuffer] The buffer with the encoded object.
  # @see http://bsonspec.org/#/specification
  # @since 2.0.0
  #
  # source://bson//lib/bson/true_class.rb#53
  def to_bson(buffer = T.unsafe(nil), validating_keys = T.unsafe(nil)); end
end

# A true value in the BSON spec is 0x01.
#
# @since 2.0.0
#
# source://bson//lib/bson/true_class.rb#29
BSON::TrueClass::TRUE_BYTE = T.let(T.unsafe(nil), String)

# Constant for UTF-8 string encoding.
#
# @since 2.0.0
#
# source://bson//lib/bson.rb#57
BSON::UTF8 = T.let(T.unsafe(nil), String)

# Represents the Undefined BSON type
#
# @see http://bsonspec.org/#/specification
# @since 2.0.0
#
# source://bson//lib/bson/undefined.rb#23
class BSON::Undefined
  include ::BSON::Specialized
  extend ::BSON::Specialized::ClassMethods

  # Determine if undefined is equal to another object.
  #
  # @example Check undefined equality.
  #   BSON::Undefined.new == object
  # @param other [Object] The object to check against.
  # @return [true, false] If the objects are equal.
  # @since 2.0.0
  #
  # source://bson//lib/bson/undefined.rb#41
  def ==(other); end

  # Converts this object to a representation directly serializable to
  # Extended JSON (https://github.com/mongodb/specifications/blob/master/source/extended-json.rst).
  #
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [Hash] The extended json representation.
  # @since 2.0.0
  #
  # source://bson//lib/bson/undefined.rb#52
  def as_extended_json(**options); end

  def bson_type; end
end

# Undefined is type 0x06 in the BSON spec.
#
# @since 2.0.0
#
# source://bson//lib/bson/undefined.rb#29
BSON::Undefined::BSON_TYPE = T.let(T.unsafe(nil), String)

# source://bson//lib/bson/version.rb#17
BSON::VERSION = T.let(T.unsafe(nil), String)

class BigDecimal < ::Numeric
  include ::BSON::BigDecimal
  extend ::BSON::BigDecimal::ClassMethods
end

class Date
  include ::Comparable
  include ::BSON::Date
end

class DateTime < ::Date
  include ::BSON::DateTime
end

class FalseClass
  include ::BSON::FalseClass
end

class Float < ::Numeric
  include ::BSON::Float
  extend ::BSON::Float::ClassMethods
end

class Hash
  include ::Enumerable
  include ::BSON::Hash
  extend ::BSON::Hash::ClassMethods
end

class Integer < ::Numeric
  include ::BSON::Integer
end

class NilClass
  include ::BSON::Specialized
  include ::BSON::NilClass
  extend ::BSON::NilClass::ClassMethods
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::BSON::Object
end

class OpenStruct
  include ::BSON::OpenStruct
end

class Regexp
  include ::BSON::JSON
  include ::BSON::Regexp
  extend ::BSON::Regexp::ClassMethods
end

class String
  include ::Comparable
  include ::BSON::String
  extend ::BSON::String::ClassMethods
end

class Symbol
  include ::Comparable
  include ::BSON::Symbol
  extend ::BSON::Symbol::ClassMethods
end

class Time
  include ::Comparable
  include ::BSON::Time
  extend ::BSON::Time::ClassMethods
end

class TrueClass
  include ::BSON::TrueClass
end
