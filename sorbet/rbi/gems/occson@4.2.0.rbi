# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `occson` gem.
# Please instead update this file by running `bin/tapioca gem occson`.

# Top level `Occson` namespace.
#
# source://occson//lib/occson/version.rb#3
module Occson; end

# source://occson//lib/occson/commands/copy.rb#4
module Occson::Commands; end

# The copy command, responsible for copying a target to a destination, performing encryption
# and decryption as necessary.
#
# The target and destinations can be:
#
# - STDIN/STDOUT: a `-` sign is interpreted as these standard streams
#
# - The Occson server: strings beginning with `occson://` or `http(s)://` are interpreted as such
#
# - local files: everything not matching the previous descriptions is assumed to
#   be a path on the local system
#
# source://occson//lib/occson/commands/copy.rb#16
class Occson::Commands::Copy
  # Builds an instance of the Copy command.
  #
  # @param source [String] `-` for STDIN, an URI or a local file path
  # @param destination [String] `-` for STDOUT, an URI or a local file path
  # @param access_token [String] Occson access token
  # @param passphrase [String] Passphrase used for encryption of the document
  # @param force [Boolean] Whether to overwrite target document in Occson, if any. Default `false`.
  # @return [Copy] a new instance of Copy
  #
  # source://occson//lib/occson/commands/copy.rb#24
  def initialize(source, destination, access_token, passphrase, force: T.unsafe(nil)); end

  # Performs a transfer between locations - an upload if `@source` is local or STDIN,
  # a download if `@source` is an URI.
  #
  # No guarantees are made about the return values of this method.
  #
  # source://occson//lib/occson/commands/copy.rb#36
  def call; end

  private

  # source://occson//lib/occson/commands/copy.rb#46
  def download; end

  # @return [Boolean]
  #
  # source://occson//lib/occson/commands/copy.rb#42
  def download?; end

  # source://occson//lib/occson/commands/copy.rb#53
  def upload; end
end

# source://occson//lib/occson/commands/run.rb#5
class Occson::Commands::Run
  # @return [Run] a new instance of Run
  #
  # source://occson//lib/occson/commands/run.rb#6
  def initialize(source, command, arguments, access_token, passphrase); end

  # source://occson//lib/occson/commands/run.rb#14
  def call; end
end

# Handles client-side decryption for documents.
#
# The decrypter uses AES-256 in CBC mode internally. A salt is
# expected in bytes 8..15, with ciphertext occupying the
# further bytes.
#
# source://occson//lib/occson/decrypter.rb#9
class Occson::Decrypter
  # Constructs a Decrypter instance with given passphrase and content.
  #
  # @example
  #   Occson::Decrypter.new('the content passphrase', content)
  # @param passphrase [String] Passphrase for content decryption
  # @param content [String] Encrypted document content
  # @return [Decrypter] a new instance of Decrypter
  #
  # source://occson//lib/occson/decrypter.rb#17
  def initialize(passphrase, content); end

  # Performs decryption, returning plaintext if passphrase matched.
  #
  # @return [String] Plaintext document content
  #
  # source://occson//lib/occson/decrypter.rb#25
  def call; end

  private

  # source://occson//lib/occson/decrypter.rb#41
  def ciphertext_salt; end

  # source://occson//lib/occson/decrypter.rb#33
  def decryptor; end

  # source://occson//lib/occson/decrypter.rb#45
  def encrypted; end

  # source://occson//lib/occson/decrypter.rb#37
  def openssl_salted_ciphertext; end
end

# An abstraction for the Document concept. Simplifies building URLs,
# uploading and downloading contents. Abstracts away workspaces due to
# the use of access tokens in constructions.
#
# source://occson//lib/occson/document.rb#7
class Occson::Document
  # Constructs a Document instance from a given URI, access token and passphrase.
  #
  # @example
  #   uri = 'occson://path/to/file.yml'
  #   access_token = 'f30b5450421362c9ca0b'
  #   passphrase = 'my document passphrase'
  #
  #   Occson::Document.new(uri, access_token, passphrase)
  # @param uri [String] Document URI. Accepts `occson://` as shorthand for Occson location.
  # @param access_token [String] Occson access token.
  # @param passphrase [String] Document passphrase, used in encryption and decryption.
  # @return [Document] a new instance of Document
  #
  # source://occson//lib/occson/document.rb#20
  def initialize(uri, access_token, passphrase); end

  # Downloads the encrypted document at `@uri` and returns the plaintext
  # contents (given that `@passphrase` matches).
  #
  # @example
  #   plaintext = document.download
  # @return [String] Decrypted document contents
  #
  # source://occson//lib/occson/document.rb#44
  def download; end

  # Uploads the given plaintext `content` to target URI.
  #
  # @example
  #   document.upload('My example plaintext.')
  # @param content [String] Plaintext to be encrypted and uploaded.
  # @param force [Boolean] Whether to overwrite target document in Occson, if any. Default `false`.
  #
  # source://occson//lib/occson/document.rb#33
  def upload(content, force: T.unsafe(nil)); end

  private

  # source://occson//lib/occson/document.rb#50
  def build_uri(uri); end
end

# Downloads and decrypts the document at given URI with given access token.
# Decryption occurs using given passphrase.
#
# source://occson//lib/occson/downloader.rb#6
class Occson::Downloader
  # Constructs a Downloader instance from a given URI, access token and passphrase.
  #
  # @example
  #   uri = 'occson://path/to/file.yml'
  #   access_token = 'f30b5450421362c9ca0b'
  #   passphrase = 'my document passphrase'
  #
  #   Occson::Downloader.new(uri, access_token, passphrase)
  # @param uri [String] Document URI. Accepts `occson://` as shorthand for Occson location.
  # @param access_token [String] Occson access token.
  # @param passphrase [String] Document passphrase, used in encryption and decryption.
  # @return [Downloader] a new instance of Downloader
  #
  # source://occson//lib/occson/downloader.rb#19
  def initialize(uri, access_token, passphrase); end

  # Performs the download and decryption of document.
  #
  # @return [String|nil] Decrypted body of the document or `nil` in case the
  #   server did not respond with a `200` HTTP code.
  #
  # source://occson//lib/occson/downloader.rb#29
  def call; end

  private

  # source://occson//lib/occson/downloader.rb#53
  def headers; end

  # source://occson//lib/occson/downloader.rb#41
  def http; end

  # source://occson//lib/occson/downloader.rb#47
  def request; end
end

# Encrypts the given content for transmission. Uses AES-256 in CBC
# mode internally, with salting.
#
# source://occson//lib/occson/encrypter.rb#6
class Occson::Encrypter
  # Constructs an Encrypter instance with given passphrase, content and salt.
  # Salt _must_ be exactly 8 characters long.
  #
  # @example
  #   passphrase = 'my long document passphrase'
  #   content = 'very secret content'
  #   salt = '12345678'
  #
  #   Occson::Encrypter.new(passphrase, content, salt)
  # @param passphrase [String] Document passphrase.
  # @param content [String] Plaintext content to be encrypted.
  # @param salt [String] Salt to reinforce the encryption, included in
  #   plaintext in the encrypted document.
  # @return [Encrypter] a new instance of Encrypter
  #
  # source://occson//lib/occson/encrypter.rb#21
  def initialize(passphrase, content, salt); end

  # Performs the actual encryption, returning base64-encoded ciphertext.
  #
  # @return [String] base64-encoded ciphertext
  #
  # source://occson//lib/occson/encrypter.rb#30
  def call; end

  private

  # source://occson//lib/occson/encrypter.rb#41
  def encryptor; end
end

# Encrypts and uploads the document to Occson.
#
# source://occson//lib/occson/uploader.rb#5
class Occson::Uploader
  # Constructs an Uploader instance from a given URI, content, access token and passphrase.
  #
  # @example
  #   uri = 'occson://path/to/file.yml'
  #   content = 'my very secret message'
  #   access_token = 'f30b5450421362c9ca0b'
  #   passphrase = 'my document passphrase'
  #
  #   Occson::Uploader.new(uri, access_token, passphrase)
  # @param uri [String] Document URI. Accepts `occson://` as shorthand for Occson location.
  # @param content [String] Plaintext for encryption and upload.
  # @param access_token [String] Occson access token.
  # @param passphrase [String] Document passphrase, used in encryption and decryption.
  # @param force [Boolean] Whether to overwrite target document in Occson, if any. Default `false`.
  # @return [Uploader] a new instance of Uploader
  #
  # source://occson//lib/occson/uploader.rb#21
  def initialize(uri, content, access_token, passphrase, force: T.unsafe(nil)); end

  # Performs the actual upload to server.
  #
  # @return [Boolean] `true` for a successful upload, `false` otherwise
  #
  # source://occson//lib/occson/uploader.rb#32
  def call; end

  private

  # source://occson//lib/occson/uploader.rb#58
  def encrypted_content; end

  # source://occson//lib/occson/uploader.rb#51
  def headers; end

  # source://occson//lib/occson/uploader.rb#39
  def http; end

  # source://occson//lib/occson/uploader.rb#45
  def request; end

  # source://occson//lib/occson/uploader.rb#62
  def salt; end
end

# Occson gem version definition
#
# source://occson//lib/occson/version.rb#5
Occson::VERSION = T.let(T.unsafe(nil), String)
