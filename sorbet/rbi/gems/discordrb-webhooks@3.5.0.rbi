# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `discordrb-webhooks` gem.
# Please instead update this file by running `bin/tapioca gem discordrb-webhooks`.

# Webhook support for discordrb
#
# source://discordrb-webhooks//lib/discordrb/webhooks/version.rb#4
module Discordrb
  class << self
    # source://discordrb/3.5.0/lib/discordrb.rb#49
    def id_compare(one_id, other); end

    # source://discordrb/3.5.0/lib/discordrb.rb#71
    def split_message(msg); end

    # source://discordrb/3.5.0/lib/discordrb.rb#113
    def timestamp(time, style = T.unsafe(nil)); end
  end
end

# Webhook client
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#3
module Discordrb::Webhooks; end

# A class that acts as a builder for a webhook message object.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#7
class Discordrb::Webhooks::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#8
  def initialize(content: T.unsafe(nil), username: T.unsafe(nil), avatar_url: T.unsafe(nil), tts: T.unsafe(nil), file: T.unsafe(nil), embeds: T.unsafe(nil), allowed_mentions: T.unsafe(nil)); end

  # Adds an embed to this message.
  #
  # @param embed [Embed] The embed to add.
  # @raise [ArgumentError]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#47
  def <<(embed); end

  # Convenience method to add an embed using a block-style builder pattern
  #
  # @example Add an embed to a message
  #   builder.add_embed do |embed|
  #   embed.title = 'Testing'
  #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://i.imgur.com/PcMltU7.jpg')
  #   end
  # @param embed [Embed, nil] The embed to start the building process with, or nil if one should be created anew.
  # @return [Embed] The created embed.
  # @yield [embed]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#61
  def add_embed(embed = T.unsafe(nil)); end

  # @return [Discordrb::AllowedMentions, Hash] Mentions that are allowed to ping in this message.
  # @see https://discord.com/developers/docs/resources/channel#allowed-mentions-object
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#76
  def allowed_mentions; end

  # @return [Discordrb::AllowedMentions, Hash] Mentions that are allowed to ping in this message.
  # @see https://discord.com/developers/docs/resources/channel#allowed-mentions-object
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#76
  def allowed_mentions=(_arg0); end

  # The URL of an image file to be used as an avatar. If this is not set, the default avatar from the webhook's
  # settings will be used instead.
  #
  # @return [String] the avatar URL.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#30
  def avatar_url; end

  # The URL of an image file to be used as an avatar. If this is not set, the default avatar from the webhook's
  # settings will be used instead.
  #
  # @return [String] the avatar URL.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#30
  def avatar_url=(_arg0); end

  # The content of the message. May be 2000 characters long at most.
  #
  # @return [String] the content of the message.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#20
  def content; end

  # The content of the message. May be 2000 characters long at most.
  #
  # @return [String] the content of the message.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#20
  def content=(_arg0); end

  # @return [Array<Embed>] the embeds attached to this message.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#72
  def embeds; end

  # @return [File, nil] the file attached to this message.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#69
  def file; end

  # Sets a file to be sent together with the message. Mutually exclusive with embeds; a webhook message can contain
  # either a file to be sent or an embed.
  #
  # @param file [File] A file to be sent.
  # @raise [ArgumentError]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#39
  def file=(file); end

  # @return [Hash] a hash representation of the created message, for JSON format.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#79
  def to_json_hash; end

  # @return [Hash] a hash representation of the created message, for multipart format.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#91
  def to_multipart_hash; end

  # Whether this message should use TTS or not. By default, it doesn't.
  #
  # @return [true, false] the TTS status.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#34
  def tts; end

  # Whether this message should use TTS or not. By default, it doesn't.
  #
  # @return [true, false] the TTS status.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#34
  def tts=(_arg0); end

  # The username the webhook will display as. If this is not set, the default username set in the webhook's settings
  # will be used instead.
  #
  # @return [String] the username.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#25
  def username; end

  # The username the webhook will display as. If this is not set, the default username set in the webhook's settings
  # will be used instead.
  #
  # @return [String] the username.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/builder.rb#25
  def username=(_arg0); end
end

# A client for a particular webhook added to a Discord channel.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#10
class Discordrb::Webhooks::Client
  # Create a new webhook
  #
  # @param url [String] The URL to post messages to.
  # @param id [Integer] The webhook's ID. Will only be used if `url` is not
  #   set.
  # @param token [String] The webhook's authorisation token. Will only be used
  #   if `url` is not set.
  # @return [Client] a new instance of Client
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#17
  def initialize(url: T.unsafe(nil), id: T.unsafe(nil), token: T.unsafe(nil)); end

  # Delete this webhook.
  #
  # @note This is permanent and cannot be undone.
  # @param reason [String, nil] The reason this webhook was deleted.
  # @return [RestClient::Response] the response returned by Discord.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#72
  def delete(reason: T.unsafe(nil)); end

  # Delete a message created by this webhook.
  #
  # @param message_id [String, Integer] The ID of the message to delete.
  # @return [RestClient::Response] the response returned by Discord.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#104
  def delete_message(message_id); end

  # Edit a message from this webhook.
  #
  # @example Edit message content
  #   client.edit_message(message_id, content: 'goodbye world!')
  # @example Edit a message via builder
  #   client.edit_message(message_id) do |builder|
  #   builder.add_embed do |e|
  #   e.description = 'Hello World!'
  #   end
  #   end
  # @note Not all builder options are available when editing.
  # @param message_id [String, Integer] The ID of the message to edit.
  # @param builder [Builder, nil] The builder to start out with, or nil if one should be created anew.
  # @param content [String] The message content.
  # @param embeds [Array<Embed, Hash>]
  # @param allowed_mentions [Hash]
  # @return [RestClient::Response] the response returned by Discord.
  # @yield [builder]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#92
  def edit_message(message_id, builder: T.unsafe(nil), content: T.unsafe(nil), embeds: T.unsafe(nil), allowed_mentions: T.unsafe(nil)); end

  # Executes the webhook this client points to with the given data.
  #
  # @example Execute the webhook with an already existing builder
  #   builder = Discordrb::Webhooks::Builder.new # ...
  #   client.execute(builder)
  # @example Execute the webhook by building a new message
  #   client.execute do |builder|
  #   builder.content = 'Testing'
  #   builder.username = 'discordrb'
  #   builder.add_embed do |embed|
  #   embed.timestamp = Time.now
  #   embed.title = 'Testing'
  #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://i.imgur.com/PcMltU7.jpg')
  #   end
  #   end
  # @param builder [Builder, nil] The builder to start out with, or nil if one should be created anew.
  # @param wait [true, false] Whether Discord should wait for the message to be successfully received by clients, or
  #   whether it should return immediately after sending the message.
  # @raise [TypeError]
  # @return [RestClient::Response] the response returned by Discord.
  # @yield [builder] Gives the builder to the block to add additional steps, or to do the entire building process.
  # @yieldparam builder [Builder] The builder given as a parameter which is used as the initial step to start from.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#41
  def execute(builder = T.unsafe(nil), wait = T.unsafe(nil), components = T.unsafe(nil)); end

  # Modify this webhook's properties.
  #
  # @param name [String, nil] The default name.
  # @param avatar [String, #read, nil] The new avatar, in base64-encoded JPG format.
  # @param channel_id [String, Integer, nil] The channel to move the webhook to.
  # @return [RestClient::Response] the response returned by Discord.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#64
  def modify(name: T.unsafe(nil), avatar: T.unsafe(nil), channel_id: T.unsafe(nil)); end

  private

  # Convert an avatar to API ready data.
  #
  # @param avatar [String, #read] Avatar data.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#112
  def avatarise(avatar); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#130
  def generate_url(id, token); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#120
  def post_json(builder, components, wait); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/client.rb#125
  def post_multipart(builder, components, wait); end
end

# An embed is a multipart-style attachment to a webhook message that can have a variety of different purposes and
# appearances.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#6
class Discordrb::Webhooks::Embed
  # @return [Embed] a new instance of Embed
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#7
  def initialize(title: T.unsafe(nil), description: T.unsafe(nil), url: T.unsafe(nil), timestamp: T.unsafe(nil), colour: T.unsafe(nil), color: T.unsafe(nil), footer: T.unsafe(nil), image: T.unsafe(nil), thumbnail: T.unsafe(nil), video: T.unsafe(nil), provider: T.unsafe(nil), author: T.unsafe(nil), fields: T.unsafe(nil)); end

  # Add a field object to this embed.
  #
  # @param field [EmbedField] The field to add.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#87
  def <<(field); end

  # Convenience method to add a field to the embed without having to create one manually.
  #
  # @example Add a field to an embed, conveniently
  #   embed.add_field(name: 'A field', value: "The field's content")
  # @param name [String] The field's name
  # @param value [String] The field's value
  # @param inline [true, false] Whether the field should be inline
  # @see EmbedField
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#98
  def add_field(name: T.unsafe(nil), value: T.unsafe(nil), inline: T.unsafe(nil)); end

  # @example Add a author to an embed
  #   embed.author = Discordrb::Webhooks::EmbedAuthor.new(name: 'meew0', url: 'https://github.com/meew0', icon_url: 'https://avatars2.githubusercontent.com/u/3662915?v=3&s=466')
  # @return [EmbedAuthor, nil] author for this embed
  # @see EmbedAuthor
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#83
  def author; end

  # @example Add a author to an embed
  #   embed.author = Discordrb::Webhooks::EmbedAuthor.new(name: 'meew0', url: 'https://github.com/meew0', icon_url: 'https://avatars2.githubusercontent.com/u/3662915?v=3&s=466')
  # @return [EmbedAuthor, nil] author for this embed
  # @see EmbedAuthor
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#83
  def author=(_arg0); end

  # @return [Integer, nil] the colour of the bar to the side, in decimal form
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#36
  def color; end

  # Sets the colour of the bar to the side of the embed to something new.
  #
  # @param value [String, Integer, {Integer, Integer, Integer}, #to_i, nil] The colour in decimal, hexadecimal, R/G/B decimal, or nil to clear the embeds colour
  #   form.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#42
  def color=(value); end

  # @return [Integer, nil] the colour of the bar to the side, in decimal form
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#36
  def colour; end

  # Sets the colour of the bar to the side of the embed to something new.
  #
  # @param value [String, Integer, {Integer, Integer, Integer}, #to_i, nil] The colour in decimal, hexadecimal, R/G/B decimal, or nil to clear the embeds colour
  #   form.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#42
  def colour=(value); end

  # @return [String, nil] description for this embed
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#27
  def description; end

  # @return [String, nil] description for this embed
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#27
  def description=(_arg0); end

  # @return [Array<EmbedField>] the fields attached to this embed.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#103
  def fields; end

  # @return [Array<EmbedField>] the fields attached to this embed.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#103
  def fields=(_arg0); end

  # @example Add a footer to an embed
  #   embed.footer = Discordrb::Webhooks::EmbedFooter.new(text: 'Hello', icon_url: 'https://i.imgur.com/j69wMDu.jpg')
  # @return [EmbedFooter, nil] footer for this embed
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#65
  def footer; end

  # @example Add a footer to an embed
  #   embed.footer = Discordrb::Webhooks::EmbedFooter.new(text: 'Hello', icon_url: 'https://i.imgur.com/j69wMDu.jpg')
  # @return [EmbedFooter, nil] footer for this embed
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#65
  def footer=(_arg0); end

  # @example Add a image to an embed
  #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://i.imgur.com/PcMltU7.jpg')
  # @return [EmbedImage, nil] image for this embed
  # @see EmbedImage
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#71
  def image; end

  # @example Add a image to an embed
  #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://i.imgur.com/PcMltU7.jpg')
  # @return [EmbedImage, nil] image for this embed
  # @see EmbedImage
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#71
  def image=(_arg0); end

  # @example Add a thumbnail to an embed
  #   embed.thumbnail = Discordrb::Webhooks::EmbedThumbnail.new(url: 'https://i.imgur.com/xTG3a1I.jpg')
  # @return [EmbedThumbnail, nil] thumbnail for this embed
  # @see EmbedThumbnail
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#77
  def thumbnail; end

  # @example Add a thumbnail to an embed
  #   embed.thumbnail = Discordrb::Webhooks::EmbedThumbnail.new(url: 'https://i.imgur.com/xTG3a1I.jpg')
  # @return [EmbedThumbnail, nil] thumbnail for this embed
  # @see EmbedThumbnail
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#77
  def thumbnail=(_arg0); end

  # @return [Time, nil] timestamp for this embed. Will be displayed just below the title.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#33
  def timestamp; end

  # @return [Time, nil] timestamp for this embed. Will be displayed just below the title.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#33
  def timestamp=(_arg0); end

  # @return [String, nil] title of the embed that will be displayed above everything else.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#24
  def title; end

  # @return [String, nil] title of the embed that will be displayed above everything else.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#24
  def title=(_arg0); end

  # @return [Hash] a hash representation of this embed, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#106
  def to_hash; end

  # @return [String, nil] URL the title should point to
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#30
  def url; end

  # @return [String, nil] URL the title should point to
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#30
  def url=(_arg0); end
end

# An embed's author will be shown at the top to indicate who "authored" the particular event the webhook was sent for.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#190
class Discordrb::Webhooks::EmbedAuthor
  # Creates a new author object.
  #
  # @param name [String, nil] The name of the author.
  # @param url [String, nil] The URL the name should link to.
  # @param icon_url [String, nil] The URL of the icon to be displayed next to the author.
  # @return [EmbedAuthor] a new instance of EmbedAuthor
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#204
  def initialize(name: T.unsafe(nil), url: T.unsafe(nil), icon_url: T.unsafe(nil)); end

  # @return [String, nil] URL of the icon to be displayed next to the author
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#198
  def icon_url; end

  # @return [String, nil] URL of the icon to be displayed next to the author
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#198
  def icon_url=(_arg0); end

  # @return [String, nil] name of the author
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#192
  def name; end

  # @return [String, nil] name of the author
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#192
  def name=(_arg0); end

  # @return [Hash] a hash representation of this embed author, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#211
  def to_hash; end

  # @return [String, nil] URL the name should link to
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#195
  def url; end

  # @return [String, nil] URL the name should link to
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#195
  def url=(_arg0); end
end

# A field is a small block of text with a header that can be relatively freely layouted with other fields.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#221
class Discordrb::Webhooks::EmbedField
  # Creates a new field object.
  #
  # @param name [String, nil] The name of the field, displayed in bold at the top of the field.
  # @param value [String, nil] The value of the field, displayed in normal text below the name.
  # @param inline [true, false] Whether the field should be displayed inline with other fields.
  # @return [EmbedField] a new instance of EmbedField
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#235
  def initialize(name: T.unsafe(nil), value: T.unsafe(nil), inline: T.unsafe(nil)); end

  # @return [true, false] whether the field should be displayed inline with other fields.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#229
  def inline; end

  # @return [true, false] whether the field should be displayed inline with other fields.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#229
  def inline=(_arg0); end

  # @return [String, nil] name of the field, displayed in bold at the top of the field.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#223
  def name; end

  # @return [String, nil] name of the field, displayed in bold at the top of the field.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#223
  def name=(_arg0); end

  # @return [Hash] a hash representation of this embed field, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#242
  def to_hash; end

  # @return [String, nil] value of the field, displayed in normal text below the name.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#226
  def value; end

  # @return [String, nil] value of the field, displayed in normal text below the name.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#226
  def value=(_arg0); end
end

# An embed's footer will be displayed at the very bottom of an embed, together with the timestamp. An icon URL can be
# set together with some text to be displayed.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#126
class Discordrb::Webhooks::EmbedFooter
  # Creates a new footer object.
  #
  # @param text [String, nil] The text to be displayed in the footer.
  # @param icon_url [String, nil] The URL to an icon to be showed alongside the text.
  # @return [EmbedFooter] a new instance of EmbedFooter
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#136
  def initialize(text: T.unsafe(nil), icon_url: T.unsafe(nil)); end

  # @return [String, nil] URL to an icon to be showed alongside the text
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#131
  def icon_url; end

  # @return [String, nil] URL to an icon to be showed alongside the text
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#131
  def icon_url=(_arg0); end

  # @return [String, nil] text to be displayed in the footer
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#128
  def text; end

  # @return [String, nil] text to be displayed in the footer
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#128
  def text=(_arg0); end

  # @return [Hash] a hash representation of this embed footer, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#142
  def to_hash; end
end

# An embed's image will be displayed at the bottom, in large format. It will replace a footer icon URL if one is set.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#151
class Discordrb::Webhooks::EmbedImage
  # Creates a new image object.
  #
  # @param url [String, nil] The URL of the image.
  # @return [EmbedImage] a new instance of EmbedImage
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#157
  def initialize(url: T.unsafe(nil)); end

  # @return [Hash] a hash representation of this embed image, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#162
  def to_hash; end

  # @return [String, nil] URL of the image
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#153
  def url; end

  # @return [String, nil] URL of the image
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#153
  def url=(_arg0); end
end

# An embed's thumbnail will be displayed at the right of the message, next to the description and fields. When clicked
# it will point to the embed URL.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#171
class Discordrb::Webhooks::EmbedThumbnail
  # Creates a new thumbnail object.
  #
  # @param url [String, nil] The URL of the thumbnail.
  # @return [EmbedThumbnail] a new instance of EmbedThumbnail
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#177
  def initialize(url: T.unsafe(nil)); end

  # @return [Hash] a hash representation of this embed thumbnail, to be converted to JSON.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#182
  def to_hash; end

  # @return [String, nil] URL of the thumbnail
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#173
  def url; end

  # @return [String, nil] URL of the thumbnail
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/embeds.rb#173
  def url=(_arg0); end
end

# Modal component builder.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#4
class Discordrb::Webhooks::Modal
  # @return [Modal] a new instance of Modal
  # @yield [_self]
  # @yieldparam _self [Discordrb::Webhooks::Modal] the object that the method was called on
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#60
  def initialize; end

  # Add a new ActionRow to the view
  #
  # @yieldparam [RowBuilder]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#68
  def row; end

  # Returns the value of attribute rows.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#58
  def rows; end

  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#77
  def to_a; end
end

# A mapping of names to types of components usable in a modal.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#6
Discordrb::Webhooks::Modal::COMPONENT_TYPES = T.let(T.unsafe(nil), Hash)

# This builder is used when constructing an ActionRow. All current components must be within an action row, but this can
# change in the future. A message can have 5 action rows, each action row can hold a weight of 5. Buttons have a weight of 1,
# and dropdowns have a weight of 5.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#14
class Discordrb::Webhooks::Modal::RowBuilder
  # @return [RowBuilder] a new instance of RowBuilder
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#22
  def initialize; end

  # Add a text input to this action row.
  #
  # @param style [Symbol, Integer] The text input's style type. See {TEXT_INPUT_STYLES}
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param label [String, nil] The text label for the field.
  # @param min_length [Integer, nil] The minimum input length for a text input, min 0, max 4000.
  # @param max_length [Integer, nil] The maximum input length for a text input, min 1, max 4000.
  # @param required [true, false, nil] Whether this component is required to be filled, default true.
  # @param value [String, nil] A pre-filled value for this component, max 4000 characters.
  # @param placeholder [String, nil] Custom placeholder text if the input is empty, max 100 characters
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#36
  def text_input(style:, custom_id:, label: T.unsafe(nil), min_length: T.unsafe(nil), max_length: T.unsafe(nil), required: T.unsafe(nil), value: T.unsafe(nil), placeholder: T.unsafe(nil)); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#53
  def to_h; end
end

# A mapping of short names to types of input styles. `short` is a single line where `paragraph` is a block.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/modal.rb#16
Discordrb::Webhooks::Modal::RowBuilder::TEXT_INPUT_STYLES = T.let(T.unsafe(nil), Hash)

# The current version of discordrb-webhooks.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/version.rb#7
Discordrb::Webhooks::VERSION = T.let(T.unsafe(nil), String)

# A reusable view representing a component collection, with builder methods.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#4
class Discordrb::Webhooks::View
  # @return [View] a new instance of View
  # @yield [_self]
  # @yieldparam _self [Discordrb::Webhooks::View] the object that the method was called on
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#174
  def initialize; end

  # Add a new ActionRow to the view
  #
  # @yieldparam [RowBuilder]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#182
  def row; end

  # Returns the value of attribute rows.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#172
  def rows; end

  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#191
  def to_a; end
end

# Possible button style names and values.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#6
Discordrb::Webhooks::View::BUTTON_STYLES = T.let(T.unsafe(nil), Hash)

# Component types.
#
# @see https://discord.com/developers/docs/interactions/message-components#component-types
#
# source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#16
Discordrb::Webhooks::View::COMPONENT_TYPES = T.let(T.unsafe(nil), Hash)

# This builder is used when constructing an ActionRow. All current components must be within an action row, but this can
# change in the future. A message can have 5 action rows, each action row can hold a weight of 5. Buttons have a weight of 1,
# and dropdowns have a weight of 5.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#30
class Discordrb::Webhooks::View::RowBuilder
  # @return [RowBuilder] a new instance of RowBuilder
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#32
  def initialize; end

  # Add a button to this action row.
  #
  # @param style [Symbol, Integer] The button's style type. See {BUTTON_STYLES}
  # @param label [String, nil] The text label for the button. Either a label or emoji must be provided.
  # @param emoji [#to_h, String, Integer] An emoji ID, or unicode emoji to attach to the button. Can also be a object
  #   that responds to `#to_h` which returns a hash in the format of `{ id: Integer, name: string }`.
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param disabled [true, false] Whether this button is disabled and shown as greyed out.
  # @param url [String, nil] The URL, when using a link style button.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#45
  def button(style:, label: T.unsafe(nil), emoji: T.unsafe(nil), custom_id: T.unsafe(nil), disabled: T.unsafe(nil), url: T.unsafe(nil)); end

  # Add a select channel to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#117
  def channel_select(custom_id:, placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end

  # Add a select mentionable to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#106
  def mentionable_select(custom_id:, placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end

  # Add a select role to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#95
  def role_select(custom_id:, placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end

  # Add a select string to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param options [Array<Hash>] Options that can be selected in this menu. Can also be provided via the yielded builder.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  # @yieldparam builder [SelectMenuBuilder]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#67
  def select_menu(custom_id:, options: T.unsafe(nil), placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end

  # Add a select string to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param options [Array<Hash>] Options that can be selected in this menu. Can also be provided via the yielded builder.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  # @yieldparam builder [SelectMenuBuilder]
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#67
  def string_select(custom_id:, options: T.unsafe(nil), placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#122
  def to_h; end

  # Add a select user to this action row.
  #
  # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
  #   There is a limit of 100 characters to each custom_id.
  # @param placeholder [String, nil] Default text to show when no entries are selected.
  # @param min_values [Integer, nil] The minimum amount of values a user must select.
  # @param max_values [Integer, nil] The maximum amount of values a user can select.
  # @param disabled [true, false, nil] Grey out the component to make it unusable.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#84
  def user_select(custom_id:, placeholder: T.unsafe(nil), min_values: T.unsafe(nil), max_values: T.unsafe(nil), disabled: T.unsafe(nil)); end
end

# A builder to assist in adding options to select menus.
#
# source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#128
class Discordrb::Webhooks::View::SelectMenuBuilder
  # @return [SelectMenuBuilder] a new instance of SelectMenuBuilder
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#130
  def initialize(custom_id, options = T.unsafe(nil), placeholder = T.unsafe(nil), min_values = T.unsafe(nil), max_values = T.unsafe(nil), disabled = T.unsafe(nil), select_type: T.unsafe(nil)); end

  # Add an option to this select menu.
  #
  # @param label [String] The title of this option.
  # @param value [String] The value that this option represents.
  # @param description [String, nil] An optional description of the option.
  # @param emoji [#to_h, String, Integer] An emoji ID, or unicode emoji to attach to the button. Can also be a object
  #   that responds to `#to_h` which returns a hash in the format of `{ id: Integer, name: string }`.
  # @param default [true, false, nil] Whether this is the default selected option.
  #
  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#147
  def option(label:, value:, description: T.unsafe(nil), emoji: T.unsafe(nil), default: T.unsafe(nil)); end

  # source://discordrb-webhooks//lib/discordrb/webhooks/view.rb#159
  def to_h; end
end
