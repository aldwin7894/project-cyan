# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Google::Protobuf::FeatureSet`.
# Please instead update this file by running `bin/tapioca dsl Google::Protobuf::FeatureSet`.

class Google::Protobuf::FeatureSet
  sig do
    params(
      enum_type: T.nilable(T.any(Symbol, Integer)),
      field_presence: T.nilable(T.any(Symbol, Integer)),
      json_format: T.nilable(T.any(Symbol, Integer)),
      message_encoding: T.nilable(T.any(Symbol, Integer)),
      raw_features: T.nilable(Google::Protobuf::FeatureSet),
      repeated_field_encoding: T.nilable(T.any(Symbol, Integer)),
      string_field_validation: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(enum_type: nil, field_presence: nil, json_format: nil, message_encoding: nil, raw_features: nil, repeated_field_encoding: nil, string_field_validation: nil); end

  sig { void }
  def clear_enum_type; end

  sig { void }
  def clear_field_presence; end

  sig { void }
  def clear_json_format; end

  sig { void }
  def clear_message_encoding; end

  sig { void }
  def clear_raw_features; end

  sig { void }
  def clear_repeated_field_encoding; end

  sig { void }
  def clear_string_field_validation; end

  sig { returns(T.any(Symbol, Integer)) }
  def enum_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enum_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def field_presence; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def field_presence=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def json_format; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def json_format=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def message_encoding; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def message_encoding=(value); end

  sig { returns(T.nilable(Google::Protobuf::FeatureSet)) }
  def raw_features; end

  sig { params(value: T.nilable(Google::Protobuf::FeatureSet)).void }
  def raw_features=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def repeated_field_encoding; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def repeated_field_encoding=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def string_field_validation; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def string_field_validation=(value); end
end
