# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Mongoid::Association`.
# Please instead update this file by running `bin/tapioca dsl Mongoid::Association`.

module Mongoid::Association
  include GeneratedInstanceMethods

  mixes_in_class_methods ::Mongoid::Association::Embedded::Cyclic::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::AutoSave::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Referenced::CounterCache::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Accessors::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Depending::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Builders::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Macros::ClassMethods
  mixes_in_class_methods ::Mongoid::Association::Reflections::ClassMethods
  mixes_in_class_methods GeneratedClassMethods

  module GeneratedClassMethods
    def aliased_associations; end
    def aliased_associations=(value); end
    def aliased_associations?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded; end
    def embedded=(value); end
    def embedded?; end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def relations; end
    def relations=(value); end
    def relations?; end
    def stored_as_associations; end
    def stored_as_associations=(value); end
    def stored_as_associations?; end
  end

  module GeneratedInstanceMethods
    def aliased_associations; end
    def aliased_associations=(value); end
    def aliased_associations?; end
    def cyclic; end
    def cyclic=(value); end
    def cyclic?; end
    def dependents; end
    def dependents=(value); end
    def dependents?; end
    def dependents_owner; end
    def dependents_owner=(value); end
    def dependents_owner?; end
    def embedded=(value); end
    def embedded_relations; end
    def embedded_relations=(value); end
    def embedded_relations?; end
    def polymorphic; end
    def polymorphic=(value); end
    def polymorphic?; end
    def relations; end
    def relations=(value); end
    def relations?; end
    def stored_as_associations; end
    def stored_as_associations=(value); end
    def stored_as_associations?; end
  end
end
